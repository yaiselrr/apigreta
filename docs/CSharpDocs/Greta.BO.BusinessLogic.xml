<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Greta.BO.BusinessLogic</name>
    </assembly>
    <members>
        <member name="T:Greta.BO.BusinessLogic.Authorization.IAuthorizable">
            <summary>
            define one handler need to 
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Authorization.IAuthorizable.Requirements">
            <summary>
            List of base or custom requirement
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Authorization.Requirements.OnlyConnectedUserRequirementRequirement">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Authorization.Requirements.OnlyConnectedUserRequirementRequirement.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Authorization.Requirements.OnlyConnectedUserRequirementHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Authorization.Requirements.OnlyConnectedUserRequirementHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Authorization.Requirements.OnlyConnectedUserRequirementHandler},Greta.Sdk.EFCore.Middleware.IAuthenticateUser{System.String})">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="authenticateUser"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Authorization.Requirements.OnlyConnectedUserRequirementHandler.Handle(Greta.BO.BusinessLogic.Authorization.Requirements.OnlyConnectedUserRequirementRequirement)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Extensions.BaseImportExtensions">
            <summary>
             Simple extensions used mostly in <see cref="T:Greta.BO.BusinessLogic.Handlers.DataHandlers.Importers.BaseImport`1"/> class
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Extensions.BaseImportExtensions.AddExportImportSupport(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Inyect All dependencies we need for the import export process
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Extensions.BaseImportExtensions.GetBaseProperties``1(``0,System.Linq.Expressions.Expression{System.Func{System.Reflection.PropertyInfo,System.Boolean}},System.Action{System.Exception})">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.List`1"/> with properties that match provided predicate. it process only those
            properties that are assignable from strings and are not classes. If and error occurs it returns
            and empty list and invoke the notifyError action if specified.
            </summary>
            <param name="type">type to extract properties from</param>
            <param name="where">predicate to filter properties</param>
            <param name="notifyError"><see cref="T:System.Action`1"/>to notify an error</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Extensions.BaseImportExtensions.GetBaseProperties``1(``0,System.Boolean,System.Action{System.Exception})">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.List`1"/> with properties that are considered as base properties, this means that 
            are not UpdateAt, CreatedAt, UserCreatorId, State and if specified Id. it process only those
            properties that are assignable from strings and are not classes.
            </summary>
            <param name="type">type to extract properties from</param>
            <param name="includeId">if true it will include the Id property on the properties list</param>
            <param name="notifyError">action to notify an error</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Extensions.BaseImportExtensions.GetCsValue``1(System.Collections.Generic.Dictionary{System.String,System.String},CsvHelper.CsvReader,System.String,``0,System.Action{System.Exception})">
            <summary>
             returns a CsvValue the mapping <see cref="!:Dictionary&lt;string, string&gt;"/> with the mapping structure, to map
             the value it search for a field in the csv reading map and returns the Key
            </summary>
            <typeparam name="TReturn">type to return</typeparam>
            <param name="mapping">mapping <see cref="!:Dictionary&lt;string, string&gt;"/> with the data</param>
            <param name="csv"><see cref="T:CsvHelper.CsvReader"/>with data</param>
            <param name="field">field to search for</param>
            <param name="defaultReturn">default value to return</param>
            <param name="notifyError">notify error <see cref="T:System.Action`1"/> to handle error</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Extensions.BaseImportExtensions.GetCsValue``2(System.Collections.Generic.Dictionary{System.String,System.String},CsvHelper.CsvReader,System.String,``0,System.Action{System.Exception})">
            <summary>
             returns a CsvValue the mapping <see cref="!:Dictionary&lt;string, string&gt;"/> with the mapping structure, to map
             the value it search for a field in the csv reading map and returns the Key
            </summary>
            <typeparam name="TReturn">type to return</typeparam>
            <typeparam name="TConverter">converter tu use to cast result</typeparam>
            <param name="mapping">mapping <see cref="!:Dictionary&lt;string, string&gt;"/> with the data</param>
            <param name="csv"><see cref="T:CsvHelper.CsvReader"/>with data</param>
            <param name="field">field to search for</param>
            <param name="defaultReturn">default value to return</param>
            <param name="notifyError">notify error <see cref="T:System.Action`1"/> to handle error</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Greta.BO.BusinessLogic.Extensions.BaseImportExtensions.GetCsValue(System.Collections.Generic.Dictionary{System.String,System.String},CsvHelper.CsvReader,System.Type,System.String,System.Object,System.Action{System.Exception})" -->
        <member name="M:Greta.BO.BusinessLogic.Extensions.BaseImportExtensions.GetColumnName(System.Object,System.Action{System.Exception})">
            <summary>
            returns a <see cref="!:List&lt;string&gt;"/> with all column names, exclude the Id column
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Extensions.BaseImportExtensions.GetAllColumnName(System.Object,System.Action{System.Exception})">
            <summary>
            returns a <see cref="!:List&lt;string&gt;"/> with all columns names of the type. include the Id column
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Extensions.BusinessLogicExtensions.AddBLServices``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                Gets all repositories and registers them in the.net core dependency container
            </summary>
            <typeparam name="TContext">
                Represents a session with the database and can be used to query and save instances of your
                entities
            </typeparam>
            <param name="services">The IServiceCollection to add services to.</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Extensions.SugestionExtentions.LevenshteinDistance(System.String,System.String)">
            <summary>
            Calculate the levenshtein distance between two strings
            i do some change for addapt to mapping work
            </summary>
            <param name="s"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Extensions.SugestionExtentions.Normalize(System.String)">
            <summary>
            Remove all special characters and spaces
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Animal.AnimalChangeStateCommand">
            <summary>
            Change the state of the entity
            </summary>
            <param name="Id">Entity Id</param>
            <param name="State">State to change</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Animal.AnimalChangeStateCommand.#ctor(System.Int64,System.Boolean)">
            <summary>
            Change the state of the entity
            </summary>
            <param name="Id">Entity Id</param>
            <param name="State">State to change</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Animal.AnimalChangeStateCommand.Id">
            <summary>Entity Id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Animal.AnimalChangeStateCommand.State">
            <summary>State to change</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Animal.AnimalChangeStateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Animal.AnimalChangeStateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Animal.AnimalChangeStateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Animal.AnimalChangeStateHandler},Greta.BO.BusinessLogic.Service.IAnimalService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Animal.AnimalChangeStateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Animal.AnimalChangeStateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Animal.AnimalChangeStateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Animal.AnimalCreateCommand">
            <summary>
            Create entity
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Animal.AnimalCreateCommand.#ctor(Greta.BO.BusinessLogic.Models.Dto.AnimalModel)">
            <summary>
            Create entity
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Animal.AnimalCreateCommand.Entity">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Animal.AnimalCreateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Animal.AnimalCreateValidator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Animal.AnimalCreateValidator.#ctor(Greta.BO.BusinessLogic.Service.IAnimalService)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Animal.AnimalCreateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Animal.AnimalCreateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Animal.AnimalCreateHandler},Greta.BO.BusinessLogic.Service.IAnimalService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Animal.AnimalCreateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Animal.AnimalCreateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Animal.AnimalCreateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Animal.AnimalDeleteCommand">
            <summary>
            Delete entity by entity id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Animal.AnimalDeleteCommand.#ctor(System.Int64)">
            <summary>
            Delete entity by entity id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Animal.AnimalDeleteCommand.Id">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Animal.AnimalDeleteCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Animal.AnimalDeleteHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Animal.AnimalDeleteHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Animal.AnimalDeleteHandler},Greta.BO.BusinessLogic.Service.IAnimalService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Animal.AnimalDeleteHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Animal.AnimalDeleteCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Animal.AnimalDeleteResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Animal.AnimalDeleteRangeCommand">
            <summary>
            Delete entities by entity ids
            </summary>
            <param name="Ids"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Animal.AnimalDeleteRangeCommand.#ctor(System.Collections.Generic.List{System.Int64})">
            <summary>
            Delete entities by entity ids
            </summary>
            <param name="Ids"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Animal.AnimalDeleteRangeCommand.Ids">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Animal.AnimalDeleteRangeCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Animal.AnimalDeleteRangeHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Animal.AnimalDeleteRangeHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Animal.AnimalDeleteRangeHandler},Greta.BO.BusinessLogic.Service.IAnimalService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Animal.AnimalDeleteRangeHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Animal.AnimalDeleteRangeCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Animal.AnimalDeleteRangeResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Animal.AnimalUpdateCommand">
            <summary>
            Update entity
            </summary>
            <param name="Id">Entity id</param>
            <param name="Entity">New entity</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Animal.AnimalUpdateCommand.#ctor(System.Int64,Greta.BO.BusinessLogic.Models.Dto.AnimalModel)">
            <summary>
            Update entity
            </summary>
            <param name="Id">Entity id</param>
            <param name="Entity">New entity</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Animal.AnimalUpdateCommand.Id">
            <summary>Entity id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Animal.AnimalUpdateCommand.Entity">
            <summary>New entity</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Animal.AnimalUpdateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Animal.AnimalUpdateValidator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Animal.AnimalUpdateValidator.#ctor(Greta.BO.BusinessLogic.Service.IAnimalService)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Animal.AnimalUpdateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Animal.AnimalUpdateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Animal.AnimalUpdateHandler},Greta.BO.BusinessLogic.Service.IAnimalService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Animal.AnimalUpdateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Animal.AnimalUpdateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Animal.AnimalUpdateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Auth.CheckAdminPasswordCommand">
            <summary>
            Check Admin Password
            </summary>
            <param name="Password"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Auth.CheckAdminPasswordCommand.#ctor(System.String)">
            <summary>
            Check Admin Password
            </summary>
            <param name="Password"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Auth.CheckAdminPasswordCommand.Password">
            <summary></summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Auth.CheckAdminPasswordHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Auth.CheckAdminPasswordHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Auth.CheckAdminPasswordCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Auth.AuthCheckAdminPasswordResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Breed.BreedChangeStateCommand">
            <summary>
            Change the state of the entity
            </summary>
            <param name="Id">Entity Id</param>
            <param name="State">State to change</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Breed.BreedChangeStateCommand.#ctor(System.Int64,System.Boolean)">
            <summary>
            Change the state of the entity
            </summary>
            <param name="Id">Entity Id</param>
            <param name="State">State to change</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Breed.BreedChangeStateCommand.Id">
            <summary>Entity Id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Breed.BreedChangeStateCommand.State">
            <summary>State to change</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Breed.BreedChangeStateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Breed.BreedChangeStateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Breed.BreedChangeStateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Breed.BreedChangeStateHandler},Greta.BO.BusinessLogic.Service.IBreedService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Breed.BreedChangeStateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Breed.BreedChangeStateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Breed.BreedChangeStateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Breed.BreedCreateCommand">
            <summary>
            Create entity
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Breed.BreedCreateCommand.#ctor(Greta.BO.BusinessLogic.Models.Dto.BreedModel)">
            <summary>
            Create entity
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Breed.BreedCreateCommand.Entity">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Breed.BreedCreateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Breed.BreedCreateValidator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Breed.BreedCreateValidator.#ctor(Greta.BO.BusinessLogic.Service.IBreedService)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Breed.BreedCreateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Breed.BreedCreateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Breed.BreedCreateHandler},Greta.BO.BusinessLogic.Service.IBreedService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Breed.BreedCreateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Breed.BreedCreateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Breed.BreedCreateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Breed.BreedDeleteCommand">
            <summary>
            Delete entity by entity id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Breed.BreedDeleteCommand.#ctor(System.Int64)">
            <summary>
            Delete entity by entity id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Breed.BreedDeleteCommand.Id">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Breed.BreedDeleteCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Breed.BreedDeleteHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Breed.BreedDeleteHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Breed.BreedDeleteHandler},Greta.BO.BusinessLogic.Service.IBreedService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Breed.BreedDeleteHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Breed.BreedDeleteCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Breed.BreedDeleteResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Breed.BreedDeleteRangeCommand">
            <summary>
            Delete entities by entity ids
            </summary>
            <param name="Ids"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Breed.BreedDeleteRangeCommand.#ctor(System.Collections.Generic.List{System.Int64})">
            <summary>
            Delete entities by entity ids
            </summary>
            <param name="Ids"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Breed.BreedDeleteRangeCommand.Ids">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Breed.BreedDeleteRangeCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Breed.BreedDeleteRangeHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Breed.BreedDeleteRangeHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Breed.BreedDeleteRangeHandler},Greta.BO.BusinessLogic.Service.IBreedService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Breed.BreedDeleteRangeHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Breed.BreedDeleteRangeCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Breed.BreedDeleteRangeResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Breed.BreedUpdateCommand">
            <summary>
            Update entity
            </summary>
            <param name="Id">Entity id</param>
            <param name="Entity">New entity</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Breed.BreedUpdateCommand.#ctor(System.Int64,Greta.BO.BusinessLogic.Models.Dto.BreedModel)">
            <summary>
            Update entity
            </summary>
            <param name="Id">Entity id</param>
            <param name="Entity">New entity</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Breed.BreedUpdateCommand.Id">
            <summary>Entity id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Breed.BreedUpdateCommand.Entity">
            <summary>New entity</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Breed.BreedUpdateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Breed.BreedUpdateValidator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Breed.BreedUpdateValidator.#ctor(Greta.BO.BusinessLogic.Service.IBreedService)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Breed.BreedUpdateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Breed.BreedUpdateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Breed.BreedUpdateHandler},Greta.BO.BusinessLogic.Service.IBreedService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Breed.BreedUpdateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Breed.BreedUpdateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Breed.BreedUpdateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryChangeLiquorCommand">
            <summary>
            Change isLiquor of the entity
            </summary>
            <param name="Id">Entity Id</param>
            <param name="IsLiquorActive">Is Liquor Active</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryChangeLiquorCommand.#ctor(System.Int64,System.Boolean)">
            <summary>
            Change isLiquor of the entity
            </summary>
            <param name="Id">Entity Id</param>
            <param name="IsLiquorActive">Is Liquor Active</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryChangeLiquorCommand.Id">
            <summary>Entity Id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryChangeLiquorCommand.IsLiquorActive">
            <summary>Is Liquor Active</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryChangeLiquorCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryChangeLiquorHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryChangeLiquorHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryChangeLiquorHandler},Greta.BO.BusinessLogic.Service.ICategoryService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryChangeLiquorHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryChangeLiquorCommand,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryChangeLiquorResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryChangeStateCommand">
            <summary>
            Change the state of the entity
            </summary>
            <param name="Id">Entity Id</param>
            <param name="State">State to change</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryChangeStateCommand.#ctor(System.Int64,System.Boolean)">
            <summary>
            Change the state of the entity
            </summary>
            <param name="Id">Entity Id</param>
            <param name="State">State to change</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryChangeStateCommand.Id">
            <summary>Entity Id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryChangeStateCommand.State">
            <summary>State to change</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryChangeStateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryChangeStateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryChangeStateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryChangeStateHandler},Greta.BO.BusinessLogic.Service.ICategoryService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryChangeStateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryChangeStateCommand,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryChangeStateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryCreateCommand">
            <summary>
            Create entity
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryCreateCommand.#ctor(Greta.BO.BusinessLogic.Models.Dto.CategoryModel)">
            <summary>
            Create entity
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryCreateCommand.Entity">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryCreateCommand.Requirements">
            <summary>
            
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Category.Validator">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Category.Validator.#ctor(Greta.BO.BusinessLogic.Service.ICategoryService)">
            <summary>
            
            </summary>
            <param name="service"></param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryCreateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryCreateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryCreateHandler},Greta.BO.BusinessLogic.Service.ICategoryService,Greta.BO.BusinessLogic.Service.IOnlineStoreService,MediatR.IMediator,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryCreateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryCreateCommand,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryCreateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryDeleteCommand">
            <summary>
            Delete entity by entity id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryDeleteCommand.#ctor(System.Int64)">
            <summary>
            Delete entity by entity id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryDeleteCommand.Id">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryDeleteCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryDeleteHandler">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryDeleteHandler.Validator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryDeleteHandler.Validator.#ctor(Greta.BO.BusinessLogic.Service.ICategoryService)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryDeleteHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryDeleteHandler},Greta.BO.BusinessLogic.Service.IOnlineStoreService,MediatR.IMediator,Greta.BO.BusinessLogic.Service.ICategoryService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryDeleteHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryDeleteCommand,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException"></exception>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryDeleteResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryDeleteRangeCommand">
            <summary>
            Delete entities by entity ids
            </summary>
            <param name="Ids"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryDeleteRangeCommand.#ctor(System.Collections.Generic.List{System.Int64})">
            <summary>
            Delete entities by entity ids
            </summary>
            <param name="Ids"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryDeleteRangeCommand.Ids">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryDeleteRangeCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryDeleteRangeHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryDeleteRangeHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryDeleteRangeHandler},Greta.BO.BusinessLogic.Service.ICategoryService,MediatR.IMediator,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryDeleteRangeHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryDeleteRangeCommand,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryDeleteRangeResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Category.CategorySetTargetGrossProfitCommand">
            <summary>
            Update Category with TargetGrossProfit and update price and grossProfit of products
            </summary>
            <param name="Id"></param>
            <param name="CategoryGrossProfitModel"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Category.CategorySetTargetGrossProfitCommand.#ctor(System.Int64,Greta.BO.BusinessLogic.Models.Dto.CategoryTargetGrossProfitModel)">
            <summary>
            Update Category with TargetGrossProfit and update price and grossProfit of products
            </summary>
            <param name="Id"></param>
            <param name="CategoryGrossProfitModel"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Category.CategorySetTargetGrossProfitCommand.Id">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Category.CategorySetTargetGrossProfitCommand.CategoryGrossProfitModel">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Category.CategorySetTargetGrossProfitCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Category.CategorySetTargetGrossProfitHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Category.CategorySetTargetGrossProfitHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Category.CategorySetTargetGrossProfitHandler},Greta.BO.BusinessLogic.Service.ICategoryService,Greta.BO.BusinessLogic.Service.IStoreProductService)">
            <summary>
            Set gross profit to products
            </summary>
            <param name="logger"></param>
            <param name="serviceCategory"></param>
            <param name="serviceStoreProduct"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Category.CategorySetTargetGrossProfitHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Category.CategorySetTargetGrossProfitCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Category.CategorySetTargetGrossProfitResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryUpdateCommand">
            <summary>
            Update entity
            </summary>
            <param name="Id">Entity id</param>
            <param name="ChangeAllProducts">Bool Value</param>
            <param name="Entity">New entity</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryUpdateCommand.#ctor(System.Int64,System.Boolean,Greta.BO.BusinessLogic.Models.Dto.CategoryModel)">
            <summary>
            Update entity
            </summary>
            <param name="Id">Entity id</param>
            <param name="ChangeAllProducts">Bool Value</param>
            <param name="Entity">New entity</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryUpdateCommand.Id">
            <summary>Entity id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryUpdateCommand.ChangeAllProducts">
            <summary>Bool Value</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryUpdateCommand.Entity">
            <summary>New entity</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryUpdateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryUpdateValidator">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryUpdateValidator.#ctor(Greta.BO.BusinessLogic.Service.ICategoryService)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryUpdateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryUpdateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryUpdateHandler},Greta.BO.BusinessLogic.Service.ICategoryService,MediatR.IMediator,Greta.BO.BusinessLogic.Service.ISynchroService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="synchroService"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryUpdateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryUpdateCommand,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Category.CategoryUpdateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerChangeStateCommand">
            <summary>
            Change the state of the entity
            </summary>
            <param name="Id">Entity Id</param>
            <param name="State">State to change</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerChangeStateCommand.#ctor(System.Int64,System.Boolean)">
            <summary>
            Change the state of the entity
            </summary>
            <param name="Id">Entity Id</param>
            <param name="State">State to change</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerChangeStateCommand.Id">
            <summary>Entity Id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerChangeStateCommand.State">
            <summary>State to change</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerChangeStateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerChangeStateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerChangeStateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerChangeStateHandler},Greta.BO.BusinessLogic.Service.ICustomerService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerChangeStateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerChangeStateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerChangeStateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerCreateCommand">
            <summary>
            Create entity
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerCreateCommand.#ctor(Greta.BO.BusinessLogic.Models.Dto.CustomerModel)">
            <summary>
            Create entity
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerCreateCommand.Entity">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerCreateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Customer.Validator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Customer.Validator.#ctor">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerCreateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerCreateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerCreateHandler},Greta.BO.BusinessLogic.Service.ICustomerService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerCreateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerCreateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerCreateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerDeleteCommand">
            <summary>
            Delete entity by entity id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerDeleteCommand.#ctor(System.Int64)">
            <summary>
            Delete entity by entity id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerDeleteCommand.Id">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerDeleteCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerDeleteHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerDeleteHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerDeleteHandler},Greta.BO.BusinessLogic.Service.ICustomerService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerDeleteHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerDeleteCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerDeleteResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerDeleteRangeCommand">
            <summary>
            Delete entities by entity ids
            </summary>
            <param name="Ids"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerDeleteRangeCommand.#ctor(System.Collections.Generic.List{System.Int64})">
            <summary>
            Delete entities by entity ids
            </summary>
            <param name="Ids"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerDeleteRangeCommand.Ids">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerDeleteRangeCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerDeleteRangeHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerDeleteRangeHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerDeleteRangeHandler},Greta.BO.BusinessLogic.Service.ICustomerService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerDeleteRangeHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerDeleteRangeCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerDeleteRangeResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerUpdateCommand">
            <summary>
            Update entity
            </summary>
            <param name="Id">Entity id</param>
            <param name="Entity">New entity</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerUpdateCommand.#ctor(System.Int64,Greta.BO.BusinessLogic.Models.Dto.CustomerModel)">
            <summary>
            Update entity
            </summary>
            <param name="Id">Entity id</param>
            <param name="Entity">New entity</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerUpdateCommand.Id">
            <summary>Entity id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerUpdateCommand.Entity">
            <summary>New entity</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerUpdateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerUpdateValidator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerUpdateValidator.#ctor">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerUpdateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerUpdateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerUpdateHandler},Greta.BO.BusinessLogic.Service.ICustomerService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerUpdateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerUpdateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerUpdateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerUpdatePoints">
            <summary>
            Update points entity
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerUpdatePoints.Command">
            <summary>
            Update entity
            </summary>
            <param name="Customers">Entity id</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerUpdatePoints.Command.#ctor(System.Collections.Generic.List{Greta.BO.Api.Entities.Customer})">
            <summary>
            Update entity
            </summary>
            <param name="Customers">Entity id</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerUpdatePoints.Command.Customers">
            <summary>Entity id</summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerUpdatePoints.Handler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerUpdatePoints.Handler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerUpdatePoints.Handler},Greta.BO.BusinessLogic.Service.ICustomerService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="customerService"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerUpdatePoints.Handler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Customer.CustomerUpdatePoints.Command,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.CutListDetail.CutListDetailCreateCommand">
            <summary>
            Create entity
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.CutListDetail.CutListDetailCreateCommand.#ctor(Greta.BO.BusinessLogic.Models.Dto.CutListDetailListModel)">
            <summary>
            Create entity
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.CutListDetail.CutListDetailCreateCommand.Entity">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.CutListDetail.CutListDetailCreateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.CutListDetail.CutListDetailCreateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.CutListDetail.CutListDetailCreateHandler.#ctor(Greta.BO.BusinessLogic.Service.ICutListDetailService,Greta.BO.BusinessLogic.Service.ICutListService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="serviceCutList"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.CutListDetail.CutListDetailCreateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.CutListDetail.CutListDetailCreateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.CutListDetail.CutListDetailCreateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.CutListDetail.CutListDetailDeleteCommand">
            <summary>
            
            </summary>
            <param name="Id"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.CutListDetail.CutListDetailDeleteCommand.#ctor(System.Int64)">
            <summary>
            
            </summary>
            <param name="Id"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.CutListDetail.CutListDetailDeleteCommand.Id">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.CutListDetail.CutListDetailDeleteCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.CutListDetail.CutListDetailDeleteHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.CutListDetail.CutListDetailDeleteHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.CutListDetail.CutListDetailDeleteHandler},Greta.BO.BusinessLogic.Service.ICutListDetailService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.CutListDetail.CutListDetailDeleteHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.CutListDetail.CutListDetailDeleteCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.CutListDetail.CutListDetailDeleteResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.CutListDetail.CutListDetailDeleteRangeCommand">
            <summary>
            
            </summary>
            <param name="Ids"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.CutListDetail.CutListDetailDeleteRangeCommand.#ctor(System.Collections.Generic.List{System.Int64})">
            <summary>
            
            </summary>
            <param name="Ids"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.CutListDetail.CutListDetailDeleteRangeCommand.Ids">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.CutListDetail.CutListDetailDeleteRangeCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.CutListDetail.CutListDetailDeleteRangeHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.CutListDetail.CutListDetailDeleteRangeHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.CutListDetail.CutListDetailDeleteRangeHandler},Greta.BO.BusinessLogic.Service.ICutListDetailService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.CutListDetail.CutListDetailDeleteRangeHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.CutListDetail.CutListDetailDeleteRangeCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.CutListDetail.CutListDetailDeleteRangeResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.CutListTemplateChangeStateCommand">
            <summary>
            Command for change state to CutListTemplate entity
            </summary>
            <param name="Id"></param>
            <param name="State"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.CutListTemplateChangeStateCommand.#ctor(System.Int64,System.Boolean)">
            <summary>
            Command for change state to CutListTemplate entity
            </summary>
            <param name="Id"></param>
            <param name="State"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.CutListTemplateChangeStateCommand.Id">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.CutListTemplateChangeStateCommand.State">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.CutListTemplateChangeStateCommand.Requirements">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.CutListTemplateChangeStateHandler">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.CutListTemplateChangeStateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.CutListTemplateChangeStateHandler},Greta.BO.BusinessLogic.Service.ICutListTemplateService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.CutListTemplateChangeStateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.CutListTemplateChangeStateCommand,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.CutListTemplateChangeStateResponse">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.CutListTemplateCreateCommand">
            <summary>
            Command to create CutListTemplate Entity
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.CutListTemplateCreateCommand.#ctor(Greta.BO.BusinessLogic.Models.Dto.CutListTemplateModel)">
            <summary>
            Command to create CutListTemplate Entity
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.CutListTemplateCreateCommand.Entity">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.CutListTemplateCreateCommand.Requirements">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.Validator">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.Validator.#ctor(Greta.BO.BusinessLogic.Service.ICutListTemplateService)">
            <summary>
            
            </summary>
            <param name="service"></param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.CutListTemplateCreateHandler">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.CutListTemplateCreateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.CutListTemplateCreateHandler},Greta.BO.BusinessLogic.Service.ICutListTemplateService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.CutListTemplateCreateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.CutListTemplateCreateCommand,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.CutListTemplateCreateResponse">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.CutListTemplateDeleteCommand">
            <summary>
            Command for delete CutListTemplate entity
            </summary>
            <param name="Id"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.CutListTemplateDeleteCommand.#ctor(System.Int64)">
            <summary>
            Command for delete CutListTemplate entity
            </summary>
            <param name="Id"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.CutListTemplateDeleteCommand.Id">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.CutListTemplateDeleteCommand.Requirements">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.CutListTemplateValidator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.CutListTemplateValidator.#ctor(Greta.BO.BusinessLogic.Service.ICutListTemplateService)">
            <summary>
            
            </summary>
            <param name="service"></param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.CutListTemplateDeleteHandler">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.CutListTemplateDeleteHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.CutListTemplateDeleteHandler},Greta.BO.BusinessLogic.Service.ICutListTemplateService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>   
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.CutListTemplateDeleteHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.CutListTemplateDeleteCommand,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.CutListTemplateDeleteResponse">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.CutListTemplateDeleteRangeCommand">
            <summary>
            Command for delete range of CutListTemplate entities
            </summary>
            <param name="Ids">List of long ids</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.CutListTemplateDeleteRangeCommand.#ctor(System.Collections.Generic.List{System.Int64})">
            <summary>
            Command for delete range of CutListTemplate entities
            </summary>
            <param name="Ids">List of long ids</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.CutListTemplateDeleteRangeCommand.Ids">
            <summary>List of long ids</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.CutListTemplateDeleteRangeCommand.Requirements">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.CutListTemplateDeleteRangeHandler">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.CutListTemplateDeleteRangeHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.CutListTemplateDeleteRangeHandler},Greta.BO.BusinessLogic.Service.ICutListTemplateService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.CutListTemplateDeleteRangeHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.CutListTemplateDeleteRangeCommand,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.CutListTemplateDeleteRangeResponse">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.CutListTemplateUpdateCommand">
            <summary>
            Command for update CutListTemplate Entity
            </summary>
            <param name="Id"></param>
            <param name="Entity"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.CutListTemplateUpdateCommand.#ctor(System.Int64,Greta.BO.BusinessLogic.Models.Dto.CutListTemplateModel)">
            <summary>
            Command for update CutListTemplate Entity
            </summary>
            <param name="Id"></param>
            <param name="Entity"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.CutListTemplateUpdateCommand.Id">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.CutListTemplateUpdateCommand.Entity">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.CutListTemplateUpdateCommand.Requirements">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.CutListTemplateUpdateValidator">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.CutListTemplateUpdateValidator.#ctor(Greta.BO.BusinessLogic.Service.ICutListTemplateService)">
            <summary>
            
            </summary>
            <param name="service"></param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.CutListTemplateUpdateHandler">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.CutListTemplateUpdateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.CutListTemplateUpdateHandler},Greta.BO.BusinessLogic.Service.ICutListTemplateService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.CutListTemplateUpdateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.CutListTemplateUpdateCommand,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.CutListTemplate.CutListTemplateUpdateResponse">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.CutList.CutListCreateCommand">
            <summary>
            Create entity
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.CutList.CutListCreateCommand.#ctor(Greta.BO.BusinessLogic.Models.Dto.CutListModel)">
            <summary>
            Create entity
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.CutList.CutListCreateCommand.Entity">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.CutList.CutListCreateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.CutList.CutListCreateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.CutList.CutListCreateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.CutList.CutListCreateHandler},Greta.BO.BusinessLogic.Service.ICutListService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.CutList.CutListCreateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.CutList.CutListCreateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.CutList.CutListCreateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.CutList.CutListUpdateCommand">
            <summary>
            Update entity
            </summary>
            <param name="Id">Entity id</param>
            <param name="Entity">New entity</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.CutList.CutListUpdateCommand.#ctor(System.Int64,Greta.BO.BusinessLogic.Models.Dto.CutListModel)">
            <summary>
            Update entity
            </summary>
            <param name="Id">Entity id</param>
            <param name="Entity">New entity</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.CutList.CutListUpdateCommand.Id">
            <summary>Entity id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.CutList.CutListUpdateCommand.Entity">
            <summary>New entity</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.CutList.CutListUpdateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.CutList.CutListUpdateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.CutList.CutListUpdateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.CutList.CutListUpdateHandler},Greta.BO.BusinessLogic.Service.ICutListService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.CutList.CutListUpdateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.CutList.CutListUpdateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.CutList.CutListUpdateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Department.DepartmentChangeStateCommand">
            <summary>
            Change the state of the entity
            </summary>
            <param name="Id">Entity Id</param>
            <param name="State">State to change</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Department.DepartmentChangeStateCommand.#ctor(System.Int64,System.Boolean)">
            <summary>
            Change the state of the entity
            </summary>
            <param name="Id">Entity Id</param>
            <param name="State">State to change</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Department.DepartmentChangeStateCommand.Id">
            <summary>Entity Id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Department.DepartmentChangeStateCommand.State">
            <summary>State to change</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Department.DepartmentChangeStateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Department.DepartmentChangeStateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Department.DepartmentChangeStateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Department.DepartmentChangeStateHandler},Greta.BO.BusinessLogic.Service.IDepartmentService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Department.DepartmentChangeStateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Department.DepartmentChangeStateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Department.DepartmentChangeStateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Department.DepartmentCreateCommand">
            <summary>
            Create entity
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Department.DepartmentCreateCommand.#ctor(Greta.BO.BusinessLogic.Models.Dto.DepartmentModel)">
            <summary>
            Create entity
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Department.DepartmentCreateCommand.Entity">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Department.DepartmentCreateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Department.Validator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Department.Validator.#ctor(Greta.BO.BusinessLogic.Service.IDepartmentService)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Department.DepartmentCreateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Department.DepartmentCreateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Department.DepartmentCreateHandler},Greta.BO.BusinessLogic.Service.IDepartmentService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Department.DepartmentCreateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Department.DepartmentCreateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Department.DepartmentCreateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Department.DepartmentDeleteCommand">
            <summary>
            Delete entity by entity id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Department.DepartmentDeleteCommand.#ctor(System.Int64)">
            <summary>
            Delete entity by entity id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Department.DepartmentDeleteCommand.Id">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Department.DepartmentDeleteCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Department.DepartmentDeleteHandler">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Department.DepartmentDeleteHandler.Validator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Department.DepartmentDeleteHandler.Validator.#ctor(Greta.BO.BusinessLogic.Service.IDepartmentService)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Department.DepartmentDeleteHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Department.DepartmentDeleteHandler},Greta.BO.BusinessLogic.Service.IDepartmentService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Department.DepartmentDeleteHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Department.DepartmentDeleteCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Department.DepartmentDeleteResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Department.DepartmentDeleteRangeCommand">
            <summary>
            Delete entities by entity ids
            </summary>
            <param name="Ids"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Department.DepartmentDeleteRangeCommand.#ctor(System.Collections.Generic.List{System.Int64})">
            <summary>
            Delete entities by entity ids
            </summary>
            <param name="Ids"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Department.DepartmentDeleteRangeCommand.Ids">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Department.DepartmentDeleteRangeCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Department.DepartmentDeleteRangeHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Department.DepartmentDeleteRangeHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Department.DepartmentDeleteRangeHandler},Greta.BO.BusinessLogic.Service.IDepartmentService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Department.DepartmentDeleteRangeHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Department.DepartmentDeleteRangeCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Department.DepartmentDeleteRangeResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Department.DepartmentUpdateCommand">
            <summary>
            Update Entity
            </summary>
            <param name="Id">Entity id</param>
            <param name="Entity">New Entity</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Department.DepartmentUpdateCommand.#ctor(System.Int64,Greta.BO.BusinessLogic.Models.Dto.DepartmentModel)">
            <summary>
            Update Entity
            </summary>
            <param name="Id">Entity id</param>
            <param name="Entity">New Entity</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Department.DepartmentUpdateCommand.Id">
            <summary>Entity id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Department.DepartmentUpdateCommand.Entity">
            <summary>New Entity</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Department.DepartmentUpdateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Department.DepartmentUpdateValidator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Department.DepartmentUpdateValidator.#ctor(Greta.BO.BusinessLogic.Service.IDepartmentService)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Department.DepartmentUpdateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Department.DepartmentUpdateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Department.DepartmentUpdateHandler},Greta.BO.BusinessLogic.Service.IDepartmentService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Department.DepartmentUpdateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Department.DepartmentUpdateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Department.DepartmentUpdateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceChangeStateCommand">
            <summary>
            Change the state of the entity
            </summary>
            <param name="Id">Entity Id</param>
            <param name="State">State to change</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceChangeStateCommand.#ctor(System.Int64,System.Boolean)">
            <summary>
            Change the state of the entity
            </summary>
            <param name="Id">Entity Id</param>
            <param name="State">State to change</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceChangeStateCommand.Id">
            <summary>Entity Id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceChangeStateCommand.State">
            <summary>State to change</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceChangeStateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceChangeStateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceChangeStateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceChangeStateHandler},Greta.BO.BusinessLogic.Service.IDeviceService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceChangeStateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceChangeStateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceChangeStateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceCreateCommand">
            <summary>
            Create entity
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceCreateCommand.#ctor(Greta.BO.BusinessLogic.Models.Dto.DeviceModel)">
            <summary>
            Create entity
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceCreateCommand.Entity">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceCreateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceCreateValidator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceCreateValidator.#ctor(Greta.BO.BusinessLogic.Service.IDeviceService)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceCreateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceCreateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceCreateHandler},Greta.BO.BusinessLogic.Service.IDeviceService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceCreateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceCreateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceCreateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceDeleteCommand">
            <summary>
            Delete entity by entity id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceDeleteCommand.#ctor(System.Int64)">
            <summary>
            Delete entity by entity id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceDeleteCommand.Id">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceDeleteCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceDeleteHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceDeleteHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceDeleteHandler},Greta.BO.BusinessLogic.Service.IDeviceService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceDeleteHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceDeleteCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceDeleteResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceDeleteRangeCommand">
            <summary>
            Delete entities by entity ids
            </summary>
            <param name="Ids"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceDeleteRangeCommand.#ctor(System.Collections.Generic.List{System.Int64})">
            <summary>
            Delete entities by entity ids
            </summary>
            <param name="Ids"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceDeleteRangeCommand.Ids">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceDeleteRangeCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceDeleteRangeHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceDeleteRangeHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceDeleteRangeHandler},Greta.BO.BusinessLogic.Service.IDeviceService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceDeleteRangeHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceDeleteRangeCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceDeleteRangeResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceForceFullSynchroCommand">
            <summary>
            Device force full synchro
            </summary>
            <param name="DeviceId">Device id</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceForceFullSynchroCommand.#ctor(System.Int64)">
            <summary>
            Device force full synchro
            </summary>
            <param name="DeviceId">Device id</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceForceFullSynchroCommand.DeviceId">
            <summary>Device id</summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceForceFullSynchroResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceForceFullSynchroHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceForceFullSynchroHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceForceFullSynchroHandler},MediatR.IMediator,Greta.BO.BusinessLogic.Service.IDeviceService,Greta.BO.BusinessLogic.Service.IStoreService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="mediator"></param>
            <param name="deviceService"></param>
            <param name="storeService"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceForceFullSynchroHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceForceFullSynchroCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceUpdateCommand">
            <summary>
            Update entity
            </summary>
            <param name="Id">Entity id</param>
            <param name="Entity">New entity</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceUpdateCommand.#ctor(System.Int64,Greta.BO.BusinessLogic.Models.Dto.DeviceModel)">
            <summary>
            Update entity
            </summary>
            <param name="Id">Entity id</param>
            <param name="Entity">New entity</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceUpdateCommand.Id">
            <summary>Entity id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceUpdateCommand.Entity">
            <summary>New entity</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceUpdateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceUpdateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceUpdateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceUpdateHandler},Greta.BO.BusinessLogic.Service.IDeviceService,MediatR.IMediator,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mediator"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceUpdateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceUpdateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceUpdateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceUpdateNameCommand">
            <summary>
            Update entity
            </summary>
            <param name="Id">Entity id</param>
            <param name="Entity">New entity</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceUpdateNameCommand.#ctor(System.Int64,Greta.BO.BusinessLogic.Models.Dto.DeviceModel)">
            <summary>
            Update entity
            </summary>
            <param name="Id">Entity id</param>
            <param name="Entity">New entity</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceUpdateNameCommand.Id">
            <summary>Entity id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceUpdateNameCommand.Entity">
            <summary>New entity</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceUpdateNameCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceUpdateValidator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceUpdateValidator.#ctor(Greta.BO.BusinessLogic.Service.IDeviceService)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceUpdateNameHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceUpdateNameHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceUpdateNameHandler},Greta.BO.BusinessLogic.Service.IDeviceService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceUpdateNameHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceUpdateNameCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceUpdateNameResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceUpdateTagVersionCommand">
            <summary>
            Update entity
            </summary>
            <param name="DeviceId">Entity id</param>
            <param name="NewTag">New entity</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceUpdateTagVersionCommand.#ctor(System.String,System.Int64)">
            <summary>
            Update entity
            </summary>
            <param name="DeviceId">Entity id</param>
            <param name="NewTag">New entity</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceUpdateTagVersionCommand.DeviceId">
            <summary>Entity id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceUpdateTagVersionCommand.NewTag">
            <summary>New entity</summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceUpdateTagVersionHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceUpdateTagVersionHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceUpdateTagVersionHandler},Greta.BO.BusinessLogic.Service.IDeviceService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceUpdateTagVersionHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Device.DeviceUpdateTagVersionCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Discount.DiscountChangeStateCommand">
            <summary>
            Change the state of the entity
            </summary>
            <param name="Id">Entity Id</param>
            <param name="State">State to change</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Discount.DiscountChangeStateCommand.#ctor(System.Int64,System.Boolean)">
            <summary>
            Change the state of the entity
            </summary>
            <param name="Id">Entity Id</param>
            <param name="State">State to change</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Discount.DiscountChangeStateCommand.Id">
            <summary>Entity Id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Discount.DiscountChangeStateCommand.State">
            <summary>State to change</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Discount.DiscountChangeStateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Discount.DiscountChangeStateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Discount.DiscountChangeStateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Discount.DiscountChangeStateHandler},Greta.BO.BusinessLogic.Service.IDiscountService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Discount.DiscountChangeStateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Discount.DiscountChangeStateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Discount.DiscountChangeStateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Discount.DiscountCreateCommand">
            <summary>
            Command to create Discount Entity
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Discount.DiscountCreateCommand.#ctor(Greta.BO.BusinessLogic.Models.Dto.DiscountModel)">
            <summary>
            Command to create Discount Entity
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Discount.DiscountCreateCommand.Entity">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Discount.DiscountCreateCommand.Requirements">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Discount.Validator">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Discount.Validator.#ctor(Greta.BO.BusinessLogic.Service.IDiscountService)">
            <summary>
            
            </summary>
            <param name="service"></param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Discount.DiscountCreateHandler">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Discount.DiscountCreateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Discount.DiscountCreateHandler},Greta.BO.BusinessLogic.Service.IDiscountService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Discount.DiscountCreateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Discount.DiscountCreateCommand,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Discount.DiscountCreateResponse">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Discount.DiscountDeleteCommand">
            <summary>
            Delete entity by entity id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Discount.DiscountDeleteCommand.#ctor(System.Int64)">
            <summary>
            Delete entity by entity id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Discount.DiscountDeleteCommand.Id">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Discount.DiscountDeleteCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Discount.DiscountDeleteHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Discount.DiscountDeleteHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Discount.DiscountDeleteHandler},Greta.BO.BusinessLogic.Service.IDiscountService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Discount.DiscountDeleteHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Discount.DiscountDeleteCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Discount.DiscountDeleteResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Discount.DiscountDeleteRangeCommand">
            <summary>
            Delete entities by entity ids
            </summary>
            <param name="Ids"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Discount.DiscountDeleteRangeCommand.#ctor(System.Collections.Generic.List{System.Int64})">
            <summary>
            Delete entities by entity ids
            </summary>
            <param name="Ids"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Discount.DiscountDeleteRangeCommand.Ids">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Discount.DiscountDeleteRangeCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Discount.DiscountDeleteRangeHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Discount.DiscountDeleteRangeHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Discount.DiscountDeleteRangeHandler},Greta.BO.BusinessLogic.Service.IDiscountService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Discount.DiscountDeleteRangeHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Discount.DiscountDeleteRangeCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Discount.DiscountDeleteRangeResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Discount.DiscountUpdateCommand">
            <summary>
            Update entity
            </summary>
            <param name="Id">Entity id</param>
            <param name="Entity">New entity</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Discount.DiscountUpdateCommand.#ctor(System.Int64,Greta.BO.BusinessLogic.Models.Dto.DiscountModel)">
            <summary>
            Update entity
            </summary>
            <param name="Id">Entity id</param>
            <param name="Entity">New entity</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Discount.DiscountUpdateCommand.Id">
            <summary>Entity id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Discount.DiscountUpdateCommand.Entity">
            <summary>New entity</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Discount.DiscountUpdateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Discount.DiscountUpdateValidator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Discount.DiscountUpdateValidator.#ctor(Greta.BO.BusinessLogic.Service.IDiscountService)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Discount.DiscountUpdateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Discount.DiscountUpdateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Discount.DiscountUpdateHandler},Greta.BO.BusinessLogic.Service.IDiscountService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Discount.DiscountUpdateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Discount.DiscountUpdateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Discount.DiscountUpdateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleChangeStateCommand">
            <summary>
            Change the state of the entity
            </summary>
            <param name="Id">Entity Id</param>
            <param name="State">State to change</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleChangeStateCommand.#ctor(System.Int64,System.Boolean)">
            <summary>
            Change the state of the entity
            </summary>
            <param name="Id">Entity Id</param>
            <param name="State">State to change</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleChangeStateCommand.Id">
            <summary>Entity Id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleChangeStateCommand.State">
            <summary>State to change</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleChangeStateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleChangeStateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleChangeStateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleChangeStateHandler},Greta.BO.BusinessLogic.Service.IExternalScaleService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleChangeStateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleChangeStateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleChangeStateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleCreateCommand">
            <summary>
            Create entity
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleCreateCommand.#ctor(Greta.BO.BusinessLogic.Models.Dto.ExternalScaleModel)">
            <summary>
            Create entity
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleCreateCommand.Entity">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleCreateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.Validator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.Validator.#ctor">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleCreateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleCreateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleCreateHandler},Greta.BO.BusinessLogic.Service.IExternalScaleService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleCreateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleCreateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleCreateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleDeleteCommand">
            <summary>
            Delete entity by entity id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleDeleteCommand.#ctor(System.Int64)">
            <summary>
            Delete entity by entity id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleDeleteCommand.Id">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleDeleteCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleDeleteHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleDeleteHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleDeleteHandler},Greta.BO.BusinessLogic.Service.IExternalScaleService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleDeleteHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleDeleteCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleDeleteResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleDeleteRangeCommand">
            <summary>
            Delete entities by entity ids
            </summary>
            <param name="Ids"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleDeleteRangeCommand.#ctor(System.Collections.Generic.List{System.Int64})">
            <summary>
            Delete entities by entity ids
            </summary>
            <param name="Ids"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleDeleteRangeCommand.Ids">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleDeleteRangeCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleDeleteRangeHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleDeleteRangeHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleDeleteRangeHandler},Greta.BO.BusinessLogic.Service.IExternalScaleService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleDeleteRangeHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleDeleteRangeCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleDeleteRangeResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleUpdateCommand">
            <summary>
            Update entity
            </summary>
            <param name="Id">Entity id</param>
            <param name="Entity">New entity</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleUpdateCommand.#ctor(System.Int64,Greta.BO.BusinessLogic.Models.Dto.ExternalScaleModel)">
            <summary>
            Update entity
            </summary>
            <param name="Id">Entity id</param>
            <param name="Entity">New entity</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleUpdateCommand.Id">
            <summary>Entity id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleUpdateCommand.Entity">
            <summary>New entity</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleUpdateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleUpdateValidator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleUpdateValidator.#ctor">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleUpdateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleUpdateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleUpdateHandler},Greta.BO.BusinessLogic.Service.IExternalScaleService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleUpdateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleUpdateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleUpdateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.SendDataToExternalScaleCommand">
            <summary>
            Send data to one external scale  
            </summary>
            <param name="Store">Store id</param>
            <param name="Department">Department Id</param>
            <param name="Type">New Type</param>
            <param name="Partial">Bool Value</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.SendDataToExternalScaleCommand.#ctor(System.Int64,System.Int64,Greta.Sdk.ExternalScale.Enums.ExternalScaleOperationType,System.Boolean)">
            <summary>
            Send data to one external scale  
            </summary>
            <param name="Store">Store id</param>
            <param name="Department">Department Id</param>
            <param name="Type">New Type</param>
            <param name="Partial">Bool Value</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.SendDataToExternalScaleCommand.Store">
            <summary>Store id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.SendDataToExternalScaleCommand.Department">
            <summary>Department Id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.SendDataToExternalScaleCommand.Type">
            <summary>New Type</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.SendDataToExternalScaleCommand.Partial">
            <summary>Bool Value</summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.SendDataToExternalScaleResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.SendDataToExternalScaleHandler">
            <inheritdoc />
        </member>
        <member name="F:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.SendDataToExternalScaleHandler.FolderTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.SendDataToExternalScaleHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.SendDataToExternalScaleHandler},Microsoft.Extensions.Configuration.IConfiguration,Greta.Sdk.FileStorage.Interfaces.IStorageProvider,Microsoft.Extensions.Options.IOptions{Greta.Sdk.FileStorage.Options.StorageOption})">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="configuration"></param>
            <param name="storage"></param>
            <param name="options"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.SendDataToExternalScaleHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.SendDataToExternalScaleCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.SendDataToExternalScaleHandler.GetUpdatesForScales(Greta.BO.Api.Sqlserver.SqlServerContext,System.Int64,System.DateTime,System.Int64)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="storeId"></param>
            <param name="last"></param>
            <param name="dep"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.SendDataToExternalScaleHandler.GetAllForScales(Greta.BO.Api.Sqlserver.SqlServerContext,System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="storeId"></param>
            <param name="dep"></param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleResponseHolder">
            <summary>
            
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleResponseHolder.Id">
            <summary>
            
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.ExternalScale.ExternalScaleResponseHolder.Scale">
            <summary>
            
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Family.AddProductsToFamilyCommand">
            <summary>
            Add products to family
            </summary>
            <param name="Id"></param>
            <param name="UpCs"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Family.AddProductsToFamilyCommand.#ctor(System.Int64,System.Collections.Generic.List{System.String})">
            <summary>
            Add products to family
            </summary>
            <param name="Id"></param>
            <param name="UpCs"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Family.AddProductsToFamilyCommand.Id">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Family.AddProductsToFamilyCommand.UpCs">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Family.AddProductsToFamilyCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Family.AddProductsToFamilyHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Family.AddProductsToFamilyHandler.#ctor(Greta.BO.BusinessLogic.Service.IFamilyService)">
            <summary>
            
            </summary>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Family.AddProductsToFamilyHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Family.AddProductsToFamilyCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Family.AddProductsToFamilyResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyChangeStateCommand">
            <summary>
            Change the state of the entity
            </summary>
            <param name="Id">Entity Id</param>
            <param name="State">State to change</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyChangeStateCommand.#ctor(System.Int64,System.Boolean)">
            <summary>
            Change the state of the entity
            </summary>
            <param name="Id">Entity Id</param>
            <param name="State">State to change</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyChangeStateCommand.Id">
            <summary>Entity Id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyChangeStateCommand.State">
            <summary>State to change</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyChangeStateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyChangeStateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyChangeStateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyChangeStateHandler},Greta.BO.BusinessLogic.Service.IFamilyService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyChangeStateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyChangeStateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyChangeStateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyCreateCommand">
            <summary>
            Create entity
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyCreateCommand.#ctor(Greta.BO.BusinessLogic.Models.Dto.FamilyModel)">
            <summary>
            Create entity
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyCreateCommand.Entity">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyCreateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Family.Validator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Family.Validator.#ctor(Greta.BO.BusinessLogic.Service.IFamilyService)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyCreateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyCreateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyCreateHandler},Greta.BO.BusinessLogic.Service.IFamilyService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyCreateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyCreateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyCreateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyDeleteCommand">
            <summary>
            Delete entity by entity id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyDeleteCommand.#ctor(System.Int64)">
            <summary>
            Delete entity by entity id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyDeleteCommand.Id">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyDeleteCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyDeleteHandler">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyDeleteHandler.Validator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyDeleteHandler.Validator.#ctor(Greta.BO.BusinessLogic.Service.IFamilyService)">
            <summary>
            
            </summary>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyDeleteHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyDeleteHandler},Greta.BO.BusinessLogic.Service.IFamilyService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyDeleteHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyDeleteCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyDeleteResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyDeleteProductCommand">
            <summary>
            Delete entity by entity id and product Id
            </summary>
            <param name="Id"></param>
            <param name="ProductId"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyDeleteProductCommand.#ctor(System.Int64,System.Int64)">
            <summary>
            Delete entity by entity id and product Id
            </summary>
            <param name="Id"></param>
            <param name="ProductId"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyDeleteProductCommand.Id">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyDeleteProductCommand.ProductId">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyDeleteProductCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyDeleteProductHandler">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyDeleteProductHandler.FamilyDeleteProductValidator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyDeleteProductHandler.FamilyDeleteProductValidator.#ctor(Greta.BO.BusinessLogic.Service.IFamilyService)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyDeleteProductHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyDeleteProductHandler},Greta.BO.BusinessLogic.Service.IFamilyService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyDeleteProductHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyDeleteProductCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyDeleteProductResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyDeleteRangeCommand">
            <summary>
            Delete entities by entity ids
            </summary>
            <param name="Ids"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyDeleteRangeCommand.#ctor(System.Collections.Generic.List{System.Int64})">
            <summary>
            Delete entities by entity ids
            </summary>
            <param name="Ids"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyDeleteRangeCommand.Ids">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyDeleteRangeCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyDeleteRangeHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyDeleteRangeHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyDeleteRangeHandler},Greta.BO.BusinessLogic.Service.IFamilyService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyDeleteRangeHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyDeleteRangeCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyDeleteRangeResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyDeleteRangeProductsCommand">
            <summary>
            Delete entities by entity ids
            </summary>
            <param name="Id"></param>
            <param name="ProductIds"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyDeleteRangeProductsCommand.#ctor(System.Int64,System.Collections.Generic.List{System.Int64})">
            <summary>
            Delete entities by entity ids
            </summary>
            <param name="Id"></param>
            <param name="ProductIds"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyDeleteRangeProductsCommand.Id">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyDeleteRangeProductsCommand.ProductIds">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyDeleteRangeProductsCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyDeleteRangeProductsHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyDeleteRangeProductsHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyDeleteRangeProductsHandler},Greta.BO.BusinessLogic.Service.IFamilyService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyDeleteRangeProductsHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyDeleteRangeProductsCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyDeleteRangeProductsResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyUpdateCommand">
            <summary>
            Command for update family
            </summary>
            <param name="Id"></param>
            <param name="Entity"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyUpdateCommand.#ctor(System.Int64,Greta.BO.BusinessLogic.Models.Dto.FamilyModel)">
            <summary>
            Command for update family
            </summary>
            <param name="Id"></param>
            <param name="Entity"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyUpdateCommand.Id">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyUpdateCommand.Entity">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyUpdateCommand.Requirements">
            <summary>
            
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyUpdateValidator">
            <summary>
            <inheritdoc cref="T:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyUpdateValidator"/>
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyUpdateValidator.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyUpdateHandler">
            <summary>
            <inheritdoc cref="T:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyUpdateHandler"/>
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyUpdateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyUpdateHandler},Greta.BO.BusinessLogic.Service.IFamilyService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyUpdateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyUpdateCommand,System.Threading.CancellationToken)">
            <summary>
            <inheritdoc cref="T:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyUpdateResponse"/>
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyUpdateResponse">
            <summary>
            <inheritdoc cref="T:Greta.BO.BusinessLogic.Handlers.Command.Family.FamilyUpdateResponse"/>
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Fee.FeeChangeStateCommand">
            <summary>
            Command for change state of Fee
            </summary>
            <param name="Id"></param>
            <param name="State"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Fee.FeeChangeStateCommand.#ctor(System.Int64,System.Boolean)">
            <summary>
            Command for change state of Fee
            </summary>
            <param name="Id"></param>
            <param name="State"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Fee.FeeChangeStateCommand.Id">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Fee.FeeChangeStateCommand.State">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Fee.FeeChangeStateCommand.Requirements">
            <summary>
            
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Fee.FeeChangeStateHandler">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Fee.FeeChangeStateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Fee.FeeChangeStateHandler},Greta.BO.BusinessLogic.Service.IFeeService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Fee.FeeChangeStateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Fee.FeeChangeStateCommand,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Fee.FeeChangeStateResponse">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Fee.FeeCreateCommand">
            <summary>
            Command for create new Fee
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Fee.FeeCreateCommand.#ctor(Greta.BO.BusinessLogic.Models.Dto.FeeModel)">
            <summary>
            Command for create new Fee
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Fee.FeeCreateCommand.Entity">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Fee.FeeCreateCommand.Requirements">
            <summary>
            
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Fee.FeeCreateValidator">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Fee.FeeCreateValidator.#ctor(Greta.BO.BusinessLogic.Service.IFeeService)">
            <summary>
            
            </summary>
            <param name="service"></param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Fee.FeeCreateHandler">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Fee.FeeCreateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Fee.FeeCreateHandler},Greta.BO.BusinessLogic.Service.IFeeService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Fee.FeeCreateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Fee.FeeCreateCommand,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Fee.FeeCreateResponse">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Fee.FeeDeleteCommand">
            <summary>
            Command for delete Fee
            </summary>
            <param name="Id"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Fee.FeeDeleteCommand.#ctor(System.Int64)">
            <summary>
            Command for delete Fee
            </summary>
            <param name="Id"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Fee.FeeDeleteCommand.Id">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Fee.FeeDeleteCommand.Requirements">
            <summary>
            
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Fee.FeeDeleteHandler">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Fee.FeeDeleteHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Fee.FeeDeleteHandler},Greta.BO.BusinessLogic.Service.IFeeService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Fee.FeeDeleteHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Fee.FeeDeleteCommand,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Fee.FeeDeleteResponse">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Fee.FeeDeleteRangeCommand">
            <summary>
            Command for delete a range of Fees by ids
            </summary>
            <param name="Ids"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Fee.FeeDeleteRangeCommand.#ctor(System.Collections.Generic.List{System.Int64})">
            <summary>
            Command for delete a range of Fees by ids
            </summary>
            <param name="Ids"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Fee.FeeDeleteRangeCommand.Ids">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Fee.FeeDeleteRangeCommand.Requirements">
            <summary>
            
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Fee.FeeDeleteRangeHandler">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Fee.FeeDeleteRangeHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Fee.FeeDeleteRangeHandler},Greta.BO.BusinessLogic.Service.IFeeService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Fee.FeeDeleteRangeHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Fee.FeeDeleteRangeCommand,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Fee.FeeDeleteRangeResponse">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Fee.FeeUpdateCommand">
            <summary>
            Command for update a Fee
            </summary>
            <param name="Id"></param>
            <param name="Entity"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Fee.FeeUpdateCommand.#ctor(System.Int64,Greta.BO.BusinessLogic.Models.Dto.FeeModel)">
            <summary>
            Command for update a Fee
            </summary>
            <param name="Id"></param>
            <param name="Entity"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Fee.FeeUpdateCommand.Id">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Fee.FeeUpdateCommand.Entity">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Fee.FeeUpdateCommand.Requirements">
            <summary>
            
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Fee.FeeUpdateValidator">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Fee.FeeUpdateValidator.#ctor(Greta.BO.BusinessLogic.Service.IFeeService)">
            <summary>
            
            </summary>
            <param name="service"></param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Fee.FeeUpdateHandler">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Fee.FeeUpdateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Fee.FeeUpdateHandler},Greta.BO.BusinessLogic.Service.IFeeService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Fee.FeeUpdateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Fee.FeeUpdateCommand,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Fee.FeeUpdateResponse">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.GiftCardCommands.GiftCardCreateCommand">
            <summary>
            
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.GiftCardCommands.GiftCardCreateCommand.#ctor(Greta.BO.BusinessLogic.Models.Dto.GiftCardModel)">
            <summary>
            
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.GiftCardCommands.GiftCardCreateCommand.Entity">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.GiftCardCommands.GiftCardCreateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.GiftCardCommands.GiftCardCreateValidator">
            <summary>
              Response after creating a new GiftCard
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.GiftCardCommands.GiftCardCreateValidator.#ctor(Greta.BO.BusinessLogic.Service.IGiftCardService)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.GiftCardCommands.GiftCardCreateHandler">
            <summary>
               Handler for creating a new GiftCard
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.GiftCardCommands.GiftCardCreateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.GiftCardCommands.GiftCardCreateHandler},Greta.BO.BusinessLogic.Service.IGiftCardService,Greta.Sdk.EFCore.Middleware.IAuthenticateUser{System.String},Greta.BO.BusinessLogic.Service.IBOUserService,AutoMapper.IMapper)">
            <summary>
               Constructor for inject services
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="auth"></param>
            <param name="users"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.GiftCardCommands.GiftCardCreateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.GiftCardCommands.GiftCardCreateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.GiftCardCommands.GiftCardCreateResponse">
            <summary>
              Response after creating a new GiftCard
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Grind.GrindChangeStateCommand">
            <summary>
            Change the state of the entity
            </summary>
            <param name="Id">Entity Id</param>
            <param name="State">State to change</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Grind.GrindChangeStateCommand.#ctor(System.Int64,System.Boolean)">
            <summary>
            Change the state of the entity
            </summary>
            <param name="Id">Entity Id</param>
            <param name="State">State to change</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Grind.GrindChangeStateCommand.Id">
            <summary>Entity Id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Grind.GrindChangeStateCommand.State">
            <summary>State to change</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Grind.GrindChangeStateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Grind.GrindChangeStateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Grind.GrindChangeStateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Grind.GrindChangeStateHandler},Greta.BO.BusinessLogic.Service.IGrindService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Grind.GrindChangeStateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Grind.GrindChangeStateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Grind.GrindChangeStateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Grind.GrindCreateCommand">
            <summary>
            Create entity
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Grind.GrindCreateCommand.#ctor(Greta.BO.BusinessLogic.Models.Dto.GrindModel)">
            <summary>
            Create entity
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Grind.GrindCreateCommand.Entity">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Grind.GrindCreateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Grind.GrindCreateValidator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Grind.GrindCreateValidator.#ctor(Greta.BO.BusinessLogic.Service.IGrindService)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Grind.GrindCreateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Grind.GrindCreateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Grind.GrindCreateHandler},Greta.BO.BusinessLogic.Service.IGrindService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Grind.GrindCreateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Grind.GrindCreateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Grind.GrindCreateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Grind.GrindDeleteCommand">
            <summary>
            Delete entity by entity id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Grind.GrindDeleteCommand.#ctor(System.Int64)">
            <summary>
            Delete entity by entity id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Grind.GrindDeleteCommand.Id">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Grind.GrindDeleteCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Grind.GrindDeleteHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Grind.GrindDeleteHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Grind.GrindDeleteHandler},Greta.BO.BusinessLogic.Service.IGrindService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Grind.GrindDeleteHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Grind.GrindDeleteCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Grind.GrindDeleteResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Grind.GrindDeleteRangeCommand">
            <summary>
            Delete entities by entity ids
            </summary>
            <param name="Ids"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Grind.GrindDeleteRangeCommand.#ctor(System.Collections.Generic.List{System.Int64})">
            <summary>
            Delete entities by entity ids
            </summary>
            <param name="Ids"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Grind.GrindDeleteRangeCommand.Ids">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Grind.GrindDeleteRangeCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Grind.GrindDeleteRangeHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Grind.GrindDeleteRangeHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Grind.GrindDeleteRangeHandler},Greta.BO.BusinessLogic.Service.IGrindService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Grind.GrindDeleteRangeHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Grind.GrindDeleteRangeCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Grind.GrindDeleteRangeResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Grind.GrindUpdateCommand">
            <summary>
            Update entity
            </summary>
            <param name="Id">Entity id</param>
            <param name="Entity">New entity</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Grind.GrindUpdateCommand.#ctor(System.Int64,Greta.BO.BusinessLogic.Models.Dto.GrindModel)">
            <summary>
            Update entity
            </summary>
            <param name="Id">Entity id</param>
            <param name="Entity">New entity</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Grind.GrindUpdateCommand.Id">
            <summary>Entity id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Grind.GrindUpdateCommand.Entity">
            <summary>New entity</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Grind.GrindUpdateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Grind.GrindUpdateValidator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Grind.GrindUpdateValidator.#ctor(Greta.BO.BusinessLogic.Service.IGrindService)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Grind.GrindUpdateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Grind.GrindUpdateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Grind.GrindUpdateHandler},Greta.BO.BusinessLogic.Service.IGrindService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Grind.GrindUpdateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Grind.GrindUpdateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Grind.GrindUpdateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Inventory.InventoryCreateSuggestedOrderCommand">
            <summary>
            Create suggested order
            </summary>
            <param name="StoreId"></param>
            <param name="VendorId"></param>
            <param name="Filter"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Inventory.InventoryCreateSuggestedOrderCommand.#ctor(System.Int64,System.Int64,Greta.BO.BusinessLogic.Models.Dto.Search.InventorySearchModel)">
            <summary>
            Create suggested order
            </summary>
            <param name="StoreId"></param>
            <param name="VendorId"></param>
            <param name="Filter"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Inventory.InventoryCreateSuggestedOrderCommand.StoreId">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Inventory.InventoryCreateSuggestedOrderCommand.VendorId">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Inventory.InventoryCreateSuggestedOrderCommand.Filter">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Inventory.InventoryCreateSuggestedOrderCommand.Requirements">
            <summary>
            
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Inventory.InventoryCreateSuggestedOrderResponse">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Inventory.InventoryCreateSuggestedOrderHandler">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Inventory.InventoryCreateSuggestedOrderHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Inventory.InventoryCreateSuggestedOrderHandler},Greta.BO.BusinessLogic.Service.IStoreProductService,Greta.BO.BusinessLogic.Service.IVendorOrderService,Greta.BO.BusinessLogic.Service.IBOUserService,Greta.Sdk.EFCore.Middleware.IAuthenticateUser{System.String})">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="storeProductService"></param>
            <param name="vendorOrderService"></param>
            <param name="userService"></param>
            <param name="auth"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Inventory.InventoryCreateSuggestedOrderHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Inventory.InventoryCreateSuggestedOrderCommand,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Inventory.InventoryFiscalPreProcessCommand">
            <summary>
            Command for fiscal pre process
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Inventory.InventoryFiscalPreProcessCommand.#ctor(Greta.BO.BusinessLogic.Models.Dto.InventoryFiscalModel)">
            <summary>
            Command for fiscal pre process
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Inventory.InventoryFiscalPreProcessCommand.Entity">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Inventory.InventoryFiscalPreProcessCommand.Requirements">
            <summary>
            
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Inventory.InventoryFiscalPreProcessHandler">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Inventory.InventoryFiscalPreProcessHandler.#ctor(Greta.BO.BusinessLogic.Service.IStoreProductService)">
            <summary>
            
            </summary>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Inventory.InventoryFiscalPreProcessHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Inventory.InventoryFiscalPreProcessCommand,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Inventory.InventoryFiscalPreProcessResponse">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Inventory.InventoryFiscalProcessCommand">
            <summary>
            Command for create fiscal process
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Inventory.InventoryFiscalProcessCommand.#ctor(Greta.BO.BusinessLogic.Models.Dto.InventoryFiscalModel)">
            <summary>
            Command for create fiscal process
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Inventory.InventoryFiscalProcessCommand.Entity">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Inventory.InventoryFiscalProcessCommand.Requirements">
            <summary>
            
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Inventory.InventoryFiscalProcessHandler">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Inventory.InventoryFiscalProcessHandler.#ctor(Greta.BO.BusinessLogic.Service.IStoreProductService)">
            <summary>
            
            </summary>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Inventory.InventoryFiscalProcessHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Inventory.InventoryFiscalProcessCommand,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Inventory.InventoryFiscalProcessResponse">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Inventory.InventoryUpdateCommand">
            <summary>
            Command for update inventory
            </summary>
            <param name="Update"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Inventory.InventoryUpdateCommand.#ctor(Greta.BO.BusinessLogic.Models.Dto.InventoryUpdateModel)">
            <summary>
            Command for update inventory
            </summary>
            <param name="Update"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Inventory.InventoryUpdateCommand.Update">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Inventory.InventoryUpdateCommand.Requirements">
            <summary>
            
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Inventory.InventoryUpdateValidator">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Inventory.InventoryUpdateValidator.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Inventory.InventoryUpdateHandler">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Inventory.InventoryUpdateHandler.#ctor(Greta.BO.BusinessLogic.Service.IStoreProductService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Inventory.InventoryUpdateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Inventory.InventoryUpdateCommand,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Inventory.InventoryUpdateResponse">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.LoyaltyDiscount.LoyaltyDiscountChangeStateCommand">
            <summary>
            Query for change state of LoyaltyDiscount
            </summary>
            <param name="Id"></param>
            <param name="State"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.LoyaltyDiscount.LoyaltyDiscountChangeStateCommand.#ctor(System.Int64,System.Boolean)">
            <summary>
            Query for change state of LoyaltyDiscount
            </summary>
            <param name="Id"></param>
            <param name="State"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.LoyaltyDiscount.LoyaltyDiscountChangeStateCommand.Id">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.LoyaltyDiscount.LoyaltyDiscountChangeStateCommand.State">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.LoyaltyDiscount.LoyaltyDiscountChangeStateCommand.Requirements">
            <summary>
            
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.LoyaltyDiscount.LoyaltyDiscountChangeStateHandler">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.LoyaltyDiscount.LoyaltyDiscountChangeStateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.LoyaltyDiscount.LoyaltyDiscountChangeStateHandler},Greta.BO.BusinessLogic.Service.ILoyaltyDiscountService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.LoyaltyDiscount.LoyaltyDiscountChangeStateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.LoyaltyDiscount.LoyaltyDiscountChangeStateCommand,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.LoyaltyDiscount.LoyaltyDiscountChangeStateResponse">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.LoyaltyDiscount.LoyaltyDiscountCreateCommand">
            <summary>
            Query for create new LoyaltyDiscount
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.LoyaltyDiscount.LoyaltyDiscountCreateCommand.#ctor(Greta.BO.BusinessLogic.Models.Dto.LoyaltyDiscountDto.LoyaltyDiscountCreateModel)">
            <summary>
            Query for create new LoyaltyDiscount
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.LoyaltyDiscount.LoyaltyDiscountCreateCommand.Entity">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.LoyaltyDiscount.LoyaltyDiscountCreateCommand.Requirements">
            <summary>
            
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.LoyaltyDiscount.LoyaltyDiscountCreateValidator">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.LoyaltyDiscount.LoyaltyDiscountCreateValidator.#ctor(Greta.BO.BusinessLogic.Service.ILoyaltyDiscountService)">
            <summary>
            
            </summary>
            <param name="service"></param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.LoyaltyDiscount.LoyaltyDiscountCreateHandler">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.LoyaltyDiscount.LoyaltyDiscountCreateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.LoyaltyDiscount.LoyaltyDiscountCreateHandler},Greta.BO.BusinessLogic.Service.ILoyaltyDiscountService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.LoyaltyDiscount.LoyaltyDiscountCreateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.LoyaltyDiscount.LoyaltyDiscountCreateCommand,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.LoyaltyDiscount.LoyaltyDiscountCreateResponse">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.LoyaltyDiscount.LoyaltyDiscountDeleteCommand">
            <summary>
            Query for delete a LoyaltyDiscount
            </summary>
            <param name="Id"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.LoyaltyDiscount.LoyaltyDiscountDeleteCommand.#ctor(System.Int64)">
            <summary>
            Query for delete a LoyaltyDiscount
            </summary>
            <param name="Id"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.LoyaltyDiscount.LoyaltyDiscountDeleteCommand.Id">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.LoyaltyDiscount.LoyaltyDiscountDeleteCommand.Requirements">
            <summary>
            
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.LoyaltyDiscount.LoyaltyDiscountDeleteHandler">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.LoyaltyDiscount.LoyaltyDiscountDeleteHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.LoyaltyDiscount.LoyaltyDiscountDeleteHandler},Greta.BO.BusinessLogic.Service.ILoyaltyDiscountService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.LoyaltyDiscount.LoyaltyDiscountDeleteHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.LoyaltyDiscount.LoyaltyDiscountDeleteCommand,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.LoyaltyDiscount.LoyaltyDiscountDeleteResponse">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.LoyaltyDiscount.LoyaltyDiscountDeleteRangeCommand">
            <summary>
            Query for delete range of LoyaltyDiscount
            </summary>
            <param name="Ids"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.LoyaltyDiscount.LoyaltyDiscountDeleteRangeCommand.#ctor(System.Collections.Generic.List{System.Int64})">
            <summary>
            Query for delete range of LoyaltyDiscount
            </summary>
            <param name="Ids"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.LoyaltyDiscount.LoyaltyDiscountDeleteRangeCommand.Ids">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.LoyaltyDiscount.LoyaltyDiscountDeleteRangeCommand.Requirements">
            <summary>
            
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.LoyaltyDiscount.LoyaltyDiscountDeleteRangeHandler">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.LoyaltyDiscount.LoyaltyDiscountDeleteRangeHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.LoyaltyDiscount.LoyaltyDiscountDeleteRangeHandler},Greta.BO.BusinessLogic.Service.ILoyaltyDiscountService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.LoyaltyDiscount.LoyaltyDiscountDeleteRangeHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.LoyaltyDiscount.LoyaltyDiscountDeleteRangeCommand,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.LoyaltyDiscount.LoyaltyDiscountDeleteRangeResponse">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.LoyaltyDiscount.LoyaltyDiscountUpdateCommand">
            <summary>
            Query for update a LoyaltyDiscount
            </summary>
            <param name="Id"></param>
            <param name="Entity"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.LoyaltyDiscount.LoyaltyDiscountUpdateCommand.#ctor(System.Int64,Greta.BO.BusinessLogic.Models.Dto.LoyaltyDiscountDto.LoyaltyDiscountUpdateModel)">
            <summary>
            Query for update a LoyaltyDiscount
            </summary>
            <param name="Id"></param>
            <param name="Entity"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.LoyaltyDiscount.LoyaltyDiscountUpdateCommand.Id">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.LoyaltyDiscount.LoyaltyDiscountUpdateCommand.Entity">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.LoyaltyDiscount.LoyaltyDiscountUpdateCommand.Requirements">
            <summary>
            
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.LoyaltyDiscount.LoyaltyDiscountUpdateValidator">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.LoyaltyDiscount.LoyaltyDiscountUpdateValidator.#ctor(Greta.BO.BusinessLogic.Service.ILoyaltyDiscountService)">
            <summary>
            
            </summary>
            <param name="service"></param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.LoyaltyDiscount.LoyaltyDiscountUpdateHandler">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.LoyaltyDiscount.LoyaltyDiscountUpdateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.LoyaltyDiscount.LoyaltyDiscountUpdateHandler},Greta.BO.BusinessLogic.Service.ILoyaltyDiscountService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.LoyaltyDiscount.LoyaltyDiscountUpdateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.LoyaltyDiscount.LoyaltyDiscountUpdateCommand,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.LoyaltyDiscount.LoyaltyDiscountUpdateResponse">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.MixAndMatch.MixAndMatchChangeStateCommand">
            <summary>
            Command for change state to MixAndMatch entity
            </summary>
            <param name="Id"></param>
            <param name="State"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.MixAndMatch.MixAndMatchChangeStateCommand.#ctor(System.Int64,System.Boolean)">
            <summary>
            Command for change state to MixAndMatch entity
            </summary>
            <param name="Id"></param>
            <param name="State"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.MixAndMatch.MixAndMatchChangeStateCommand.Id">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.MixAndMatch.MixAndMatchChangeStateCommand.State">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.MixAndMatch.MixAndMatchChangeStateCommand.Requirements">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.MixAndMatch.MixAndMatchChangeStateHandler">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.MixAndMatch.MixAndMatchChangeStateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.MixAndMatch.MixAndMatchChangeStateHandler},Greta.BO.BusinessLogic.Service.IMixAndMatchService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.MixAndMatch.MixAndMatchChangeStateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.MixAndMatch.MixAndMatchChangeStateCommand,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.MixAndMatch.MixAndMatchChangeStateResponse">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.MixAndMatch.MixAndMatchCreateCommand">
            <summary>
            Command to create MixAndMatch Entity
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.MixAndMatch.MixAndMatchCreateCommand.#ctor(Greta.BO.BusinessLogic.Models.Dto.MixAndMatchDto.MixAndMatchModel)">
            <summary>
            Command to create MixAndMatch Entity
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.MixAndMatch.MixAndMatchCreateCommand.Entity">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.MixAndMatch.MixAndMatchCreateCommand.Requirements">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.MixAndMatch.Validator">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.MixAndMatch.Validator.#ctor(Greta.BO.BusinessLogic.Service.IMixAndMatchService)">
            <summary>
            
            </summary>
            <param name="service"></param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.MixAndMatch.MixAndMatchCreateHandler">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.MixAndMatch.MixAndMatchCreateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.MixAndMatch.MixAndMatchCreateHandler},Greta.BO.BusinessLogic.Service.IMixAndMatchService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.MixAndMatch.MixAndMatchCreateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.MixAndMatch.MixAndMatchCreateCommand,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.MixAndMatch.MixAndMatchCreateResponse">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.MixAndMatch.MixAndMatchDeleteCommand">
            <summary>
            Command for delete MixAndMatch entity
            </summary>
            <param name="Id"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.MixAndMatch.MixAndMatchDeleteCommand.#ctor(System.Int64)">
            <summary>
            Command for delete MixAndMatch entity
            </summary>
            <param name="Id"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.MixAndMatch.MixAndMatchDeleteCommand.Id">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.MixAndMatch.MixAndMatchDeleteCommand.Requirements">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.MixAndMatch.MixAndMatchDeleteHandler">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.MixAndMatch.MixAndMatchDeleteHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.MixAndMatch.MixAndMatchDeleteHandler},Greta.BO.BusinessLogic.Service.IMixAndMatchService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>   
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.MixAndMatch.MixAndMatchDeleteHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.MixAndMatch.MixAndMatchDeleteCommand,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.MixAndMatch.MixAndMatchDeleteResponse">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.MixAndMatch.MixAndMatchDeleteRangeCommand">
            <summary>
            Command for delete range of MixAndMatch entities
            </summary>
            <param name="Ids">List of long ids</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.MixAndMatch.MixAndMatchDeleteRangeCommand.#ctor(System.Collections.Generic.List{System.Int64})">
            <summary>
            Command for delete range of MixAndMatch entities
            </summary>
            <param name="Ids">List of long ids</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.MixAndMatch.MixAndMatchDeleteRangeCommand.Ids">
            <summary>List of long ids</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.MixAndMatch.MixAndMatchDeleteRangeCommand.Requirements">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.MixAndMatch.MixAndMatchDeleteRangeHandler">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.MixAndMatch.MixAndMatchDeleteRangeHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.MixAndMatch.MixAndMatchDeleteRangeHandler},Greta.BO.BusinessLogic.Service.IMixAndMatchService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.MixAndMatch.MixAndMatchDeleteRangeHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.MixAndMatch.MixAndMatchDeleteRangeCommand,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.MixAndMatch.MixAndMatchDeleteRangeResponse">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.MixAndMatch.MixAndMatchUpdateCommand">
            <summary>
            Command for update MixAndMatch Entity
            </summary>
            <param name="Id"></param>
            <param name="Entity"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.MixAndMatch.MixAndMatchUpdateCommand.#ctor(System.Int64,Greta.BO.BusinessLogic.Models.Dto.MixAndMatchDto.MixAndMatchModel)">
            <summary>
            Command for update MixAndMatch Entity
            </summary>
            <param name="Id"></param>
            <param name="Entity"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.MixAndMatch.MixAndMatchUpdateCommand.Id">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.MixAndMatch.MixAndMatchUpdateCommand.Entity">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.MixAndMatch.MixAndMatchUpdateCommand.Requirements">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.MixAndMatch.MixAndMatchUpdateValidator">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.MixAndMatch.MixAndMatchUpdateValidator.#ctor(Greta.BO.BusinessLogic.Service.IMixAndMatchService)">
            <summary>
            
            </summary>
            <param name="service"></param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.MixAndMatch.MixAndMatchUpdateHandler">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.MixAndMatch.MixAndMatchUpdateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.MixAndMatch.MixAndMatchUpdateHandler},Greta.BO.BusinessLogic.Service.IMixAndMatchService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.MixAndMatch.MixAndMatchUpdateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.MixAndMatch.MixAndMatchUpdateCommand,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.MixAndMatch.MixAndMatchUpdateResponse">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreAssociateCommand">
            <summary>
            Change the state of the entity
            </summary>
            <param name="Id">Entity Id</param>
            <param name="Token">Token</param>
            <param name="IsImport">IsImport</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreAssociateCommand.#ctor(System.Int64,System.String,System.Boolean)">
            <summary>
            Change the state of the entity
            </summary>
            <param name="Id">Entity Id</param>
            <param name="Token">Token</param>
            <param name="IsImport">IsImport</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreAssociateCommand.Id">
            <summary>Entity Id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreAssociateCommand.Token">
            <summary>Token</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreAssociateCommand.IsImport">
            <summary>IsImport</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreAssociateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreAssociateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreAssociateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreAssociateHandler},Greta.BO.BusinessLogic.Service.IOnlineStoreService,MediatR.IMediator)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mediator"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreAssociateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreAssociateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreAssociateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreChangeStateCommand">
            <summary>
            Change the state of the entity
            </summary>
            <param name="Id">Entity Id</param>
            <param name="State">State to change</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreChangeStateCommand.#ctor(System.Int64,System.Boolean)">
            <summary>
            Change the state of the entity
            </summary>
            <param name="Id">Entity Id</param>
            <param name="State">State to change</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreChangeStateCommand.Id">
            <summary>Entity Id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreChangeStateCommand.State">
            <summary>State to change</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreChangeStateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreChangeStateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreChangeStateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreChangeStateHandler},Greta.BO.BusinessLogic.Service.IOnlineStoreService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreChangeStateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreChangeStateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreChangeStateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreCreateCommand">
            <summary>
            Create entity
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreCreateCommand.#ctor(Greta.BO.BusinessLogic.Models.Dto.OnlineStoreModel)">
            <summary>
            Create entity
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreCreateCommand.Entity">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreCreateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreCreateValidator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreCreateValidator.#ctor(Greta.BO.BusinessLogic.Service.IOnlineStoreService)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreCreateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreCreateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreCreateHandler},Greta.BO.BusinessLogic.Service.IOnlineStoreService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreCreateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreCreateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreCreateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreDeleteCommand">
            <summary>
            Delete entity by entity id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreDeleteCommand.#ctor(System.Int64)">
            <summary>
            Delete entity by entity id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreDeleteCommand.Id">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreDeleteCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreDeleteHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreDeleteHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreDeleteHandler},Greta.BO.BusinessLogic.Service.IOnlineStoreService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreDeleteHandler.Validator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreDeleteHandler.Validator.#ctor(Greta.BO.BusinessLogic.Service.IOnlineStoreService)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreDeleteHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreDeleteCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreDeleteResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreDeleteRangeCommand">
            <summary>
            Delete entities by entity ids
            </summary>
            <param name="Ids"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreDeleteRangeCommand.#ctor(System.Collections.Generic.List{System.Int64})">
            <summary>
            Delete entities by entity ids
            </summary>
            <param name="Ids"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreDeleteRangeCommand.Ids">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreDeleteRangeCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreDeleteRangeHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreDeleteRangeHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreDeleteRangeHandler},Greta.BO.BusinessLogic.Service.IOnlineStoreService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreDeleteRangeHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreDeleteRangeCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreDeleteRangeResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreDisassociateCommand">
            <summary>
            Change the state of the entity
            </summary>
            <param name="Ids">Entity Ids</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreDisassociateCommand.#ctor(System.Collections.Generic.List{System.Int64})">
            <summary>
            Change the state of the entity
            </summary>
            <param name="Ids">Entity Ids</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreDisassociateCommand.Ids">
            <summary>Entity Ids</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreDisassociateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreDisassociateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreDisassociateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreDisassociateHandler},Greta.BO.BusinessLogic.Service.IOnlineStoreService,MediatR.IMediator)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mediator"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreDisassociateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreDisassociateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreDisassociateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreUpdateCommand">
            <summary>
            Update entity
            </summary>
            <param name="Id">Entity id</param>
            <param name="Entity">New entity</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreUpdateCommand.#ctor(System.Int64,Greta.BO.BusinessLogic.Models.Dto.OnlineStoreModel)">
            <summary>
            Update entity
            </summary>
            <param name="Id">Entity id</param>
            <param name="Entity">New entity</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreUpdateCommand.Id">
            <summary>Entity id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreUpdateCommand.Entity">
            <summary>New entity</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreUpdateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreUpdateValidator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreUpdateValidator.#ctor(Greta.BO.BusinessLogic.Service.IOnlineStoreService)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreUpdateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreUpdateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreUpdateHandler},Greta.BO.BusinessLogic.Service.IOnlineStoreService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreUpdateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreUpdateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.OnlineStoreUpdateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.SendDataToOnlineStoreCommand">
            <summary>
            Send data to one online store 
            </summary>
            <param name="OnlineStore"></param>
            <param name="Type"></param>
            <param name="Partial"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.SendDataToOnlineStoreCommand.#ctor(System.Int64,Greta.Sdk.ExternalScale.Enums.ExternalScaleOperationType,System.Boolean)">
            <summary>
            Send data to one online store 
            </summary>
            <param name="OnlineStore"></param>
            <param name="Type"></param>
            <param name="Partial"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.SendDataToOnlineStoreCommand.OnlineStore">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.SendDataToOnlineStoreCommand.Type">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.SendDataToOnlineStoreCommand.Partial">
            <summary></summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.SendDataToOnlineStoreHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.SendDataToOnlineStoreHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.SendDataToOnlineStoreHandler},Greta.BO.BusinessLogic.Service.IExternalJobService,Greta.BO.BusinessLogic.Service.IOnlineStoreService,Greta.BO.BusinessLogic.Service.IDepartmentService,Greta.Sdk.FileStorage.Interfaces.IStorageProvider,Microsoft.Extensions.Options.IOptions{Greta.Sdk.FileStorage.Options.StorageOption})">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.SendDataToOnlineStoreHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.SendDataToOnlineStoreCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.SendDataToOnlineStoreHandler.GetDepartmentData(Greta.BO.Api.Entities.OnlineStore,System.Nullable{System.DateTime})">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.OnlineStore.Response">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailDeleteRangeCommand">
            <summary>
            Delete entities by entity ids
            </summary>
            <param name="Ids"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailDeleteRangeCommand.#ctor(System.Collections.Generic.List{System.Int64})">
            <summary>
            Delete entities by entity ids
            </summary>
            <param name="Ids"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailDeleteRangeCommand.Ids">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailDeleteRangeCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailDeleteRangeHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailDeleteRangeHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailDeleteRangeHandler},Greta.BO.BusinessLogic.Service.IPriceBatchDetailService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailDeleteRangeHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailDeleteRangeCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailDeleteRangeResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailChangeStateCommand">
            <summary>
            Change the state of the entity
            </summary>
            <param name="Id">Entity Id</param>
            <param name="State">State to change</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailChangeStateCommand.#ctor(System.Int64,System.Boolean)">
            <summary>
            Change the state of the entity
            </summary>
            <param name="Id">Entity Id</param>
            <param name="State">State to change</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailChangeStateCommand.Id">
            <summary>Entity Id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailChangeStateCommand.State">
            <summary>State to change</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailChangeStateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailChangeStateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailChangeStateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailChangeStateHandler},Greta.BO.BusinessLogic.Service.IPriceBatchDetailService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailChangeStateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailChangeStateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailChangeStateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailCreateCommand">
            <summary>
            Create entity
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailCreateCommand.#ctor(Greta.BO.BusinessLogic.Models.Dto.PriceBatchDetailModel)">
            <summary>
            Create entity
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailCreateCommand.Entity">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailCreateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailCreateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailCreateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailCreateHandler},Greta.BO.BusinessLogic.Service.IPriceBatchDetailService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailCreateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailCreateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailCreateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailDeleteCommand">
            <summary>
            Delete entity by entity id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailDeleteCommand.#ctor(System.Int64)">
            <summary>
            Delete entity by entity id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailDeleteCommand.Id">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailDeleteCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailDeleteHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailDeleteHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailDeleteHandler},Greta.BO.BusinessLogic.Service.IPriceBatchDetailService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailDeleteHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailDeleteCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailDeleteResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailFileImportCommand">
            <summary>
            Create entity
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailFileImportCommand.#ctor(Greta.BO.BusinessLogic.Models.Dto.PriceBatchDetailModel)">
            <summary>
            Create entity
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailFileImportCommand.Entity">
            <summary></summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailFileImportHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailFileImportHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailFileImportHandler},Greta.BO.BusinessLogic.Service.IPriceBatchDetailService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailFileImportHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailFileImportCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailFileImportResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailUpdateCommand">
            <summary>
            Command for Update PriceBatcDetail
            </summary>
            <param name="Id"></param>
            <param name="Entity"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailUpdateCommand.#ctor(System.Int64,Greta.BO.BusinessLogic.Models.Dto.PriceBatchDetailModel)">
            <summary>
            Command for Update PriceBatcDetail
            </summary>
            <param name="Id"></param>
            <param name="Entity"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailUpdateCommand.Id">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailUpdateCommand.Entity">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailUpdateCommand.Requirements">
            <summary>
            
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailUpdateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailUpdateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailUpdateHandler},Greta.BO.BusinessLogic.Service.IPriceBatchDetailService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailUpdateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailUpdateCommand,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.PriceBatchDetail.PriceBatchDetailUpdateResponse">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Products.RapidProductCreateCommand">
            <summary>
            Command for create a rapid product
            </summary>
            <param name="Product"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Products.RapidProductCreateCommand.#ctor(Greta.BO.BusinessLogic.Models.Dto.RapidProductModel)">
            <summary>
            Command for create a rapid product
            </summary>
            <param name="Product"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Products.RapidProductCreateCommand.Product">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Products.RapidProductCreateCommand.Requirements">
            <summary>
            
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Products.RapidProductCreateValidator">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Products.RapidProductCreateValidator.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Products.RapidProductCreateValidator.UpcConditionalLength(Greta.BO.BusinessLogic.Handlers.Command.Products.RapidProductCreateCommand,System.String)">
            <summary>
            
            </summary>
            <param name="command"></param>
            <param name="upc"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Products.RapidProductCreateHandler">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Products.RapidProductCreateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Products.RapidProductCreateHandler},AutoMapper.IMapper,MediatR.IMediator,Greta.BO.BusinessLogic.Service.IProductService,Greta.BO.BusinessLogic.Service.ICategoryService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="mapper"></param>
            <param name="mediator"></param>
            <param name="categoryService"></param>
            <param name="productService"></param>
            <returns></returns>       
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Products.RapidProductCreateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Products.RapidProductCreateCommand,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Products.RapidProductCreateResponse">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesChangeStateCommand">
            <summary>
            
            </summary>
            <param name="Id"></param>
            <param name="State"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesChangeStateCommand.#ctor(System.Int64,System.Boolean)">
            <summary>
            
            </summary>
            <param name="Id"></param>
            <param name="State"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesChangeStateCommand.Id">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesChangeStateCommand.State">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesChangeStateCommand.Requirements">
            <summary>
            
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesChangeStateHandler">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesChangeStateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesChangeStateHandler},Greta.BO.BusinessLogic.Service.IProfilesService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesChangeStateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesChangeStateCommand,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesChangeStateResponse">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesCreateCommand">
            <summary>
            
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesCreateCommand.#ctor(Greta.BO.BusinessLogic.Models.Dto.ProfilesModel)">
            <summary>
            
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesCreateCommand.Entity">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesCreateCommand.Requirements">
            <summary>
            
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesCreateValidator">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesCreateValidator.#ctor(Greta.BO.BusinessLogic.Service.IProfilesService)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesCreateValidator.NameUnique(System.String,System.Threading.CancellationToken)">
            <summary>
            Check unique name of profiles
            </summary>
            <param name="name"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesCreateHandler">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesCreateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesCreateHandler},Greta.BO.BusinessLogic.Service.IProfilesService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesCreateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesCreateCommand,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesCreateResponse">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesDeleteCommand">
            <summary>
            
            </summary>
            <param name="Id"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesDeleteCommand.#ctor(System.Int64)">
            <summary>
            
            </summary>
            <param name="Id"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesDeleteCommand.Id">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesDeleteCommand.Requirements">
            <summary>
            
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesDeleteHandler">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesDeleteHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesDeleteHandler},Greta.BO.BusinessLogic.Service.IProfilesService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesDeleteHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesDeleteCommand,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesDeleteResponse">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesDeleteRangeCommand">
            <summary>
            </summary>
            <param name="Ids"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesDeleteRangeCommand.#ctor(System.Collections.Generic.List{System.Int64})">
            <summary>
            </summary>
            <param name="Ids"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesDeleteRangeCommand.Ids">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesDeleteRangeCommand.Requirements">
            <summary>
            
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesDeleteRangeHandler">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesDeleteRangeHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesDeleteRangeHandler},Greta.BO.BusinessLogic.Service.IProfilesService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesDeleteRangeHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesDeleteRangeCommand,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesDeleteRangeResponse">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesUpdateCommand">
            <summary>
            </summary>
            <param name="Id"></param>
            <param name="Entity"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesUpdateCommand.#ctor(System.Int64,Greta.BO.BusinessLogic.Models.Dto.ProfilesModel)">
            <summary>
            </summary>
            <param name="Id"></param>
            <param name="Entity"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesUpdateCommand.Id">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesUpdateCommand.Entity">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesUpdateCommand.Requirements">
            <summary>
            
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesUpdateValidator">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesUpdateValidator.#ctor(Greta.BO.BusinessLogic.Service.IProfilesService)">
            <summary>
            
            </summary>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesUpdateValidator.NameUnique(Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesUpdateCommand,System.String,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="command"></param>
            <param name="name"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesUpdateHandler">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesUpdateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesUpdateHandler},Greta.BO.BusinessLogic.Service.IProfilesService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesUpdateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesUpdateCommand,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Profile.ProfilesUpdateResponse">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Region.RegionChangeStateCommand">
            <summary>
            Change the state of the entity
            </summary>
            <param name="Id">Entity Id</param>
            <param name="State">State to change</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Region.RegionChangeStateCommand.#ctor(System.Int64,System.Boolean)">
            <summary>
            Change the state of the entity
            </summary>
            <param name="Id">Entity Id</param>
            <param name="State">State to change</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Region.RegionChangeStateCommand.Id">
            <summary>Entity Id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Region.RegionChangeStateCommand.State">
            <summary>State to change</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Region.RegionChangeStateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Region.RegionChangeStateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Region.RegionChangeStateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Region.RegionChangeStateHandler},Greta.BO.BusinessLogic.Service.IRegionService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Region.RegionChangeStateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Region.RegionChangeStateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Region.RegionChangeStateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Region.RegionCreateCommand">
            <summary>
            Create entity
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Region.RegionCreateCommand.#ctor(Greta.BO.BusinessLogic.Models.Dto.RegionModel)">
            <summary>
            Create entity
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Region.RegionCreateCommand.Entity">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Region.RegionCreateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Region.RegionCreateValidator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Region.RegionCreateValidator.#ctor(Greta.BO.BusinessLogic.Service.IRegionService)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Region.RegionCreateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Region.RegionCreateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Region.RegionCreateHandler},Greta.BO.BusinessLogic.Service.IRegionService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Region.RegionCreateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Region.RegionCreateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Region.RegionCreateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Region.RegionDeleteCommand">
            <summary>
            Delete entity by entity id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Region.RegionDeleteCommand.#ctor(System.Int64)">
            <summary>
            Delete entity by entity id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Region.RegionDeleteCommand.Id">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Region.RegionDeleteCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Region.RegionDeleteHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Region.RegionDeleteHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Region.RegionDeleteHandler},Greta.BO.BusinessLogic.Service.IRegionService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Region.RegionDeleteHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Region.RegionDeleteCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Region.RegionDeleteResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Region.RegionDeleteRangeCommand">
            <summary>
            Delete entities by entity ids
            </summary>
            <param name="Ids"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Region.RegionDeleteRangeCommand.#ctor(System.Collections.Generic.List{System.Int64})">
            <summary>
            Delete entities by entity ids
            </summary>
            <param name="Ids"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Region.RegionDeleteRangeCommand.Ids">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Region.RegionDeleteRangeCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Region.RegionDeleteRangeHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Region.RegionDeleteRangeHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Region.RegionDeleteRangeHandler},Greta.BO.BusinessLogic.Service.IRegionService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Region.RegionDeleteRangeHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Region.RegionDeleteRangeCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Region.RegionDeleteRangeResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Region.RegionUpdateCommand">
            <summary>
            Update entity
            </summary>
            <param name="Id">Entity id</param>
            <param name="Entity">New entity</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Region.RegionUpdateCommand.#ctor(System.Int64,Greta.BO.BusinessLogic.Models.Dto.RegionModel)">
            <summary>
            Update entity
            </summary>
            <param name="Id">Entity id</param>
            <param name="Entity">New entity</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Region.RegionUpdateCommand.Id">
            <summary>Entity id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Region.RegionUpdateCommand.Entity">
            <summary>New entity</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Region.RegionUpdateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Region.RegionUpdateValidator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Region.RegionUpdateValidator.#ctor(Greta.BO.BusinessLogic.Service.IRegionService)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Region.RegionUpdateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Region.RegionUpdateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Region.RegionUpdateHandler},Greta.BO.BusinessLogic.Service.IRegionService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Region.RegionUpdateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Region.RegionUpdateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Region.RegionUpdateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Role.RoleChangeStateCommand">
            <summary>
            Query for change state of rol
            </summary>
            <param name="Id">id of rol</param>
            <param name="State">bool state</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Role.RoleChangeStateCommand.#ctor(System.Int64,System.Boolean)">
            <summary>
            Query for change state of rol
            </summary>
            <param name="Id">id of rol</param>
            <param name="State">bool state</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Role.RoleChangeStateCommand.Id">
            <summary>id of rol</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Role.RoleChangeStateCommand.State">
            <summary>bool state</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Role.RoleChangeStateCommand.Requirements">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Role.RoleChangeStateHandler">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Role.RoleChangeStateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Role.RoleChangeStateHandler},Greta.BO.BusinessLogic.Service.IRoleService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Role.RoleChangeStateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Role.RoleChangeStateCommand,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Role.RoleChangeStateResponse">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Role.RoleCreateCommand">
            <summary>
            Query for create new rol
            </summary>
            <param name="Entity">rol entity</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Role.RoleCreateCommand.#ctor(Greta.BO.BusinessLogic.Models.Dto.RoleModel)">
            <summary>
            Query for create new rol
            </summary>
            <param name="Entity">rol entity</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Role.RoleCreateCommand.Entity">
            <summary>rol entity</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Role.RoleCreateCommand.Requirements">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Role.RoleCreateValidator">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Role.RoleCreateValidator.#ctor(Greta.BO.BusinessLogic.Service.IRoleService)">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Role.RoleCreateHandler">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Role.RoleCreateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Role.RoleCreateHandler},Greta.BO.BusinessLogic.Service.IRoleService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Role.RoleCreateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Role.RoleCreateCommand,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Role.RoleCreateResponse">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Role.RoleDeleteCommand">
            <summary>
            Query for delete rol by id
            </summary>
            <param name="Id">id of rol</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Role.RoleDeleteCommand.#ctor(System.Int64)">
            <summary>
            Query for delete rol by id
            </summary>
            <param name="Id">id of rol</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Role.RoleDeleteCommand.Id">
            <summary>id of rol</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Role.RoleDeleteCommand.Requirements">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Role.RoleDeleteHandler">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Role.RoleDeleteHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Role.RoleDeleteHandler},Greta.BO.BusinessLogic.Service.IRoleService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Role.RoleDeleteHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Role.RoleDeleteCommand,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Role.RoleDeleteResponse">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Role.RoleDeleteRangeCommand">
            <summary>
            Query for delete range of rol
            </summary>
            <param name="Ids">List of ids</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Role.RoleDeleteRangeCommand.#ctor(System.Collections.Generic.List{System.Int64})">
            <summary>
            Query for delete range of rol
            </summary>
            <param name="Ids">List of ids</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Role.RoleDeleteRangeCommand.Ids">
            <summary>List of ids</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Role.RoleDeleteRangeCommand.Requirements">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Role.RoleDeleteRangeHandler">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Role.RoleDeleteRangeHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Role.RoleDeleteRangeHandler},Greta.BO.BusinessLogic.Service.IRoleService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Role.RoleDeleteRangeHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Role.RoleDeleteRangeCommand,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Role.RoleDeleteRangeResponse">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Role.RoleUpdateCommand">
            <summary>
            Query for update rol
            </summary>
            <param name="Id">id of rol</param>
            <param name="Entity">entity rol</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Role.RoleUpdateCommand.#ctor(System.Int64,Greta.BO.BusinessLogic.Models.Dto.RoleModel)">
            <summary>
            Query for update rol
            </summary>
            <param name="Id">id of rol</param>
            <param name="Entity">entity rol</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Role.RoleUpdateCommand.Id">
            <summary>id of rol</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Role.RoleUpdateCommand.Entity">
            <summary>entity rol</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Role.RoleUpdateCommand.Requirements">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Role.RoleUpdateValidator">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Role.RoleUpdateValidator.#ctor(Greta.BO.BusinessLogic.Service.IRoleService)">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Role.RoleUpdateHandler">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Role.RoleUpdateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Role.RoleUpdateHandler},Greta.BO.BusinessLogic.Service.IRoleService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Role.RoleUpdateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Role.RoleUpdateCommand,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Role.RoleUpdateResponse">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.RoundingTable.RoundingTableUpdateCommand">
            <summary>
            Command for update RoundingTable
            </summary>
            <param name="Id"></param>
            <param name="Entity"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.RoundingTable.RoundingTableUpdateCommand.#ctor(System.Int64,Greta.BO.BusinessLogic.Models.Dto.RoundingTableModel)">
            <summary>
            Command for update RoundingTable
            </summary>
            <param name="Id"></param>
            <param name="Entity"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.RoundingTable.RoundingTableUpdateCommand.Id">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.RoundingTable.RoundingTableUpdateCommand.Entity">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.RoundingTable.RoundingTableUpdateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.RoundingTable.RoundingTableUpdateHandler">
            <summary>
            <inheritdoc cref="T:Greta.BO.BusinessLogic.Handlers.Command.RoundingTable.RoundingTableUpdateHandler"/>
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.RoundingTable.RoundingTableUpdateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.RoundingTable.RoundingTableUpdateHandler},Greta.BO.BusinessLogic.Service.IRoundingTableService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.RoundingTable.RoundingTableUpdateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.RoundingTable.RoundingTableUpdateCommand,System.Threading.CancellationToken)">
            <summary>
            <inheritdoc cref="T:Greta.BO.BusinessLogic.Handlers.Command.RoundingTable.RoundingTableUpdateResponse"/>
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.RoundingTable.RoundingTableUpdateResponse">
            <summary>
            <inheritdoc cref="T:Greta.BO.BusinessLogic.Handlers.Command.RoundingTable.RoundingTableUpdateResponse"/>
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ScaleCategory.ScaleCategoryChangeStateCommand">
            <summary>
            Change state of entity
            </summary>
            <param name="Id">Entity id</param>
            <param name="State">State to change</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ScaleCategory.ScaleCategoryChangeStateCommand.#ctor(System.Int64,System.Boolean)">
            <summary>
            Change state of entity
            </summary>
            <param name="Id">Entity id</param>
            <param name="State">State to change</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.ScaleCategory.ScaleCategoryChangeStateCommand.Id">
            <summary>Entity id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.ScaleCategory.ScaleCategoryChangeStateCommand.State">
            <summary>State to change</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.ScaleCategory.ScaleCategoryChangeStateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ScaleCategory.ScaleCategoryChangeStateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ScaleCategory.ScaleCategoryChangeStateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.ScaleCategory.ScaleCategoryChangeStateHandler},Greta.BO.BusinessLogic.Service.IScaleCategoryService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ScaleCategory.ScaleCategoryChangeStateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.ScaleCategory.ScaleCategoryChangeStateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ScaleCategory.ScaleCategoryChangeStateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ScaleCategory.ScaleCategoryCreateCommand">
            <summary>
            Create entity
            </summary>
            <param name="Entity">Entity to create</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ScaleCategory.ScaleCategoryCreateCommand.#ctor(Greta.BO.BusinessLogic.Models.Dto.ScaleCategoryModel)">
            <summary>
            Create entity
            </summary>
            <param name="Entity">Entity to create</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.ScaleCategory.ScaleCategoryCreateCommand.Entity">
            <summary>Entity to create</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.ScaleCategory.ScaleCategoryCreateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ScaleCategory.ScaleCategoryCreateValidator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ScaleCategory.ScaleCategoryCreateValidator.#ctor(Greta.BO.BusinessLogic.Service.IScaleCategoryService)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ScaleCategory.ScaleCategoryCreateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ScaleCategory.ScaleCategoryCreateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.ScaleCategory.ScaleCategoryCreateHandler},Greta.BO.BusinessLogic.Service.IScaleCategoryService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ScaleCategory.ScaleCategoryCreateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.ScaleCategory.ScaleCategoryCreateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ScaleCategory.ScaleCategoryCreateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ScaleCategory.ScaleCategoryDeleteCommand">
            <summary>
            Delete entity
            </summary>
            <param name="Id">Entity Id</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ScaleCategory.ScaleCategoryDeleteCommand.#ctor(System.Int64)">
            <summary>
            Delete entity
            </summary>
            <param name="Id">Entity Id</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.ScaleCategory.ScaleCategoryDeleteCommand.Id">
            <summary>Entity Id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.ScaleCategory.ScaleCategoryDeleteCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ScaleCategory.ScaleCategoryDeleteHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ScaleCategory.ScaleCategoryDeleteHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.ScaleCategory.ScaleCategoryDeleteHandler},Greta.BO.BusinessLogic.Service.IScaleCategoryService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ScaleCategory.ScaleCategoryDeleteHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.ScaleCategory.ScaleCategoryDeleteCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ScaleCategory.ScaleCategoryDeleteResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ScaleCategory.ScaleCategoryDeleteRangeCommand">
            <summary>
            Delete entity from list if ids
            </summary>
            <param name="Ids">List of entity ids</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ScaleCategory.ScaleCategoryDeleteRangeCommand.#ctor(System.Collections.Generic.List{System.Int64})">
            <summary>
            Delete entity from list if ids
            </summary>
            <param name="Ids">List of entity ids</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.ScaleCategory.ScaleCategoryDeleteRangeCommand.Ids">
            <summary>List of entity ids</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.ScaleCategory.ScaleCategoryDeleteRangeCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ScaleCategory.ScaleCategoryDeleteRangeHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ScaleCategory.ScaleCategoryDeleteRangeHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.ScaleCategory.ScaleCategoryDeleteRangeHandler},Greta.BO.BusinessLogic.Service.IScaleCategoryService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ScaleCategory.ScaleCategoryDeleteRangeHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.ScaleCategory.ScaleCategoryDeleteRangeCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ScaleCategory.ScaleCategoryDeleteRangeResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ScaleCategory.ScaleCategoryUpdateCommand">
            <summary>
            Update entity
            </summary>
            <param name="Id">Entity id</param>
            <param name="Entity">Entity to update</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ScaleCategory.ScaleCategoryUpdateCommand.#ctor(System.Int64,Greta.BO.BusinessLogic.Models.Dto.ScaleCategoryModel)">
            <summary>
            Update entity
            </summary>
            <param name="Id">Entity id</param>
            <param name="Entity">Entity to update</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.ScaleCategory.ScaleCategoryUpdateCommand.Id">
            <summary>Entity id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.ScaleCategory.ScaleCategoryUpdateCommand.Entity">
            <summary>Entity to update</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.ScaleCategory.ScaleCategoryUpdateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ScaleCategory.ScaleCategoryUpdateValidator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ScaleCategory.ScaleCategoryUpdateValidator.#ctor(Greta.BO.BusinessLogic.Service.IScaleCategoryService)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ScaleCategory.ScaleCategoryUpdateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ScaleCategory.ScaleCategoryUpdateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.ScaleCategory.ScaleCategoryUpdateHandler},Greta.BO.BusinessLogic.Service.IScaleCategoryService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ScaleCategory.ScaleCategoryUpdateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.ScaleCategory.ScaleCategoryUpdateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ScaleCategory.ScaleCategoryUpdateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ScaleLabelType.ScaleLabelTypeChangeStateCommand">
            <summary>
            Change the state of the entity
            </summary>
            <param name="Id">Entity Id</param>
            <param name="State">State to change</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ScaleLabelType.ScaleLabelTypeChangeStateCommand.#ctor(System.Int64,System.Boolean)">
            <summary>
            Change the state of the entity
            </summary>
            <param name="Id">Entity Id</param>
            <param name="State">State to change</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.ScaleLabelType.ScaleLabelTypeChangeStateCommand.Id">
            <summary>Entity Id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.ScaleLabelType.ScaleLabelTypeChangeStateCommand.State">
            <summary>State to change</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.ScaleLabelType.ScaleLabelTypeChangeStateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ScaleLabelType.ScaleLabelTypeHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ScaleLabelType.ScaleLabelTypeHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.ScaleLabelType.ScaleLabelTypeHandler},Greta.BO.BusinessLogic.Service.IScaleLabelTypeService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ScaleLabelType.ScaleLabelTypeHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.ScaleLabelType.ScaleLabelTypeChangeStateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ScaleLabelType.ScaleLabelTypeChangeStateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ScaleLabelType.ScaleLabelTypeCreateCommand">
            <summary>
            Create entity
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ScaleLabelType.ScaleLabelTypeCreateCommand.#ctor(Greta.BO.BusinessLogic.Models.Dto.ScaleLabelTypeModel)">
            <summary>
            Create entity
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.ScaleLabelType.ScaleLabelTypeCreateCommand.Entity">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.ScaleLabelType.ScaleLabelTypeCreateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ScaleLabelType.Validator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ScaleLabelType.Validator.#ctor(Greta.BO.BusinessLogic.Service.IScaleLabelTypeService)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ScaleLabelType.ScaleLabelTypeCreateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ScaleLabelType.ScaleLabelTypeCreateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.ScaleLabelType.ScaleLabelTypeCreateHandler},Greta.BO.BusinessLogic.Service.IScaleLabelTypeService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ScaleLabelType.ScaleLabelTypeCreateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.ScaleLabelType.ScaleLabelTypeCreateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ScaleLabelType.ScaleLabelTypeCreateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ScaleLabelType.ScaleLabelTypeDeleteCommand">
            <summary>
            Delete entity by entity id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ScaleLabelType.ScaleLabelTypeDeleteCommand.#ctor(System.Int64)">
            <summary>
            Delete entity by entity id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.ScaleLabelType.ScaleLabelTypeDeleteCommand.Id">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.ScaleLabelType.ScaleLabelTypeDeleteCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ScaleLabelType.ScaleLabelTypeDeleteHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ScaleLabelType.ScaleLabelTypeDeleteHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.ScaleLabelType.ScaleLabelTypeDeleteHandler},Greta.BO.BusinessLogic.Service.IScaleLabelTypeService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ScaleLabelType.ScaleLabelTypeDeleteHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.ScaleLabelType.ScaleLabelTypeDeleteCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ScaleLabelType.ScaleLabelTypeDeleteResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ScaleLabelType.ScaleLabelTypeDeleteRangeCommand">
            <summary>
            Delete entities by entity ids
            </summary>
            <param name="Ids"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ScaleLabelType.ScaleLabelTypeDeleteRangeCommand.#ctor(System.Collections.Generic.List{System.Int64})">
            <summary>
            Delete entities by entity ids
            </summary>
            <param name="Ids"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.ScaleLabelType.ScaleLabelTypeDeleteRangeCommand.Ids">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.ScaleLabelType.ScaleLabelTypeDeleteRangeCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ScaleLabelType.ScaleLabelTypeDeleteRangeHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ScaleLabelType.ScaleLabelTypeDeleteRangeHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.ScaleLabelType.ScaleLabelTypeDeleteRangeHandler},Greta.BO.BusinessLogic.Service.IScaleLabelTypeService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ScaleLabelType.ScaleLabelTypeDeleteRangeHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.ScaleLabelType.ScaleLabelTypeDeleteRangeCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ScaleLabelType.ScaleLabelTypeDeleteRangeResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ScaleLabelType.ScaleLabelTypeUpdateCommand">
            <summary>
            Update entity
            </summary>
            <param name="Id">Entity id</param>
            <param name="Entity">New entity</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ScaleLabelType.ScaleLabelTypeUpdateCommand.#ctor(System.Int64,Greta.BO.BusinessLogic.Models.Dto.ScaleLabelTypeModel)">
            <summary>
            Update entity
            </summary>
            <param name="Id">Entity id</param>
            <param name="Entity">New entity</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.ScaleLabelType.ScaleLabelTypeUpdateCommand.Id">
            <summary>Entity id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.ScaleLabelType.ScaleLabelTypeUpdateCommand.Entity">
            <summary>New entity</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.ScaleLabelType.ScaleLabelTypeUpdateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ScaleLabelType.ScaleLabelTypeUpdateValidator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ScaleLabelType.ScaleLabelTypeUpdateValidator.#ctor(Greta.BO.BusinessLogic.Service.IScaleLabelTypeService)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ScaleLabelType.ScaleLabelTypeUpdateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ScaleLabelType.ScaleLabelTypeUpdateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.ScaleLabelType.ScaleLabelTypeUpdateHandler},Greta.BO.BusinessLogic.Service.IScaleLabelTypeService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ScaleLabelType.ScaleLabelTypeUpdateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.ScaleLabelType.ScaleLabelTypeUpdateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ScaleLabelType.ScaleLabelTypeUpdateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Scalendar.ScalendarChangeStateCommand">
            <summary>
            Change the state of the entity
            </summary>
            <param name="Id">Entity Id</param>
            <param name="State">State to change</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Scalendar.ScalendarChangeStateCommand.#ctor(System.Int64,System.Boolean)">
            <summary>
            Change the state of the entity
            </summary>
            <param name="Id">Entity Id</param>
            <param name="State">State to change</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Scalendar.ScalendarChangeStateCommand.Id">
            <summary>Entity Id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Scalendar.ScalendarChangeStateCommand.State">
            <summary>State to change</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Scalendar.ScalendarChangeStateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Scalendar.ScalendarChangeStateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Scalendar.ScalendarChangeStateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Scalendar.ScalendarChangeStateHandler},Greta.BO.BusinessLogic.Service.IScalendarService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Scalendar.ScalendarChangeStateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Scalendar.ScalendarChangeStateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Scalendar.ScalendarChangeStateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Scalendar.ScalendarUpdateCommand">
            <summary>
            Update entity
            </summary>
            <param name="Id">Entity id</param>
            <param name="Entity">New entity</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Scalendar.ScalendarUpdateCommand.#ctor(System.Int64,Greta.BO.BusinessLogic.Models.Dto.ScalendarModel)">
            <summary>
            Update entity
            </summary>
            <param name="Id">Entity id</param>
            <param name="Entity">New entity</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Scalendar.ScalendarUpdateCommand.Id">
            <summary>Entity id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Scalendar.ScalendarUpdateCommand.Entity">
            <summary>New entity</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Scalendar.ScalendarUpdateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Scalendar.ScalendarUpdateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Scalendar.ScalendarUpdateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Scalendar.ScalendarUpdateHandler},Greta.BO.BusinessLogic.Service.IScalendarService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Scalendar.ScalendarUpdateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Scalendar.ScalendarUpdateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Scalendar.ScalendarUpdateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ShelfTag.ShelfTagAddByCategoryCommand">
            <summary>
            Add all product on the category to a shelfTag list
            </summary>
            <param name="CategoryId"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ShelfTag.ShelfTagAddByCategoryCommand.#ctor(System.Int64)">
            <summary>
            Add all product on the category to a shelfTag list
            </summary>
            <param name="CategoryId"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.ShelfTag.ShelfTagAddByCategoryCommand.CategoryId">
            <summary></summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ShelfTag.ShelfTagAddByCategoryResponse">
            <summary>
            Add all product on the category to a shelfTag list response
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ShelfTag.ShelfTagAddByCategoryHandler">
            <summary>
            Add all product on the category to a shelfTag list handler
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ShelfTag.ShelfTagAddByCategoryHandler.#ctor(Greta.BO.BusinessLogic.Service.IShelfTagService)">
            <summary>
            
            </summary>
            <param name="shelfTagService"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ShelfTag.ShelfTagAddByCategoryHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.ShelfTag.ShelfTagAddByCategoryCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ShelfTag.ShelfTagDeleteRangeCommand">
            <summary>
            Delete entities by entity ids
            </summary>
            <param name="Ids"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ShelfTag.ShelfTagDeleteRangeCommand.#ctor(System.Collections.Generic.List{System.Int64})">
            <summary>
            Delete entities by entity ids
            </summary>
            <param name="Ids"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.ShelfTag.ShelfTagDeleteRangeCommand.Ids">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.ShelfTag.ShelfTagDeleteRangeCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ShelfTag.ShelfTagDeleteRangeHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ShelfTag.ShelfTagDeleteRangeHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.ShelfTag.ShelfTagDeleteRangeHandler},Greta.BO.BusinessLogic.Service.IShelfTagService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ShelfTag.ShelfTagDeleteRangeHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.ShelfTag.ShelfTagDeleteRangeCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ShelfTag.ShelfTagDeleteRangeResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ShelfTag.ShelfTagUpdateCommand">
            <summary>
            Update entity
            </summary>
            <param name="Id">Entity id</param>
            <param name="ValueQty">Value Qty</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ShelfTag.ShelfTagUpdateCommand.#ctor(System.Int64,System.Int32)">
            <summary>
            Update entity
            </summary>
            <param name="Id">Entity id</param>
            <param name="ValueQty">Value Qty</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.ShelfTag.ShelfTagUpdateCommand.Id">
            <summary>Entity id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.ShelfTag.ShelfTagUpdateCommand.ValueQty">
            <summary>Value Qty</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.ShelfTag.ShelfTagUpdateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ShelfTag.ShelfTagUpdateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ShelfTag.ShelfTagUpdateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.ShelfTag.ShelfTagUpdateHandler},Greta.BO.BusinessLogic.Service.IShelfTagService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.ShelfTag.ShelfTagUpdateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.ShelfTag.ShelfTagUpdateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.ShelfTag.ShelfTagUpdateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.StoreProduct.SuggestedUpdateCommand">
            <summary>
            Command for update order amount
            </summary>
            <param name="Id"></param>
            <param name="ValueAmount"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.StoreProduct.SuggestedUpdateCommand.#ctor(System.Int64,System.Decimal)">
            <summary>
            Command for update order amount
            </summary>
            <param name="Id"></param>
            <param name="ValueAmount"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.StoreProduct.SuggestedUpdateCommand.Id">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.StoreProduct.SuggestedUpdateCommand.ValueAmount">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.StoreProduct.SuggestedUpdateCommand.Requirements">
            <summary>
            
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.StoreProduct.SuggestedUpdateValidator">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.StoreProduct.SuggestedUpdateHandler">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.StoreProduct.SuggestedUpdateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.StoreProduct.SuggestedUpdateHandler},Greta.BO.BusinessLogic.Service.IStoreProductService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.StoreProduct.SuggestedUpdateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.StoreProduct.SuggestedUpdateCommand,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.StoreProduct.SuggestedUpdateResponse">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Store.StoreCreateCommand">
            <summary>
            Create entity
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Store.StoreCreateCommand.#ctor(Greta.BO.BusinessLogic.Models.Dto.StoreModel)">
            <summary>
            Create entity
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Store.StoreCreateCommand.Entity">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Store.StoreCreateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Store.Validator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Store.Validator.#ctor(Greta.BO.BusinessLogic.Service.IStoreService)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Store.StoreCreateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Store.StoreCreateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Store.StoreCreateHandler},Microsoft.Extensions.Configuration.IConfiguration,Greta.BO.BusinessLogic.Service.ITicketService,MassTransit.IRequestClient{Greta.Corporate.Api.EventContracts.Ticket.TicketStoreRequestContract},Greta.BO.BusinessLogic.Service.IRegionService,Greta.Sdk.EFCore.Middleware.IAuthenticateUser{System.String},AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="configuration"></param>
            <param name="ticketService"></param>
            <param name="client"></param>
            <param name="regionService"></param>
            <param name="authenticateUser"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Store.StoreCreateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Store.StoreCreateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Store.StoreCreateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Store.StoreChangeStateCommand">
            <summary>
            Change the state of the entity
            </summary>
            <param name="Id">Entity Id</param>
            <param name="State">State to change</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Store.StoreChangeStateCommand.#ctor(System.Int64,System.Boolean)">
            <summary>
            Change the state of the entity
            </summary>
            <param name="Id">Entity Id</param>
            <param name="State">State to change</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Store.StoreChangeStateCommand.Id">
            <summary>Entity Id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Store.StoreChangeStateCommand.State">
            <summary>State to change</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Store.StoreChangeStateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Store.StoreChangeStateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Store.StoreChangeStateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Store.StoreChangeStateHandler},Greta.BO.BusinessLogic.Service.IStoreService,Microsoft.Extensions.Configuration.IConfiguration,MassTransit.IRequestClient{Greta.Corporate.Api.EventContracts.Store.ChangeStateStoreRequestContract},Greta.Sdk.EFCore.Middleware.IAuthenticateUser{System.String},AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
            <param name="client"></param>
            <param name="configuration"></param>
            <param name="authenticateUser"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Store.StoreChangeStateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Store.StoreChangeStateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Store.StoreChangeStateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Store.StoreDeleteCommand">
            <summary>
            Delete entity by entity id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Store.StoreDeleteCommand.#ctor(System.Int64)">
            <summary>
            Delete entity by entity id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Store.StoreDeleteCommand.Id">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Store.StoreDeleteCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Store.StoreDeleteHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Store.StoreDeleteHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Store.StoreDeleteHandler},Greta.BO.BusinessLogic.Service.IStoreService,MassTransit.IRequestClient{Greta.Corporate.Api.EventContracts.Store.DeleteStoreRequestContract},Greta.Sdk.EFCore.Middleware.IAuthenticateUser{System.String},Microsoft.Extensions.Configuration.IConfiguration,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="client"></param>
            <param name="authenticateUser"></param>
            <param name="configuration"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Store.StoreDeleteHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Store.StoreDeleteCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Store.StoreDeleteResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Store.StoreDeleteRangeCommand">
            <summary>
            Delete entities by entity ids
            </summary>
            <param name="Ids"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Store.StoreDeleteRangeCommand.#ctor(System.Collections.Generic.List{System.Int64})">
            <summary>
            Delete entities by entity ids
            </summary>
            <param name="Ids"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Store.StoreDeleteRangeCommand.Ids">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Store.StoreDeleteRangeCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Store.StoreDeleteRangeHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Store.StoreDeleteRangeHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Store.StoreDeleteRangeHandler},Greta.BO.BusinessLogic.Service.IStoreService,MassTransit.IRequestClient{Greta.Corporate.Api.EventContracts.Ticket.TicketStoreRequestContract},Greta.Sdk.EFCore.Middleware.IAuthenticateUser{System.String},Greta.BO.BusinessLogic.Service.ITicketService,Microsoft.Extensions.Configuration.IConfiguration,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="client"></param>
            <param name="authenticateUser"></param>
            <param name="ticketService"></param>
            <param name="configuration"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Store.StoreDeleteRangeHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Store.StoreDeleteRangeCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Store.StoreDeleteRangeResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Store.StoreUpdateCommand">
            <summary>
            Update entity
            </summary>
            <param name="Id">Entity id</param>
            <param name="Entity">New entity</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Store.StoreUpdateCommand.#ctor(System.Int64,Greta.BO.BusinessLogic.Models.Dto.StoreModel)">
            <summary>
            Update entity
            </summary>
            <param name="Id">Entity id</param>
            <param name="Entity">New entity</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Store.StoreUpdateCommand.Id">
            <summary>Entity id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Store.StoreUpdateCommand.Entity">
            <summary>New entity</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Store.StoreUpdateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Store.StoreUpdateValidator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Store.StoreUpdateValidator.#ctor(Greta.BO.BusinessLogic.Service.IStoreService)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Store.StoreUpdateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Store.StoreUpdateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Store.StoreUpdateHandler},Greta.BO.BusinessLogic.Service.IStoreService,MassTransit.IRequestClient{Greta.Corporate.Api.EventContracts.Store.UpdateStoreRequestContract},Greta.Sdk.EFCore.Middleware.IAuthenticateUser{System.String},Microsoft.Extensions.Configuration.IConfiguration,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
            <param name="client"></param>
            <param name="authenticateUser"></param>
            <param name="configuration"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Store.StoreUpdateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Store.StoreUpdateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Store.StoreUpdateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Store.StoreUpdateConfigurationCommand">
            <summary>
            Update configuration entity
            </summary>
            <param name="Id">Entity id</param>
            <param name="Entity">New entity</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Store.StoreUpdateConfigurationCommand.#ctor(System.Int64,Greta.BO.BusinessLogic.Models.Dto.StoreModel)">
            <summary>
            Update configuration entity
            </summary>
            <param name="Id">Entity id</param>
            <param name="Entity">New entity</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Store.StoreUpdateConfigurationCommand.Id">
            <summary>Entity id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Store.StoreUpdateConfigurationCommand.Entity">
            <summary>New entity</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Store.StoreUpdateConfigurationCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Store.StoreUpdateConfigurationResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Store.StoreUpdateConfigurationHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Store.StoreUpdateConfigurationHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Store.StoreUpdateConfigurationHandler},Greta.BO.BusinessLogic.Service.IStoreService,MediatR.IMediator,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mediator"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Store.StoreUpdateConfigurationHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Store.StoreUpdateConfigurationCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Synchro.SyncroRemapingProduct">
            <summary>
            This Handler allow to remap all products on database to d devices
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Tax.TaxChangeStateCommand">
            <summary>
            Change state of entity
            </summary>
            <param name="Id">Entity id</param>
            <param name="State">New state</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Tax.TaxChangeStateCommand.#ctor(System.Int64,System.Boolean)">
            <summary>
            Change state of entity
            </summary>
            <param name="Id">Entity id</param>
            <param name="State">New state</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Tax.TaxChangeStateCommand.Id">
            <summary>Entity id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Tax.TaxChangeStateCommand.State">
            <summary>New state</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Tax.TaxChangeStateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Tax.TaxChangeStateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Tax.TaxChangeStateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Tax.TaxChangeStateHandler},Greta.BO.BusinessLogic.Service.ITaxService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Tax.TaxChangeStateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Tax.TaxChangeStateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Tax.TaxChangeStateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Tax.TaxCreateCommand">
            <summary>
            Create entity
            </summary>
            <param name="Entity">Tax entity</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Tax.TaxCreateCommand.#ctor(Greta.BO.BusinessLogic.Models.Dto.TaxModel)">
            <summary>
            Create entity
            </summary>
            <param name="Entity">Tax entity</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Tax.TaxCreateCommand.Entity">
            <summary>Tax entity</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Tax.TaxCreateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Tax.TaxCreateValidator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Tax.TaxCreateValidator.#ctor(Greta.BO.BusinessLogic.Service.ITaxService)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Tax.TaxCreateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Tax.TaxCreateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Tax.TaxCreateHandler},Greta.BO.BusinessLogic.Service.ITaxService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Tax.TaxCreateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Tax.TaxCreateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Tax.TaxCreateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Tax.TaxDeleteCommand">
            <summary>
            Delete entity by entity id
            </summary>
            <param name="Id">Entity id</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Tax.TaxDeleteCommand.#ctor(System.Int64)">
            <summary>
            Delete entity by entity id
            </summary>
            <param name="Id">Entity id</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Tax.TaxDeleteCommand.Id">
            <summary>Entity id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Tax.TaxDeleteCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Tax.TaxDeleteHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Tax.TaxDeleteHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Tax.TaxDeleteHandler},Greta.BO.BusinessLogic.Service.ITaxService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Tax.TaxDeleteHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Tax.TaxDeleteCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Tax.TaxDeleteResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Tax.TaxDeleteRangeCommand">
            <summary>
            Delete entities by list of entity ids
            </summary>
            <param name="Ids">List of entity ids</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Tax.TaxDeleteRangeCommand.#ctor(System.Collections.Generic.List{System.Int64})">
            <summary>
            Delete entities by list of entity ids
            </summary>
            <param name="Ids">List of entity ids</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Tax.TaxDeleteRangeCommand.Ids">
            <summary>List of entity ids</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Tax.TaxDeleteRangeCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Tax.TaxDeleteRangeHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Tax.TaxDeleteRangeHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Tax.TaxDeleteRangeHandler},Greta.BO.BusinessLogic.Service.ITaxService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Tax.TaxDeleteRangeHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Tax.TaxDeleteRangeCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Tax.TaxDeleteRangeResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Tax.TaxUpdateCommand">
            <summary>
            Update entity
            </summary>
            <param name="Id">Entity id</param>
            <param name="Entity">Entity with new values</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Tax.TaxUpdateCommand.#ctor(System.Int64,Greta.BO.BusinessLogic.Models.Dto.TaxModel)">
            <summary>
            Update entity
            </summary>
            <param name="Id">Entity id</param>
            <param name="Entity">Entity with new values</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Tax.TaxUpdateCommand.Id">
            <summary>Entity id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Tax.TaxUpdateCommand.Entity">
            <summary>Entity with new values</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Tax.TaxUpdateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Tax.TaxUpdateValidator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Tax.TaxUpdateValidator.#ctor(Greta.BO.BusinessLogic.Service.ITaxService)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Tax.TaxUpdateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Tax.TaxUpdateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.Tax.TaxUpdateHandler},Greta.BO.BusinessLogic.Service.ITaxService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Tax.TaxUpdateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Tax.TaxUpdateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Tax.TaxUpdateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.TimeKeeping.ClockInCommand">
            <summary>
            ClockInCommand
            </summary>
            <param name="EmployeeId"></param>
            <param name="EmployeeName"></param>
            <param name="DeviceLicenceCode"></param>
            <param name="Date"></param>
            <param name="FormatDate"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.TimeKeeping.ClockInCommand.#ctor(System.Int64,System.String,System.String,System.DateTime,System.String)">
            <summary>
            ClockInCommand
            </summary>
            <param name="EmployeeId"></param>
            <param name="EmployeeName"></param>
            <param name="DeviceLicenceCode"></param>
            <param name="Date"></param>
            <param name="FormatDate"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.TimeKeeping.ClockInCommand.EmployeeId">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.TimeKeeping.ClockInCommand.EmployeeName">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.TimeKeeping.ClockInCommand.DeviceLicenceCode">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.TimeKeeping.ClockInCommand.Date">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.TimeKeeping.ClockInCommand.FormatDate">
            <summary></summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.TimeKeeping.ClockInResponse">
            <summary>
            ClockInResponse
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.TimeKeeping.ClockInHandler">
            <summary>
            ClockInHandler
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.TimeKeeping.ClockInHandler.#ctor(Greta.BO.BusinessLogic.Service.ITimeKeepingService,Greta.BO.BusinessLogic.Service.IDeviceService)">
            <summary>
            ClockInHandler
            </summary>
            <param name="timeKeepingService"></param>
            <param name="deviceService"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.TimeKeeping.ClockInHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.TimeKeeping.ClockInCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.TimeKeeping.ClockOutCommand">
            <summary>
            ClockOutCommand
            </summary>
            <param name="EmployeeId"></param>
            <param name="EmployeeName"></param>
            <param name="DeviceLicenceCode"></param>
            <param name="Date"></param>
            <param name="FormatDate"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.TimeKeeping.ClockOutCommand.#ctor(System.Int64,System.String,System.String,System.DateTime,System.String)">
            <summary>
            ClockOutCommand
            </summary>
            <param name="EmployeeId"></param>
            <param name="EmployeeName"></param>
            <param name="DeviceLicenceCode"></param>
            <param name="Date"></param>
            <param name="FormatDate"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.TimeKeeping.ClockOutCommand.EmployeeId">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.TimeKeeping.ClockOutCommand.EmployeeName">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.TimeKeeping.ClockOutCommand.DeviceLicenceCode">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.TimeKeeping.ClockOutCommand.Date">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.TimeKeeping.ClockOutCommand.FormatDate">
            <summary></summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.TimeKeeping.ClockOutResponse">
            <summary>
            ClockOutResponse
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.TimeKeeping.ClockOutHandler">
            <summary>
            ClockOutHandler
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.TimeKeeping.ClockOutHandler.#ctor(Greta.BO.BusinessLogic.Service.ITimeKeepingService,Greta.BO.BusinessLogic.Service.IDeviceService)">
            <summary>
            ClockOutHandler
            </summary>
            <param name="timeKeepingService"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.TimeKeeping.ClockOutHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.TimeKeeping.ClockOutCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetailCredit.VendorOrderDetailCreditToCsvCommand">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetailCredit.VendorOrderDetailCreditToCsvCommand.#ctor(System.String,System.Collections.Generic.List{Greta.BO.Api.Entities.VendorOrderDetailCredit})">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetailCredit.VendorOrderDetailCreditToCsvResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetailCredit.VendorOrderDetailCreditToCsvHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetailCredit.VendorOrderDetailCreditToCsvHandler.#ctor(Greta.Sdk.FileStorage.Interfaces.IStorageProvider,Microsoft.Extensions.Options.IOptions{Greta.Sdk.FileStorage.Options.StorageOption})">
            <summary>
            
            </summary>
            <param name="storage"></param>
            <param name="options"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetailCredit.VendorOrderDetailCreditToCsvHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetailCredit.VendorOrderDetailCreditToCsvCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetailCredit.VendorOrderInvoiceCreditCommand">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetailCredit.VendorOrderInvoiceCreditCommand.#ctor(System.Int64,Greta.BO.BusinessLogic.Models.Dto.VendorDetailCreditListModel)">
            <inheritdoc />
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetailCredit.VendorOrderInvoiceCreditCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetailCredit.VendorOrderInvoiceCreditHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetailCredit.VendorOrderInvoiceCreditHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetailCredit.VendorOrderInvoiceCreditHandler},Greta.BO.BusinessLogic.Service.IVendorOrderDetailCreditService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="serviceDetailCredit"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetailCredit.VendorOrderInvoiceCreditHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetailCredit.VendorOrderInvoiceCreditCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetailCredit.VendorOrderInvoiceCreditResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetailCredit.VendorOrderInvoiceCreditEditCommand">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetailCredit.VendorOrderInvoiceCreditEditCommand.#ctor(Greta.BO.BusinessLogic.Models.Dto.VendorOrderDetailCreditModel)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetailCredit.VendorOrderInvoiceCreditEditHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetailCredit.VendorOrderInvoiceCreditEditHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetailCredit.VendorOrderInvoiceCreditEditHandler},Greta.BO.BusinessLogic.Service.IVendorOrderDetailCreditService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="serviceDetailCredit"></param>
            <param name="mapper"></param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetailCredit.VendorOrderInvoiceCreditEditResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetail.VendorOrderDetailAmountUpdateCommand">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetail.VendorOrderDetailAmountUpdateCommand.#ctor(System.Int64,System.Decimal)">
            <inheritdoc />
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetail.VendorOrderDetailAmountUpdateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetail.VendorOrderDetailAmountUpdateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetail.VendorOrderDetailAmountUpdateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetail.VendorOrderDetailAmountUpdateHandler},Greta.BO.BusinessLogic.Service.IVendorOrderDetailService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetail.VendorOrderDetailAmountUpdateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetail.VendorOrderDetailAmountUpdateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetail.VendorOrderDetailAmountUpdateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetail.VendorOrderDetailCreateCommand">
            <summary>
            Create a vendor order or full order if is DSD
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetail.VendorOrderDetailCreateCommand.#ctor(Greta.BO.BusinessLogic.Models.Dto.VendorDetailListModel)">
            <summary>
            Create a vendor order or full order if is DSD
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetail.VendorOrderDetailCreateCommand.Entity">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetail.VendorOrderDetailCreateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetail.VendorOrderDetailCreateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetail.VendorOrderDetailCreateHandler.#ctor(Greta.BO.BusinessLogic.Service.IVendorOrderDetailService,Greta.BO.BusinessLogic.Service.IVendorOrderService,MediatR.IMediator,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="serviceVendorOrder"></param>
            <param name="mapper"></param>
            <param name="mediator"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetail.VendorOrderDetailCreateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetail.VendorOrderDetailCreateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetail.VendorOrderDetailCreateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetail.VendorOrderDetailCreateDsdCommand">
            <summary>
            Create a vendor order or full order if is DSD
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetail.VendorOrderDetailCreateDsdCommand.#ctor(Greta.BO.BusinessLogic.Models.Dto.VendorDetailListModel)">
            <summary>
            Create a vendor order or full order if is DSD
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetail.VendorOrderDetailCreateDsdCommand.Entity">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetail.VendorOrderDetailCreateDsdCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetail.VendorOrderDetailCreateDsdHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetail.VendorOrderDetailCreateDsdHandler.#ctor(Greta.BO.BusinessLogic.Service.IVendorOrderDetailService,Greta.BO.BusinessLogic.Service.IVendorOrderService,MediatR.IMediator,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="serviceVendorOrder"></param>
            <param name="mapper"></param>
            <param name="mediator"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetail.VendorOrderDetailCreateDsdHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetail.VendorOrderDetailCreateDsdCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetail.VendorOrderDetailCreateDsdResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetail.VendorOrderDetailDeleteCommand">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetail.VendorOrderDetailDeleteCommand.#ctor(System.Int64)">
            <inheritdoc />
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetail.VendorOrderDetailDeleteCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetail.VendorOrderDetailDeleteHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetail.VendorOrderDetailDeleteHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetail.VendorOrderDetailDeleteHandler},Greta.BO.BusinessLogic.Service.IVendorOrderDetailService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetail.VendorOrderDetailDeleteResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetail.VendorOrderDetailUpdateCommand">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetail.VendorOrderDetailUpdateCommand.#ctor(System.Int64,Greta.BO.BusinessLogic.Models.Dto.VendorOrderDetailModel)">
            <inheritdoc />
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetail.VendorOrderDetailUpdateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetail.VendorOrderDetailUpdateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetail.VendorOrderDetailUpdateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetail.VendorOrderDetailUpdateHandler},Greta.BO.BusinessLogic.Service.IVendorOrderDetailService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetail.VendorOrderDetailUpdateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetail.VendorOrderDetailUpdateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.VendorOrderDetail.VendorOrderDetailUpdateResponse">
            <inheritdoc />
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderChangeStateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderChangeStateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderChangeStateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderChangeStateHandler},Greta.BO.BusinessLogic.Service.IVendorOrderService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderChangeStateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderChangeStateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderChangeStateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderCreateCommand">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderCreateCommand.#ctor(Greta.BO.BusinessLogic.Models.Dto.VendorOrderModel)">
            <inheritdoc />
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderCreateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderCreateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderCreateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderCreateHandler},Greta.BO.BusinessLogic.Service.IVendorOrderService,Greta.BO.BusinessLogic.Service.IBOUserService,Greta.Sdk.EFCore.Middleware.IAuthenticateUser{System.String},AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="userService"></param>
            <param name="auth"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderCreateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderCreateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderCreateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderDeleteCommand">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderDeleteCommand.#ctor(System.Int64)">
            <inheritdoc />
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderDeleteCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderDeleteHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderDeleteHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderDeleteHandler},Greta.BO.BusinessLogic.Service.IVendorOrderService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderDeleteHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderDeleteCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderDeleteResponse">
            <inheritdoc />
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderDeleteRangeCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderDeleteRangeHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderDeleteRangeHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderDeleteRangeHandler},Greta.BO.BusinessLogic.Service.IVendorOrderService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderDeleteRangeHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderDeleteRangeCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderDeleteRangeResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderReceivedCommand">
            <summary>
            Command to receive vendor order
            </summary>
            <param name="EntityId"></param>
            <param name="Entity"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderReceivedCommand.#ctor(System.Int64,Greta.BO.BusinessLogic.Models.Dto.VendorDetailReceivedListModel)">
            <summary>
            Command to receive vendor order
            </summary>
            <param name="EntityId"></param>
            <param name="Entity"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderReceivedCommand.EntityId">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderReceivedCommand.Entity">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderReceivedCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderReceivedHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderReceivedHandler.#ctor(Greta.BO.BusinessLogic.Service.IVendorOrderService,Greta.BO.BusinessLogic.Service.IVendorOrderDetailService,Greta.BO.BusinessLogic.Service.IVendorOrderDetailCreditService,Greta.BO.BusinessLogic.Service.IStoreProductService,Greta.BO.BusinessLogic.Service.IVendorProductService,Greta.BO.Api.Abstractions.IQtyHandTrackRepository,Greta.BO.BusinessLogic.Service.IProductService,Greta.BO.BusinessLogic.Service.IVendorService)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="serviceDetail"></param>
            <param name="serviceDetailCredit"></param>
            <param name="serviceStoreProduct"></param>
            <param name="serviceVendorProduct"></param>
            <param name="qtyHandTrackRepository"></param>
            <param name="serviceProduct"></param>
            <param name="serviceVendor"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderReceivedHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderReceivedCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderReceivedResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderSendEmailResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderSendEmailHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderSendEmailHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderSendEmailHandler},MediatR.IMediator,Greta.BO.BusinessLogic.Service.IVendorOrderService,Greta.Sender.Masstransit.Helper.IEmailHelper)">
            <summary>
            
            </summary>
            <param name="logguer"></param>
            <param name="mediator"></param>
            <param name="service"></param>
            <param name="emailHelper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderSendEmailHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderSendEmailCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderToCsvCommand">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderToCsvCommand.#ctor(System.String,System.Collections.Generic.List{Greta.BO.Api.Entities.VendorOrderDetail})">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderToCsvResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderToCsvHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderToCsvHandler.#ctor(Greta.Sdk.FileStorage.Interfaces.IStorageProvider,Microsoft.Extensions.Options.IOptions{Greta.Sdk.FileStorage.Options.StorageOption})">
            <summary>
            
            </summary>
            <param name="storage"></param>
            <param name="options"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderToCsvHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderToCsvCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderUpdateCommand">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderUpdateCommand.#ctor(System.Int64,Greta.BO.BusinessLogic.Models.Dto.VendorOrderModel)">
            <inheritdoc />
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderUpdateCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderUpdateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderUpdateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderUpdateHandler},Greta.BO.BusinessLogic.Service.IVendorOrderService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderUpdateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderUpdateCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderUpdateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderUpdateReceiveCommand">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderUpdateReceiveCommand.#ctor(System.Int64,Greta.BO.BusinessLogic.Models.Dto.VendorOrderReceiveModel)">
            <inheritdoc />
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderUpdateReceiveCommand.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderUpdateReceiveHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderUpdateReceiveHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderUpdateReceiveHandler},Greta.BO.BusinessLogic.Service.IVendorOrderService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderUpdateReceiveHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderUpdateReceiveCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.VendorOrder.VendorOrderUpdateReceiveResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Zpl.ConvertZplForExampleCommand">
            <summary>
            Convert a label design to zpl code with example data
            </summary>
            <param name="Label">Label Design</param>
            <param name="Type">Type of data</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Zpl.ConvertZplForExampleCommand.#ctor(Greta.Sdk.LabelConverter.models.LabelDesign,Greta.BO.Api.Entities.Enum.LabelDesignMode)">
            <summary>
            Convert a label design to zpl code with example data
            </summary>
            <param name="Label">Label Design</param>
            <param name="Type">Type of data</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Zpl.ConvertZplForExampleCommand.Label">
            <summary>Label Design</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Zpl.ConvertZplForExampleCommand.Type">
            <summary>Type of data</summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Zpl.ConvertZplForExampleResponse">
            <summary>
            Convert a label design to zpl code with example data response
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Zpl.ConvertZplForExampleHandler">
            <summary>
            Convert a label design to zpl code with example data handler
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Zpl.ConvertZplForExampleHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Zpl.ConvertZplForExampleCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Zpl.CreateShelfTagZplCodeCommand">
            <summary>
            Create a zpl code for a shelf tag
            </summary>
            <param name="Model">Data model</param>
            <param name="LabelType">label Type</param>
            <param name="QtyToPrint">Quantity</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Zpl.CreateShelfTagZplCodeCommand.#ctor(Greta.Sdk.LabelConverter.models.ShelfTagHolderModel,Greta.Sdk.LabelConverter.models.LabelDesign,System.Int32)">
            <summary>
            Create a zpl code for a shelf tag
            </summary>
            <param name="Model">Data model</param>
            <param name="LabelType">label Type</param>
            <param name="QtyToPrint">Quantity</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Zpl.CreateShelfTagZplCodeCommand.Model">
            <summary>Data model</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Zpl.CreateShelfTagZplCodeCommand.LabelType">
            <summary>label Type</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Zpl.CreateShelfTagZplCodeCommand.QtyToPrint">
            <summary>Quantity</summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Zpl.CreateShelfTagZplCodeHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Zpl.CreateShelfTagZplCodeHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Zpl.CreateShelfTagZplCodeCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Zpl.ProcessAnimalToZplResponse">
            <summary>
            Process a product to zpl response
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Zpl.ProcessAnimalToZplHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Zpl.ProcessAnimalToZplHandler.#ctor(Greta.BO.BusinessLogic.Service.IScaleLabelTypeService,Greta.BO.BusinessLogic.Service.IAnimalService,MediatR.IMediator)">
            <summary>
            
            </summary>
            <param name="scaleLabelTypeService"></param>
            <param name="animalService"></param>
            <param name="mediator"></param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Zpl.ProcessProductToZplCommand">
            <summary>
            Process a product to zpl
            </summary>
            <param name="Model"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Zpl.ProcessProductToZplCommand.#ctor(Greta.BO.BusinessLogic.Models.Dto.ProductToZplModel)">
            <summary>
            Process a product to zpl
            </summary>
            <param name="Model"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Zpl.ProcessProductToZplCommand.Model">
            <summary></summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Zpl.ProcessProductToZplResponse">
            <summary>
            Process a product to zpl response
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Zpl.ProcessProductToZplHandler">
            <summary>
            handler for process a product to zpl handler
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Zpl.ProcessProductToZplHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Zpl.ProcessProductToZplCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Zpl.ProcessShelfTagsCommand">
            <summary>
            Process all shelf tags and get the zpl code for all.
            </summary>
            <param name="Model"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Zpl.ProcessShelfTagsCommand.#ctor(Greta.BO.BusinessLogic.Models.Dto.ProcessShelfTagModel)">
            <summary>
            Process all shelf tags and get the zpl code for all.
            </summary>
            <param name="Model"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Zpl.ProcessShelfTagsCommand.Model">
            <summary></summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Zpl.ProcessShelfTagsHandler">
            <summary>
            handler for process all shelf tags and get the zpl code for all handler
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Zpl.ProcessShelfTagsHandler.#ctor(Greta.BO.BusinessLogic.Service.IShelfTagService,MediatR.IMediator)">
            <summary>
            Constructor
            </summary>
            <param name="shelfTagService"></param>
            <param name="mediator"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Command.Zpl.ProcessShelfTagsHandler.Handle(Greta.BO.BusinessLogic.Handlers.Command.Zpl.ProcessShelfTagsCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Command.Zpl.ShelfTagPrintResponse">
            <summary>
            Shelf tag print inner response
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Zpl.ShelfTagPrintResponse.Zpls">
            <summary>
            Zpl code for all shelf tags
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Command.Zpl.ShelfTagPrintResponse.IdsShelfTagPrinted">
            <summary>
            Ids of shelf tags printed
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Greta.BO.BusinessLogic.Handlers.DataHandlers.DataHandler" -->
        <member name="E:Greta.BO.BusinessLogic.Handlers.DataHandlers.DataHandler.Notify">
            <summary>
              handle send notification message
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.DataHandlers.DataHandler.#ctor(Microsoft.Extensions.Logging.ILogger)">
            <summary>
            returns a new <see cref="T:Greta.BO.BusinessLogic.Handlers.DataHandlers.DataHandler"/> instance
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.DataHandlers.DataHandler.#ctor(Microsoft.Extensions.Logging.ILogger,System.String)">
            <summary>
            returns a new <see cref="T:Greta.BO.BusinessLogic.Handlers.DataHandlers.DataHandler"/> instance
            </summary>
            <param name="logger"></param>
            <param name="model"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.DataHandlers.DataHandler.Model">
            <summary>
            name of managed entity
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.DataHandlers.UINotificationHandler">
            <summary>
            A simple delegate to be called by notification events
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.DataHandlers.Exporters.BaseExport`2.Process(System.Collections.Generic.List{System.String},System.Nullable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.DataHandlers.Exporters.BaseExport`2.StringToCSVCell(System.String)">
            <summary>
            Turn a string into a CSV cell output
            </summary>
            <param name="str">String to output</param>
            <returns>The CSV cell formatted string</returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.DataHandlers.HandlerMessage">
            <summary>
            Base message content to be send over handlers
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.DataHandlers.HandlerMessage.#ctor">
            <summary>
            returns a new <see cref="T:Greta.BO.BusinessLogic.Handlers.DataHandlers.HandlerMessage"/> instance
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.DataHandlers.HandlerMessage.Stage">
            <summary>
            stage name in with importatin/exportation process is
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.DataHandlers.HandlerMessage.Model">
            <summary>
            model that's been processed
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.DataHandlers.HandlerMessage.CurrentRow">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.DataHandlers.HandlerMessage.TotalRows">
            <summary>
            total rows number
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.DataHandlers.HandlerMessage.InsertedRows">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.DataHandlers.HandlerMessage.UpdatedRows">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.DataHandlers.HandlerMessage.FailedRows">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.DataHandlers.HandlerMessage.ProcessedRows">
            <summary> </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.DataHandlers.HandlerMessage.CreationDate">
            <summary>
            date of message launch
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.DataHandlers.HandlerMessage.Message">
            <summary>
            Message content to display
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.DataHandlers.HandlerMessage.Errors">
            <summary>
            returns only those messages that are Errors
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.DataHandlers.HandlerMessage.Informations">
            <summary>
            returns only inormation messages
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.DataHandlers.HandlerMessage.Debugs">
            <summary>
            return only Debug messages
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.DataHandlers.HandlerMessage.Warnings">
            <summary>
            return only Warnings
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.DataHandlers.HandlerMessage.AllMessages">
            <summary>
            return all mmesages
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.DataHandlers.HandlerMessage.MessageLevel">
            <summary>
            level message, commonly it will be used the Debug level so system could track
            the import/export process. If Information level it will not only keep the message
            history but means that the front should be updated
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.DataHandlers.HandlerMessage.InnerException">
            <summary>
            Exception message, this will be used in case of an error message and 
            final front or consummer should determ what to do with it.
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.DataHandlers.HandlerMessage.New(System.String,System.String,System.Nullable{System.Int32},System.Nullable{Greta.BO.BusinessLogic.Handlers.DataHandlers.Stage},System.Nullable{System.Int32},System.Nullable{Greta.BO.BusinessLogic.Handlers.DataHandlers.MessageLevel},System.Exception)">
            <summary>
            returns a new instance of <see cref="T:Greta.BO.BusinessLogic.Handlers.DataHandlers.HandlerMessage"/>, missed data will be taken from
            the previous message, this reduce the amount of code to notify operation.
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.DataHandlers.HandlerMessage.New(System.String,System.Int32,System.Nullable{Greta.BO.BusinessLogic.Handlers.DataHandlers.Stage},System.String,System.Nullable{System.Int32},System.Nullable{Greta.BO.BusinessLogic.Handlers.DataHandlers.MessageLevel},System.Exception)">
            <summary>
            returns a new <see cref="T:Greta.BO.BusinessLogic.Handlers.DataHandlers.HandlerMessage"/> instance, is suppose to simplify the instanciation
            process.
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.DataHandlers.HandlerMessage.New(System.String,System.Exception,System.Nullable{Greta.BO.BusinessLogic.Handlers.DataHandlers.Stage})">
            <summary>
            returns a new <see cref="T:Greta.BO.BusinessLogic.Handlers.DataHandlers.HandlerMessage"/> instance is suppose to simplify the instantiation
            process
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.DataHandlers.HandlerMessage.From(Greta.BO.BusinessLogic.Handlers.DataHandlers.HandlerMessage,System.String,System.Boolean)">
            <summary>
            creates a new <see cref="T:Greta.BO.BusinessLogic.Handlers.DataHandlers.HandlerMessage"/> using a message as a source
            it only changes the message. depending on isError choose which message type
            to generate Information or Error
            </summary>
            <param name="parent"></param>
            <param name="source"></param>
            <param name="isError"></param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.DataHandlers.HandlerMessage.From(Greta.BO.BusinessLogic.Handlers.DataHandlers.HandlerMessage,Greta.BO.BusinessLogic.Handlers.DataHandlers.HandlerMessage,System.Boolean)">
            <summary>
            creates a new <see cref="T:Greta.BO.BusinessLogic.Handlers.DataHandlers.HandlerMessage"/> using a message as a source
            it only changes the message. depending on isError choose which message type
            to generate Information or Error
            </summary>
            <param name="parent"></param>
            <param name="source"></param>
            <param name="isError"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.DataHandlers.IExporter`1">
            <summary>
            And exporter is a base class that basically reads data from 
            the database entities and match them with a provided mapping 
            in order to generate the CSV file
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.DataHandlers.ImportValidation`1">
            <summary>
            Define the data validator used in the importing process. Has an abstract
            for that is implemented on specific validators, this class will be used
            by the <see cref="T:Greta.BO.BusinessLogic.Handlers.DataHandlers.ValidationPipeline`1"/> to execute validations
            </summary>
            <typeparam name="TParameter">Entity type to validate</typeparam>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.DataHandlers.ImportValidation`1.Validate(`0,System.Func{`0,System.Threading.Tasks.Task{System.ValueTuple{System.Object,System.Boolean}}},System.Object[])">
            <summary>
            execute the validation process for each entities.
            </summary>
            <param name="parameter"><see cref="!:TParameter"/> instance to validate</param>
            <param name="next">the next validation in the pipeline</param>
            <param name="args">[optional] parameters to be send to validators</param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.DataHandlers.IValidationPipeline`1">
            <summary>
            The validation pipeline, uses an Activations mechanism for the <see cref="T:Greta.BO.BusinessLogic.Handlers.DataHandlers.ImportValidation`1"/>
            classes specified. The pipeline has been implemented as a Chain Of Responsibility, that
            breaks when one of the validations fails.
            </summary>
            <typeparam name="TParameter"></typeparam>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.DataHandlers.IValidationPipeline`1.Add``1">
            <summary>
            Adds a new validation type that inherit from <see cref="T:Greta.BO.BusinessLogic.Handlers.DataHandlers.ImportValidation`1"/> that
            will be used int the validation process
            </summary>
            <typeparam name="TValidation">validation type to included</typeparam>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.DataHandlers.IValidationPipeline`1.Execute(`0,System.Object[])">
            <summary>
            executes the validation pipeline.
            </summary>
            <param name="parameter"><see cref="!:TParameter"/> instance to validate</param>
            <param name="args">parameters that may be used in the validators</param>
            <returns><see cref="!:Task&lt;object?, bool&gt;"/> with true if no validation fails</returns>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.DataHandlers.IValidationPipeline`1.Validations">
            <summary>
            returns the list of registered validations
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.DataHandlers.ValidationPipeline`1">
            <summary>
            <inheritdoc cref="T:Greta.BO.BusinessLogic.Handlers.DataHandlers.IValidationPipeline`1"/>. Validations are saved as types,
            When executed it creates a new instance, and calls the <see cref="M:Greta.BO.BusinessLogic.Handlers.DataHandlers.ImportValidation`1.Validate(`0,System.Func{`0,System.Threading.Tasks.Task{System.ValueTuple{System.Object,System.Boolean}}},System.Object[])"/>
            method of the instance and passes to it the required parameters, including the next function
            that's actually a call to the next validate in the pipeline or a lambda empty function if
            the pipeline finish. It used a <see cref="T:Greta.BO.BusinessLogic.Handlers.DataHandlers.INotifier"/> to send notifications about validation
            status.
            </summary>
            <typeparam name="TParameter"></typeparam>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.DataHandlers.ValidationPipeline`1.#ctor(Greta.BO.BusinessLogic.Handlers.DataHandlers.INotifier)">
            <summary>
            returns a new <see cref="T:Greta.BO.BusinessLogic.Handlers.DataHandlers.ValidationPipeline`1"/> instance
            </summary>
            <param name="notifier"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.DataHandlers.ValidationPipeline`1.Validations">
            <summary>
            returns the list of registered validations
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.DataHandlers.ValidationPipeline`1.Add``1">
            <inheritdoc cref="M:Greta.BO.BusinessLogic.Handlers.DataHandlers.IValidationPipeline`1.Add``1"/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.DataHandlers.ValidationPipeline`1.Execute(`0,System.Object[])">
            <summary>
            <see cref="M:Greta.BO.BusinessLogic.Handlers.DataHandlers.IValidationPipeline`1.Execute(`0,System.Object[])"/>
            </summary>
            <param name="parameter"></param>
            <param name="baseMsg"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.DataHandlers.IIntrospector`1">
            <summary>
             Define the introspector methods. THis instrospector is used to gather
             data from existing entities and mostly match them with provided mappings
             of provided data.
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.DataHandlers.IIntrospector`1.Model">
            <summary>
            name of processed model
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.DataHandlers.IIntrospector`1.GetBaseProperties">
            <summary>
            returns the list of base entity properties
            </summary>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.DataHandlers.Introspector`1">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.DataHandlers.Introspector`1.#ctor(Greta.BO.BusinessLogic.Handlers.DataHandlers.INotifier)">
            <summary></summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.DataHandlers.Introspector`1.#ctor(Microsoft.Extensions.Logging.ILogger,Greta.BO.BusinessLogic.Handlers.DataHandlers.INotifier)">
            <summary>
            returns a new <see cref="T:Greta.BO.BusinessLogic.Handlers.DataHandlers.Introspector`1"/> instance
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.DataHandlers.Introspector`1.#ctor(Microsoft.Extensions.Logging.ILogger,System.String,Greta.BO.BusinessLogic.Handlers.DataHandlers.INotifier)">
            <summary>
            returns a new <see cref="T:Greta.BO.BusinessLogic.Handlers.DataHandlers.Introspector`1"/> instance
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.DataHandlers.Introspector`1.New(Microsoft.Extensions.Logging.ILogger,Greta.BO.BusinessLogic.Handlers.DataHandlers.INotifier)">
            <summary></summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.DataHandlers.Introspector`1.New(Microsoft.Extensions.Logging.ILogger,System.String,Greta.BO.BusinessLogic.Handlers.DataHandlers.INotifier)">
            <summary>
            returns a new <see cref="T:Greta.BO.BusinessLogic.Handlers.DataHandlers.Introspector`1"/> instance
            </summary>
            <param name="logger"></param>
            <param name="model"></param>
            <param name="notifier"></param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.DataHandlers.Introspector`1.New(Greta.BO.BusinessLogic.Handlers.DataHandlers.INotifier)">
            <summary>
            returns a new <see cref="T:Greta.BO.BusinessLogic.Handlers.DataHandlers.Introspector`1"/> instance
            </summary>
            <param name="notifier"></param>
            <returns></returns>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.DataHandlers.Introspector`1.Model">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.DataHandlers.Introspector`1.GetBaseProperties">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.DataHandlers.Introspector`1.GetAllBaseProperties">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.DataHandlers.Introspector`1.BuildMessage">
            <summary>
            return a message with current information
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.DataHandlers.Introspector`1.GetColumnNames">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.DataHandlers.Introspector`1.GetAllColumnsNames">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.DataHandlers.MessageLevel">
            <summary>
             diferent message level, it used to determ how to handle
             the message, in back and front
            </summary>
        </member>
        <member name="F:Greta.BO.BusinessLogic.Handlers.DataHandlers.MessageLevel.Debug">
            <summary>Debugging message</summary>
        </member>
        <member name="F:Greta.BO.BusinessLogic.Handlers.DataHandlers.MessageLevel.Information">
            <summary>simple information to inform to user, about current step and all that</summary>
        </member>
        <member name="F:Greta.BO.BusinessLogic.Handlers.DataHandlers.MessageLevel.Warning">
            <summary>Warning message that could be handle as a minor error or so</summary>
        </member>
        <member name="F:Greta.BO.BusinessLogic.Handlers.DataHandlers.MessageLevel.Error">
            <summary>
            Error that could or not affect the import/export process how the system
            react to it should be determ by the message handler.
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.DataHandlers.INotifier">
            <summary>
            System notifier
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.DataHandlers.INotifier.Message">
            <summary>
            <see cref="T:Greta.BO.BusinessLogic.Handlers.DataHandlers.HandlerMessage"/> instance with message to send
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.DataHandlers.INotifier.NotifyUpdateAsync(Greta.BO.BusinessLogic.Handlers.DataHandlers.HandlerMessage)">
            <summary>
            send an async <see cref="T:Greta.BO.BusinessLogic.Handlers.DataHandlers.HandlerMessage"/> message
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.DataHandlers.INotifier.NotifyUpdate(Greta.BO.BusinessLogic.Handlers.DataHandlers.HandlerMessage)">
            <summary>
            send a sync <see cref="T:Greta.BO.BusinessLogic.Handlers.DataHandlers.HandlerMessage"/> message
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.DataHandlers.INotifier.NotifyErrorAsync(Greta.BO.BusinessLogic.Handlers.DataHandlers.HandlerMessage)">
            <summary>
            send an async <see cref="T:Greta.BO.BusinessLogic.Handlers.DataHandlers.HandlerMessage"/> message
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.DataHandlers.INotifier.NotifyError(Greta.BO.BusinessLogic.Handlers.DataHandlers.HandlerMessage)">
            <summary>
            send a sync <see cref="T:Greta.BO.BusinessLogic.Handlers.DataHandlers.HandlerMessage"/> message
            </summary>
            <param name="msg"></param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.DataHandlers.Stage">
            <summary>
            stage in which the process is in
            </summary>
        </member>
        <member name="F:Greta.BO.BusinessLogic.Handlers.DataHandlers.Stage.Initialiazing">
            <summary>
            initializing 
            </summary>
        </member>
        <member name="F:Greta.BO.BusinessLogic.Handlers.DataHandlers.Stage.Preprocesing">
            <summary>
            processing mapping
            </summary>
        </member>
        <member name="F:Greta.BO.BusinessLogic.Handlers.DataHandlers.Stage.Processing">
            <summary>
            Processing data
            </summary>
        </member>
        <member name="F:Greta.BO.BusinessLogic.Handlers.DataHandlers.Stage.Completed">
            <summary>
            notify that process has finished and show process 
            results
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Events.Categories.CategoryCreatedHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Events.Categories.CategoryCreatedHandler.#ctor(MediatR.IMediator,Greta.BO.BusinessLogic.Service.IOnlineStoreService,Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Events.Categories.CategoryCreatedHandler})">
            <summary>
            
            </summary>
            <param name="mediator"></param>
            <param name="storeService"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Events.Categories.CategoryCreatedHandler.Handle(Greta.BO.Api.Entities.Events.Internal.Categories.CategoryCreated,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Events.Categories.CategoryDeletedHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Events.Categories.CategoryDeletedHandler.#ctor(MediatR.IMediator,Greta.BO.BusinessLogic.Service.ICategoryService,Greta.BO.BusinessLogic.Service.IOnlineStoreService,Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Events.Categories.CategoryDeletedHandler})">
            <summary>
            
            </summary>
            <param name="mediator"></param>
            <param name="service"></param>
            <param name="storeService"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Events.Categories.CategoryDeletedHandler.Handle(Greta.BO.Api.Entities.Events.Internal.Categories.CategoryDeleted,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Events.Categories.CategoryUpdatedHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Events.Categories.CategoryUpdatedHandler.#ctor(MediatR.IMediator,Greta.BO.BusinessLogic.Service.IOnlineStoreService,Greta.BO.BusinessLogic.Service.IProductService,Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Events.Categories.CategoryUpdatedHandler})">
            <summary>
            
            </summary>
            <param name="mediator"></param>
            <param name="storeService"></param>
            <param name="productService"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Events.Categories.CategoryUpdatedHandler.Handle(Greta.BO.Api.Entities.Events.Internal.Categories.CategoryUpdated,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Events.OnlineStores.OnlineStoreCreatedHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Events.OnlineStores.OnlineStoreCreatedHandler.#ctor(MediatR.IMediator,Greta.BO.BusinessLogic.Service.IOnlineStoreService,Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Events.OnlineStores.OnlineStoreCreatedHandler})">
            <summary>
            
            </summary>
            <param name="mediator"></param>
            <param name="storeService"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Events.OnlineStores.OnlineStoreCreatedHandler.Handle(Greta.BO.Api.Entities.Events.Internal.OnlineStores.OnlineStoreCreated,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Events.OnlineStores.OnlineStoreDeletedHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Events.OnlineStores.OnlineStoreDeletedHandler.#ctor(MediatR.IMediator,Greta.BO.BusinessLogic.Service.IOnlineStoreService,Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Events.OnlineStores.OnlineStoreDeletedHandler})">
            <summary>
            
            </summary>
            <param name="mediator"></param>
            <param name="storeService"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Events.OnlineStores.OnlineStoreDeletedHandler.Handle(Greta.BO.Api.Entities.Events.Internal.OnlineStores.OnlineStoreDeleted,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Events.Products.ProductChangeStateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Events.Products.ProductChangeStateHandler.#ctor(MediatR.IMediator,Greta.BO.BusinessLogic.Service.IOnlineStoreService,Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Events.Products.ProductChangeStateHandler})">
            <summary>
            
            </summary>
            <param name="mediator"></param>
            <param name="storeService"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Events.Products.ProductChangeStateHandler.Handle(Greta.BO.Api.Entities.Events.Internal.Products.ProductChangeState,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Events.Products.ProductCreatedHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Events.Products.ProductCreatedHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Events.Products.ProductCreatedHandler},MediatR.IMediator,Greta.BO.BusinessLogic.Service.IOnlineStoreService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="mediator"></param>
            <param name="storeService"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Events.Products.ProductCreatedHandler.Handle(Greta.BO.Api.Entities.Events.Internal.Products.ProductCreated,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Events.Products.ProductDeletedHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Events.Products.ProductDeletedHandler.#ctor(MediatR.IMediator,Greta.BO.BusinessLogic.Service.IOnlineStoreService,Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Events.Products.ProductDeletedHandler})">
            <summary>
            
            </summary>
            <param name="mediator"></param>
            <param name="service"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Events.Products.ProductDeletedHandler.Handle(Greta.BO.Api.Entities.Events.Internal.Products.ProductDeleted,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Events.Products.ProductUpdatedHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Events.Products.ProductUpdatedHandler.#ctor(MediatR.IMediator,Greta.BO.BusinessLogic.Service.IOnlineStoreService,Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Events.Products.ProductUpdatedHandler})">
            <summary>
            
            </summary>
            <param name="mediator"></param>
            <param name="storeService"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Events.Products.ProductUpdatedHandler.Handle(Greta.BO.Api.Entities.Events.Internal.Products.ProductUpdated,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.AdBatch.AdBatchFilter">
            <summary>
               Get filter and paginate AdBatch
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalFilterQuery">
            <summary>
            Query for filter the Animal entities
            </summary>
            <param name="CurrentPage">Current page</param>
            <param name="PageSize">Current size</param>
            <param name="Filter">Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalFilterQuery.#ctor(System.Int32,System.Int32,Greta.BO.BusinessLogic.Models.Dto.Search.AnimalSearchModel)">
            <summary>
            Query for filter the Animal entities
            </summary>
            <param name="CurrentPage">Current page</param>
            <param name="PageSize">Current size</param>
            <param name="Filter">Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalFilterQuery.CurrentPage">
            <summary>Current page</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalFilterQuery.PageSize">
            <summary>Current size</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalFilterQuery.Filter">
            <summary>Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalFilterQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalFilterValidator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalFilterValidator.#ctor">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalFilterHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalFilterHandler.#ctor(Greta.BO.BusinessLogic.Service.IAnimalService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalFilterHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalFilterQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalFilterResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalGetAllQuery">
            <summary>
            Get all entities
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalGetAllQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalGetAllHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalGetAllHandler.#ctor(Greta.BO.BusinessLogic.Service.IAnimalService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalGetAllHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalGetAllQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalGetAllResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalGetByBreedQuery">
            <summary>
            Get entity by id
            </summary>
            <param name="breedId"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalGetByBreedQuery.#ctor(System.Int64)">
            <summary>
            Get entity by id
            </summary>
            <param name="breedId"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalGetByBreedQuery.breedId">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalGetByBreedQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalGetByBreedHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalGetByBreedHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalGetByBreedHandler},Greta.BO.BusinessLogic.Service.IAnimalService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalGetByBreedHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalGetByBreedQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalGetByBreedResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalGetByIdQuery">
            <summary>
            Get entity by id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalGetByIdQuery.#ctor(System.Int64)">
            <summary>
            Get entity by id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalGetByIdQuery.Id">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalGetByIdQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalGetByIdQuery.CacheKey">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalGetByIdHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalGetByIdHandler.#ctor(Greta.BO.BusinessLogic.Service.IAnimalService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalGetByIdHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalGetByIdQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalGetByIdResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalGetByRancherQuery">
            <summary>
            Get entity by rancherId
            </summary>
            <param name="rancherId"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalGetByRancherQuery.#ctor(System.Int64)">
            <summary>
            Get entity by rancherId
            </summary>
            <param name="rancherId"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalGetByRancherQuery.rancherId">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalGetByRancherQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalGetByRancherHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalGetByRancherHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalGetByRancherHandler},Greta.BO.BusinessLogic.Service.IAnimalService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalGetByRancherHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalGetByRancherQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalGetByRancherResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalGetSelectAnimalForDayQuery">
            <summary>
            Get entity by Model
            </summary>
            <param name="Model"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalGetSelectAnimalForDayQuery.#ctor(Greta.BO.BusinessLogic.Models.Dto.ValidateADayModel)">
            <summary>
            Get entity by Model
            </summary>
            <param name="Model"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalGetSelectAnimalForDayQuery.Model">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalGetSelectAnimalForDayQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalGetSelectAnimalForDayHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalGetSelectAnimalForDayHandler.#ctor(Greta.BO.BusinessLogic.Service.IAnimalService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalGetSelectAnimalForDayHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalGetSelectAnimalForDayQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalGetSelectAnimalForDayResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalValidateForDayQuery">
            <summary>
            Get entity by Model
            </summary>
            <param name="Model"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalValidateForDayQuery.#ctor(Greta.BO.BusinessLogic.Models.Dto.ValidateADayModel)">
            <summary>
            Get entity by Model
            </summary>
            <param name="Model"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalValidateForDayQuery.Model">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalValidateForDayQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalValidateForDayHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalValidateForDayHandler.#ctor(Greta.BO.BusinessLogic.Service.IAnimalService)">
            <summary>
            
            </summary>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalValidateForDayHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalValidateForDayQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Animal.AnimalValidateForDayResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Auth.AuthUserInfoQuery">
            <summary>
             This Command get the data for authenticate user  and call the identity service to get Base user data and return all this data to the user
            </summary>
            <param name="UserId"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Auth.AuthUserInfoQuery.#ctor(System.String)">
            <summary>
             This Command get the data for authenticate user  and call the identity service to get Base user data and return all this data to the user
            </summary>
            <param name="UserId"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Auth.AuthUserInfoQuery.UserId">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Auth.AuthUserInfoQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Auth.AuthUserInfoHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Auth.AuthUserInfoHandler.#ctor(Greta.Sdk.EFCore.Middleware.IAuthenticateUser{System.String},Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Queries.Auth.AuthUserInfoHandler},Greta.BO.BusinessLogic.Service.IBOUserService,Greta.BO.BusinessLogic.Service.IProfilesService,Greta.BO.BusinessLogic.Service.IPermissionService,AutoMapper.IMapper,Microsoft.Extensions.Configuration.IConfiguration,MassTransit.IRequestClient{Greta.Identity.Api.EventContracts.BO.User.UserGetInfoRequestContract})">
            <summary>
            
            </summary>
            <param name="authUser"></param>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="profilesService"></param>
            <param name="permissionService"></param>
            <param name="mapper"></param>
            <param name="configuration"></param>
            <param name="client"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Auth.AuthUserInfoHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Auth.AuthUserInfoQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Auth.AuthUserInfoResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Auth.BOUserDto">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Breed.BreedFilterQuery">
            <summary>
            Query for filter the Breed entities
            </summary>
            <param name="CurrentPage">Current page</param>
            <param name="PageSize">Current size</param>
            <param name="Filter">Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Breed.BreedFilterQuery.#ctor(System.Int32,System.Int32,Greta.BO.BusinessLogic.Models.Dto.Search.BreedSearchModel)">
            <summary>
            Query for filter the Breed entities
            </summary>
            <param name="CurrentPage">Current page</param>
            <param name="PageSize">Current size</param>
            <param name="Filter">Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Breed.BreedFilterQuery.CurrentPage">
            <summary>Current page</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Breed.BreedFilterQuery.PageSize">
            <summary>Current size</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Breed.BreedFilterQuery.Filter">
            <summary>Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Breed.BreedFilterQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Breed.BreedFilterValidator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Breed.BreedFilterValidator.#ctor">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Breed.BreedFilterHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Breed.BreedFilterHandler.#ctor(Greta.BO.BusinessLogic.Service.IBreedService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Breed.BreedFilterHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Breed.BreedFilterQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Breed.BreedFilterResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Breed.BreedGetAllQuery">
            <summary>
            Get all entities
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Breed.BreedGetAllQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Breed.BreedGetAllHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Breed.BreedGetAllHandler.#ctor(Greta.BO.BusinessLogic.Service.IBreedService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Breed.BreedGetAllHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Breed.BreedGetAllQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Breed.BreedGetAllResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Breed.BreedGetByIdQuery">
            <summary>
            Get entity by id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Breed.BreedGetByIdQuery.#ctor(System.Int64)">
            <summary>
            Get entity by id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Breed.BreedGetByIdQuery.Id">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Breed.BreedGetByIdQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Breed.BreedGetByIdQuery.CacheKey">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Breed.BreedGetByIdHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Breed.BreedGetByIdHandler.#ctor(Greta.BO.BusinessLogic.Service.IBreedService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Breed.BreedGetByIdHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Breed.BreedGetByIdQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Breed.BreedGetByIdResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Category.CategoryFilterQuery">
            <summary>
            Query for filter and paginate the category entities
            </summary>
            <param name="CurrentPage">Current page</param>
            <param name="PageSize">Current size</param>
            <param name="Filter">Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Category.CategoryFilterQuery.#ctor(System.Int32,System.Int32,Greta.BO.BusinessLogic.Models.Dto.Search.CategorySearchModel)">
            <summary>
            Query for filter and paginate the category entities
            </summary>
            <param name="CurrentPage">Current page</param>
            <param name="PageSize">Current size</param>
            <param name="Filter">Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Category.CategoryFilterQuery.CurrentPage">
            <summary>Current page</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Category.CategoryFilterQuery.PageSize">
            <summary>Current size</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Category.CategoryFilterQuery.Filter">
            <summary>Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Category.CategoryFilterQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Category.CategoryFilterValidator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Category.CategoryFilterValidator.#ctor">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Category.CategoryFilterHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Category.CategoryFilterHandler.#ctor(Greta.BO.BusinessLogic.Service.ICategoryService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Category.CategoryFilterHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Category.CategoryFilterQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Category.CategoryFilterResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Category.CategoryGetAllQuery">
            <summary>
            Get all entities
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Category.CategoryGetAllQuery.#ctor(System.Boolean)">
            <summary>
            Get all entities
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Category.CategoryGetAllQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Category.CategoryGetAllHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Category.CategoryGetAllHandler.#ctor(Greta.BO.BusinessLogic.Service.ICategoryService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Category.CategoryGetAllHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Category.CategoryGetAllQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Category.CategoryGetAllResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Category.CategoryGetByDepartmentQuery">
            <summary>
            Get entity by department
            </summary>
            <param name="Id">Department id</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Category.CategoryGetByDepartmentQuery.#ctor(System.Int64)">
            <summary>
            Get entity by department
            </summary>
            <param name="Id">Department id</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Category.CategoryGetByDepartmentQuery.Id">
            <summary>Department id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Category.CategoryGetByDepartmentQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Category.CategoryGetByDepartmentQuery.CacheKey">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Category.CategoryGetByDepartmentHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Category.CategoryGetByDepartmentHandler.#ctor(Greta.BO.BusinessLogic.Service.ICategoryService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Category.CategoryGetByDepartmentHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Category.CategoryGetByDepartmentQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Category.CategoryGetByDepartmentResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Category.CategoryGetByIdQuery">
            <summary>
            Get entity by id
            </summary>
            <param name="Id">Category id</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Category.CategoryGetByIdQuery.#ctor(System.Int64)">
            <summary>
            Get entity by id
            </summary>
            <param name="Id">Category id</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Category.CategoryGetByIdQuery.Id">
            <summary>Category id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Category.CategoryGetByIdQuery.Requirements">
            <summary>
            
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Category.CategoryGetByIdQuery.CacheKey">
            <summary>
            
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Category.CategoryGetByIdHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Category.CategoryGetByIdHandler.#ctor(Greta.BO.BusinessLogic.Service.ICategoryService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Category.CategoryGetByIdHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Category.CategoryGetByIdQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Category.CategoryGetByIdResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Customer.CustomerFilterQuery">
            <summary>
            Query for filter the Customer entities
            </summary>
            <param name="CurrentPage">Current page</param>
            <param name="PageSize">Current size</param>
            <param name="Filter">Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Customer.CustomerFilterQuery.#ctor(System.Int32,System.Int32,Greta.BO.BusinessLogic.Models.Dto.Search.CustomerSearchModel)">
            <summary>
            Query for filter the Customer entities
            </summary>
            <param name="CurrentPage">Current page</param>
            <param name="PageSize">Current size</param>
            <param name="Filter">Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Customer.CustomerFilterQuery.CurrentPage">
            <summary>Current page</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Customer.CustomerFilterQuery.PageSize">
            <summary>Current size</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Customer.CustomerFilterQuery.Filter">
            <summary>Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Customer.CustomerFilterQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Customer.CustomerFilterValidator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Customer.CustomerFilterValidator.#ctor">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Customer.CustomerFilterHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Customer.CustomerFilterHandler.#ctor(Greta.BO.BusinessLogic.Service.ICustomerService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Customer.CustomerFilterHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Customer.CustomerFilterQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Customer.CustomerFilterResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Customer.CustomerGetAllQuery">
            <summary>
            Get all entities
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Customer.CustomerGetAllQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Customer.CustomerGetAllHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Customer.CustomerGetAllHandler.#ctor(Greta.BO.BusinessLogic.Service.ICustomerService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Customer.CustomerGetAllHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Customer.CustomerGetAllQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Customer.CustomerGetAllResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Customer.CustomerGetByIdQuery">
            <summary>
            Get entity by id
            </summary>
            <param name="Id">Tax id</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Customer.CustomerGetByIdQuery.#ctor(System.Int64)">
            <summary>
            Get entity by id
            </summary>
            <param name="Id">Tax id</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Customer.CustomerGetByIdQuery.Id">
            <summary>Tax id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Customer.CustomerGetByIdQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Customer.CustomerGetByIdQuery.CacheKey">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Customer.CustomerGetByIdHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Customer.CustomerGetByIdHandler.#ctor(Greta.BO.BusinessLogic.Service.ICustomerService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Customer.CustomerGetByIdHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Customer.CustomerGetByIdQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Customer.CustomerGetByIdResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.CutListDetail.CutListDetailFilterQuery">
            <summary>
            Query for filter the CutListDetail entities
            </summary>
            <param name="Filter">Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.CutListDetail.CutListDetailFilterQuery.#ctor(Greta.BO.BusinessLogic.Models.Dto.Search.CutListDetailSearchModel)">
            <summary>
            Query for filter the CutListDetail entities
            </summary>
            <param name="Filter">Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.CutListDetail.CutListDetailFilterQuery.Filter">
            <summary>Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.CutListDetail.CutListDetailFilterQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.CutListDetail.CutListDetailFilterHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.CutListDetail.CutListDetailFilterHandler.#ctor(Greta.BO.BusinessLogic.Service.ICutListDetailService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.CutListDetail.CutListDetailFilterHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.CutListDetail.CutListDetailFilterQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.CutListDetail.CutListDetailFilterResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.CutListDetail.CutListDetailGetCutListDetailsQuery">
            <summary>
            Get CutListDetails by cutList
            </summary>
            <param name="CutListId">CutList id</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.CutListDetail.CutListDetailGetCutListDetailsQuery.#ctor(System.Int64)">
            <summary>
            Get CutListDetails by cutList
            </summary>
            <param name="CutListId">CutList id</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.CutListDetail.CutListDetailGetCutListDetailsQuery.CutListId">
            <summary>CutList id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.CutListDetail.CutListDetailGetCutListDetailsQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.CutListDetail.CutListDetailGetCutListDetailsQuery.CacheKey">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.CutListDetail.CutListDetailGetCutListDetailsHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.CutListDetail.CutListDetailGetCutListDetailsHandler.#ctor(Greta.BO.BusinessLogic.Service.ICutListService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.CutListDetail.CutListDetailGetCutListDetailsHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.CutListDetail.CutListDetailGetCutListDetailsQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.CutListDetail.CutListDetailGetCutListDetailsResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.CutListTemplate.CutListTemplateFilterQuery">
            <summary>
            Query for filter the family entities
            </summary>
            <param name="CurrentPage">Current page</param>
            <param name="PageSize">Current size</param>
            <param name="Filter">Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.CutListTemplate.CutListTemplateFilterQuery.#ctor(System.Int32,System.Int32,Greta.BO.BusinessLogic.Models.Dto.Search.CutListTemplateSearchModel)">
            <summary>
            Query for filter the family entities
            </summary>
            <param name="CurrentPage">Current page</param>
            <param name="PageSize">Current size</param>
            <param name="Filter">Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.CutListTemplate.CutListTemplateFilterQuery.CurrentPage">
            <summary>Current page</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.CutListTemplate.CutListTemplateFilterQuery.PageSize">
            <summary>Current size</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.CutListTemplate.CutListTemplateFilterQuery.Filter">
            <summary>Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.CutListTemplate.CutListTemplateFilterQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.CutListTemplate.CutListTemplateFilterValidator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.CutListTemplate.CutListTemplateFilterValidator.#ctor">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.CutListTemplate.CutListTemplateFilterHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.CutListTemplate.CutListTemplateFilterHandler.#ctor(Greta.BO.BusinessLogic.Service.ICutListTemplateService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.CutListTemplate.CutListTemplateFilterHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.CutListTemplate.CutListTemplateFilterQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.CutListTemplate.CutListTemplateFilterResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.CutListTemplate.CutListTemplateGetAllQuery">
            <summary>
            Get all entities
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.CutListTemplate.CutListTemplateGetAllQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.CutListTemplate.CutListTemplateGetAllHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.CutListTemplate.CutListTemplateGetAllHandler.#ctor(Greta.BO.BusinessLogic.Service.ICutListTemplateService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.CutListTemplate.CutListTemplateGetAllHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.CutListTemplate.CutListTemplateGetAllQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.CutListTemplate.CutListTemplateGetAllResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.CutListTemplate.CutListTemplateGetByIdQuery">
            <summary>
            Get entity by id
            </summary>
            <param name="Id">Tax id</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.CutListTemplate.CutListTemplateGetByIdQuery.#ctor(System.Int64)">
            <summary>
            Get entity by id
            </summary>
            <param name="Id">Tax id</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.CutListTemplate.CutListTemplateGetByIdQuery.Id">
            <summary>Tax id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.CutListTemplate.CutListTemplateGetByIdQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.CutListTemplate.CutListTemplateGetByIdQuery.CacheKey">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.CutListTemplate.CutListTemplateGetByIdHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.CutListTemplate.CutListTemplateGetByIdHandler.#ctor(Greta.BO.BusinessLogic.Service.ICutListTemplateService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.CutListTemplate.CutListTemplateGetByIdHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.CutListTemplate.CutListTemplateGetByIdQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.CutListTemplate.CutListTemplateGetByIdResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.CutList.CutListGetCustomerByAnimalQuery">
            <summary>
            Get customers by animal
            </summary>
            <param name="AnimalId">Animal id</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.CutList.CutListGetCustomerByAnimalQuery.#ctor(System.Int64)">
            <summary>
            Get customers by animal
            </summary>
            <param name="AnimalId">Animal id</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.CutList.CutListGetCustomerByAnimalQuery.AnimalId">
            <summary>Animal id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.CutList.CutListGetCustomerByAnimalQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.CutList.CutListGetCustomerByAnimalQuery.CacheKey">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.CutList.CutListGetCustomerByAnimalHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.CutList.CutListGetCustomerByAnimalHandler.#ctor(Greta.BO.BusinessLogic.Service.ICutListService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.CutList.CutListGetCustomerByAnimalHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.CutList.CutListGetCustomerByAnimalQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.CutList.CutListGetCustomerByAnimalResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.CutList.CutListGetCutListQuery">
            <summary>
            Get CutList by animal and customer
            </summary>
            <param name="AnimalId">Animal id</param>
            <param name="CustomerId">Customer id</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.CutList.CutListGetCutListQuery.#ctor(System.Int64,System.Int64,System.Boolean)">
            <summary>
            Get CutList by animal and customer
            </summary>
            <param name="AnimalId">Animal id</param>
            <param name="CustomerId">Customer id</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.CutList.CutListGetCutListQuery.AnimalId">
            <summary>Animal id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.CutList.CutListGetCutListQuery.CustomerId">
            <summary>Customer id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.CutList.CutListGetCutListQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.CutList.CutListGetCutListQuery.CacheKey">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.CutList.CutListGetCutListHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.CutList.CutListGetCutListHandler.#ctor(Greta.BO.BusinessLogic.Service.ICutListService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.CutList.CutListGetCutListHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.CutList.CutListGetCutListQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.CutList.CutListGetCutListResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.CutList.CutListGetScaleProductByUpcAndPluQuery">
            <summary>
            Get ScaleProduct by upc and plu
            </summary>
            <param name="Upc"></param>
            <param name="Plu"></param>
            <param name="AnimalId">id of Animal selected</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.CutList.CutListGetScaleProductByUpcAndPluQuery.#ctor(System.String,System.Int32,System.Int64)">
            <summary>
            Get ScaleProduct by upc and plu
            </summary>
            <param name="Upc"></param>
            <param name="Plu"></param>
            <param name="AnimalId">id of Animal selected</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.CutList.CutListGetScaleProductByUpcAndPluQuery.Upc">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.CutList.CutListGetScaleProductByUpcAndPluQuery.Plu">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.CutList.CutListGetScaleProductByUpcAndPluQuery.AnimalId">
            <summary>id of Animal selected</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.CutList.CutListGetScaleProductByUpcAndPluQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.CutList.CutListGetScaleProductByUpcAndPluHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.CutList.CutListGetScaleProductByUpcAndPluHandler.#ctor(Greta.BO.BusinessLogic.Service.ICutListService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.CutList.CutListGetScaleProductByUpcAndPluHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.CutList.CutListGetScaleProductByUpcAndPluQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.CutList.CutListGetScaleProductByUpcAndPluResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.CutList.CutListGetScaleProductOfTemplateQuery">
            <summary>
            Get ScaleProduct by upc and plu
            </summary>
            <param name="CutListTemplateId"></param>
            <param name="AnimalId">Animal Id</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.CutList.CutListGetScaleProductOfTemplateQuery.#ctor(System.Int64,System.Int64)">
            <summary>
            Get ScaleProduct by upc and plu
            </summary>
            <param name="CutListTemplateId"></param>
            <param name="AnimalId">Animal Id</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.CutList.CutListGetScaleProductOfTemplateQuery.CutListTemplateId">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.CutList.CutListGetScaleProductOfTemplateQuery.AnimalId">
            <summary>Animal Id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.CutList.CutListGetScaleProductOfTemplateQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.CutList.CutListGetScaleProductOfTemplateHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.CutList.CutListGetScaleProductOfTemplateHandler.#ctor(Greta.BO.BusinessLogic.Service.ICutListService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.CutList.CutListGetScaleProductOfTemplateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.CutList.CutListGetScaleProductOfTemplateQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.CutList.CutListGetScaleProductOfTemplateResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Department.DepartmentFilterQuery">
            <summary>
            Query for filter the department entities
            </summary>
            <param name="CurrentPage">Current page</param>
            <param name="PageSize">Current size</param>
            <param name="Filter">Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Department.DepartmentFilterQuery.#ctor(System.Int32,System.Int32,Greta.BO.BusinessLogic.Models.Dto.Search.DepartmentSearchModel)">
            <summary>
            Query for filter the department entities
            </summary>
            <param name="CurrentPage">Current page</param>
            <param name="PageSize">Current size</param>
            <param name="Filter">Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Department.DepartmentFilterQuery.CurrentPage">
            <summary>Current page</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Department.DepartmentFilterQuery.PageSize">
            <summary>Current size</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Department.DepartmentFilterQuery.Filter">
            <summary>Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Department.DepartmentFilterQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Department.DepartmentFilterValidator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Department.DepartmentFilterValidator.#ctor">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Department.DepartmentFilterHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Department.DepartmentFilterHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Queries.Department.DepartmentFilterHandler},Greta.BO.BusinessLogic.Service.IDepartmentService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Department.DepartmentFilterHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Department.DepartmentFilterQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Department.DepartmentFilterResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Department.DepartmentGetAllQuery">
            <summary>
            Get all entities
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Department.DepartmentGetAllQuery.#ctor(System.Boolean)">
            <summary>
            Get all entities
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Department.DepartmentGetAllQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Department.DepartmentGetAllHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Department.DepartmentGetAllHandler.#ctor(Greta.BO.BusinessLogic.Service.IDepartmentService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Department.DepartmentGetAllHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Department.DepartmentGetAllQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Department.DepartmentGetAllResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Department.DepartmentGetAllDto">
            <inheritdoc />
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Department.DepartmentGetAllDto.Id">
            <summary>
            
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Department.DepartmentGetAllDto.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Department.DepartmentGetAllDto.DepartmentId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Department.DepartmentGetAllDto.Perishable">
            <summary>
            
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Department.DepartmentGetByIdQuery">
            <summary>
            Get entity by id
            </summary>
            <param name="Id">Department id</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Department.DepartmentGetByIdQuery.#ctor(System.Int64)">
            <summary>
            Get entity by id
            </summary>
            <param name="Id">Department id</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Department.DepartmentGetByIdQuery.Id">
            <summary>Department id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Department.DepartmentGetByIdQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Department.DepartmentGetByIdQuery.CacheKey">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Department.DepartmentGetByIdHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Department.DepartmentGetByIdHandler.#ctor(Greta.BO.BusinessLogic.Service.IDepartmentService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Department.DepartmentGetByIdHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Department.DepartmentGetByIdQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Department.DepartmentGetByIdResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Department.DepartmentGetPerishablesQuery">
            <summary>
            Get entity by id
            </summary>
            <param name="Perishable">Bool value</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Department.DepartmentGetPerishablesQuery.#ctor(System.Boolean)">
            <summary>
            Get entity by id
            </summary>
            <param name="Perishable">Bool value</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Department.DepartmentGetPerishablesQuery.Perishable">
            <summary>Bool value</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Department.DepartmentGetPerishablesQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Department.DepartmentGetPerishablesHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Department.DepartmentGetPerishablesHandler.#ctor(Greta.BO.BusinessLogic.Service.IDepartmentService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Department.DepartmentGetPerishablesHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Department.DepartmentGetPerishablesQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Department.DepartmentGetPerishablesResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Device.DeviceFilterQuery">
            <summary>
            Query for filter the Device entities
            </summary>
            <param name="Storeid">Store id</param>
            <param name="CurrentPage">Current page</param>
            <param name="PageSize">Current size</param>
            <param name="Filter">Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Device.DeviceFilterQuery.#ctor(System.Nullable{System.Int64},System.Int32,System.Int32,Greta.BO.BusinessLogic.Models.Dto.Search.DeviceSearchModel)">
            <summary>
            Query for filter the Device entities
            </summary>
            <param name="Storeid">Store id</param>
            <param name="CurrentPage">Current page</param>
            <param name="PageSize">Current size</param>
            <param name="Filter">Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Device.DeviceFilterQuery.Storeid">
            <summary>Store id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Device.DeviceFilterQuery.CurrentPage">
            <summary>Current page</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Device.DeviceFilterQuery.PageSize">
            <summary>Current size</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Device.DeviceFilterQuery.Filter">
            <summary>Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Device.DeviceFilterQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Device.DeviceFilterResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Device.DeviceFilterValidator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Device.DeviceFilterValidator.#ctor">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Device.DeviceFilterHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Device.DeviceFilterHandler.#ctor(Greta.BO.BusinessLogic.Service.IDeviceService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Device.DeviceFilterHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Device.DeviceFilterQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Device.DeviceGetAllQuery">
            <summary>
            Get all entities
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Device.DeviceGetAllQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Device.DeviceGetAllHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Device.DeviceGetAllHandler.#ctor(Greta.BO.BusinessLogic.Service.IDeviceService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Device.DeviceGetAllHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Device.DeviceGetAllQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Device.DeviceGetAllResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Device.DeviceGetByIdQuery">
            <summary>
            Get entity by id
            </summary>
            <param name="Id">Device id</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Device.DeviceGetByIdQuery.#ctor(System.Int64)">
            <summary>
            Get entity by id
            </summary>
            <param name="Id">Device id</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Device.DeviceGetByIdQuery.Id">
            <summary>Device id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Device.DeviceGetByIdQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Device.DeviceGetByIdQuery.CacheKey">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Device.DeviceGetByIdHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Device.DeviceGetByIdHandler.#ctor(Greta.BO.BusinessLogic.Service.IDeviceService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Device.DeviceGetByIdHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Device.DeviceGetByIdQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Device.DeviceGetByIdResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Device.DeviceGetSynchronizationStatusById">
            <summary>
            Get entity device get synchronization status by id
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Device.DeviceGetSynchronizationStatusById.DeviceGetSynchronizationStatusByIdQuery">
            <summary>
            </summary>
            <param name="Id">Store Id</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Device.DeviceGetSynchronizationStatusById.DeviceGetSynchronizationStatusByIdQuery.#ctor(System.Int64)">
            <summary>
            </summary>
            <param name="Id">Store Id</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Device.DeviceGetSynchronizationStatusById.DeviceGetSynchronizationStatusByIdQuery.Id">
            <summary>Store Id</summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Device.DeviceGetSynchronizationStatusById.DeviceGetSynchronizationStatusByIdHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Device.DeviceGetSynchronizationStatusById.DeviceGetSynchronizationStatusByIdHandler.#ctor(Greta.BO.BusinessLogic.Service.IDeviceService)">
            <summary>
            
            </summary>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Device.DeviceGetSynchronizationStatusById.DeviceGetSynchronizationStatusByIdHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Device.DeviceGetSynchronizationStatusById.DeviceGetSynchronizationStatusByIdQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Device.DeviceGetSynchronizationStatusById.DeviceGetSynchronizationStatusByIdResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Device.GetDevicesConnectedByStore">
            <summary>
            Get entity by id
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Device.GetDevicesConnectedByStore.DeviceGetDevicesConnectedByStoreQuery">
            <summary>
            </summary>
            <param name="StoreId">Store Id</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Device.GetDevicesConnectedByStore.DeviceGetDevicesConnectedByStoreQuery.#ctor(System.Int64)">
            <summary>
            </summary>
            <param name="StoreId">Store Id</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Device.GetDevicesConnectedByStore.DeviceGetDevicesConnectedByStoreQuery.StoreId">
            <summary>Store Id</summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Device.GetDevicesConnectedByStore.GetDevicesConnectedByStoreHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Device.GetDevicesConnectedByStore.GetDevicesConnectedByStoreHandler.#ctor(Greta.BO.BusinessLogic.Service.IDeviceService)">
            <summary>
            
            </summary>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Device.GetDevicesConnectedByStore.GetDevicesConnectedByStoreHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Device.GetDevicesConnectedByStore.DeviceGetDevicesConnectedByStoreQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Discount.DiscountFilterQuery">
            <summary>
            Query for filter the Discount entities
            </summary>
            <param name="CurrentPage">Current page</param>
            <param name="PageSize">Current size</param>
            <param name="Filter">Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Discount.DiscountFilterQuery.#ctor(System.Int32,System.Int32,Greta.BO.BusinessLogic.Models.Dto.Search.DiscountSearchModel)">
            <summary>
            Query for filter the Discount entities
            </summary>
            <param name="CurrentPage">Current page</param>
            <param name="PageSize">Current size</param>
            <param name="Filter">Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Discount.DiscountFilterQuery.CurrentPage">
            <summary>Current page</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Discount.DiscountFilterQuery.PageSize">
            <summary>Current size</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Discount.DiscountFilterQuery.Filter">
            <summary>Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Discount.DiscountFilterQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Discount.DiscountFilterValidator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Discount.DiscountFilterValidator.#ctor">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Discount.DiscountFilterHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Discount.DiscountFilterHandler.#ctor(Greta.BO.BusinessLogic.Service.IDiscountService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Discount.DiscountFilterHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Discount.DiscountFilterQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Discount.DiscountFilterResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Discount.DiscountGetAllQuery">
            <summary>
            Query for get all Discount entities
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Discount.DiscountGetAllQuery.Requirements">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Discount.DiscountGetAllHandler">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Discount.DiscountGetAllHandler.#ctor(Greta.BO.BusinessLogic.Service.IDiscountService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Discount.DiscountGetAllHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Discount.DiscountGetAllQuery,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Discount.DiscountGetAllResponse">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Discount.DiscountGetByIdQuery">
            <summary>
            Get entity by id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Discount.DiscountGetByIdQuery.#ctor(System.Int64)">
            <summary>
            Get entity by id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Discount.DiscountGetByIdQuery.Id">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Discount.DiscountGetByIdQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Discount.DiscountGetByIdHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Discount.DiscountGetByIdHandler.#ctor(Greta.BO.BusinessLogic.Service.IDiscountService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Discount.DiscountGetByIdHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Discount.DiscountGetByIdQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Discount.DiscountGetByIdResponse">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Employee.EmployeeNotificationFromDeviceHandler.#ctor(Greta.BO.BusinessLogic.Service.IDeviceService,MediatR.IMediator)">
            <summary>
            ClockInHandler
            </summary>
            <param name="deviceService"></param>
            <param name="mediator"></param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Employee.EmployeeNotificationsQuery">
            <summary>
            Get All employee notifications 
            </summary>
            <param name="StoreId"></param>
            <param name="EmployeeId"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Employee.EmployeeNotificationsQuery.#ctor(System.Int64,System.Int64)">
            <summary>
            Get All employee notifications 
            </summary>
            <param name="StoreId"></param>
            <param name="EmployeeId"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Employee.EmployeeNotificationsQuery.StoreId">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Employee.EmployeeNotificationsQuery.EmployeeId">
            <summary></summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Employee.EmployeeNotificationsResponse">
            <summary>
            Get All employee notifications response
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Employee.EmployeeNotificationsHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Employee.EmployeeNotificationsHandler.#ctor(Greta.BO.BusinessLogic.Service.ISaleService,Greta.BO.BusinessLogic.Service.ITimeKeepingService)">
            <summary>
            
            </summary>
            <param name="saleService"></param>
            <param name="timeKeepingService"></param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.ExternalScale.ExternalScaleFilterQuery">
            <summary>
            Query for filter the ExternalScale entities
            </summary>
            <param name="CurrentPage">Current page</param>
            <param name="PageSize">Current size</param>
            <param name="Filter">Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.ExternalScale.ExternalScaleFilterQuery.#ctor(System.Int32,System.Int32,Greta.BO.BusinessLogic.Models.Dto.Search.ExternalScaleSearchModel)">
            <summary>
            Query for filter the ExternalScale entities
            </summary>
            <param name="CurrentPage">Current page</param>
            <param name="PageSize">Current size</param>
            <param name="Filter">Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.ExternalScale.ExternalScaleFilterQuery.CurrentPage">
            <summary>Current page</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.ExternalScale.ExternalScaleFilterQuery.PageSize">
            <summary>Current size</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.ExternalScale.ExternalScaleFilterQuery.Filter">
            <summary>Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.ExternalScale.ExternalScaleFilterQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.ExternalScale.ExternalScaleFilterValidator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.ExternalScale.ExternalScaleFilterValidator.#ctor">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.ExternalScale.ExternalScaleFilterHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.ExternalScale.ExternalScaleFilterHandler.#ctor(Greta.BO.BusinessLogic.Service.IExternalScaleService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.ExternalScale.ExternalScaleFilterHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.ExternalScale.ExternalScaleFilterQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.ExternalScale.ExternalScaleFilterResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.ExternalScale.ExternalScaleGetByIdQuery">
            <summary>
            Get entity by id
            </summary>
            <param name="Id">Tax id</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.ExternalScale.ExternalScaleGetByIdQuery.#ctor(System.Int64)">
            <summary>
            Get entity by id
            </summary>
            <param name="Id">Tax id</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.ExternalScale.ExternalScaleGetByIdQuery.Id">
            <summary>Tax id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.ExternalScale.ExternalScaleGetByIdQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.ExternalScale.ExternalScaleGetByIdQuery.CacheKey">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.ExternalScale.ExternalScaleGetByIdHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.ExternalScale.ExternalScaleGetByIdHandler.#ctor(Greta.BO.BusinessLogic.Service.IExternalScaleService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.ExternalScale.ExternalScaleGetByIdHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.ExternalScale.ExternalScaleGetByIdQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.ExternalScale.ExternalScaleGetByIdResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.ExternalScale.ExternalScaleGetByStoreQuery">
            <summary>
            Get entity by storeId
            </summary>
            <param name="StoreId">Tax id</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.ExternalScale.ExternalScaleGetByStoreQuery.#ctor(System.Int64)">
            <summary>
            Get entity by storeId
            </summary>
            <param name="StoreId">Tax id</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.ExternalScale.ExternalScaleGetByStoreQuery.StoreId">
            <summary>Tax id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.ExternalScale.ExternalScaleGetByStoreQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.ExternalScale.ExternalScaleGetByStoreQuery.CacheKey">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.ExternalScale.ExternalScaleGetByStoreHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.ExternalScale.ExternalScaleGetByStoreHandler.#ctor(Greta.BO.BusinessLogic.Service.IExternalScaleService,AutoMapper.IMapper)">
            <summary>
            Get entity by storeId
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.ExternalScale.ExternalScaleGetByStoreHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.ExternalScale.ExternalScaleGetByStoreQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.ExternalScale.ExternalScaleGetByStoreResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Family.FamilyFilterQuery">
            <summary>
            Query for filter the family entities
            </summary>
            <param name="CurrentPage">Current page</param>
            <param name="PageSize">Current size</param>
            <param name="Filter">Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Family.FamilyFilterQuery.#ctor(System.Int32,System.Int32,Greta.BO.BusinessLogic.Models.Dto.Search.FamilySearchModel)">
            <summary>
            Query for filter the family entities
            </summary>
            <param name="CurrentPage">Current page</param>
            <param name="PageSize">Current size</param>
            <param name="Filter">Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Family.FamilyFilterQuery.CurrentPage">
            <summary>Current page</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Family.FamilyFilterQuery.PageSize">
            <summary>Current size</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Family.FamilyFilterQuery.Filter">
            <summary>Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Family.FamilyFilterQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Family.FamilyFilterValidator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Family.FamilyFilterValidator.#ctor">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Family.FamilyFilterHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Family.FamilyFilterHandler.#ctor(Greta.BO.BusinessLogic.Service.IFamilyService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Family.FamilyFilterHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Family.FamilyFilterQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Family.FamilyFilterResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Family.FamilyGetAllQuery">
            <summary>
            Get all entities
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Family.FamilyGetAllQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Family.FamilyGetAllHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Family.FamilyGetAllHandler.#ctor(Greta.BO.BusinessLogic.Service.IFamilyService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Family.FamilyGetAllHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Family.FamilyGetAllQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Family.FamilyGetAllResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Family.FamilyGetByIdQuery">
            <summary>
            Get entity by id
            </summary>
            <param name="Id">Tax id</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Family.FamilyGetByIdQuery.#ctor(System.Int64)">
            <summary>
            Get entity by id
            </summary>
            <param name="Id">Tax id</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Family.FamilyGetByIdQuery.Id">
            <summary>Tax id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Family.FamilyGetByIdQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Family.FamilyGetByIdQuery.CacheKey">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Family.FamilyGetByIdHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Family.FamilyGetByIdHandler.#ctor(Greta.BO.BusinessLogic.Service.IFamilyService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Family.FamilyGetByIdHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Family.FamilyGetByIdQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Family.FamilyGetByIdResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Family.FamilyProductsFilterQuery">
            <summary>
            Query for filter the Tax entities
            </summary>
            <param name="CurrentPage">Current page</param>
            <param name="PageSize">Current size</param>
            <param name="Filter">Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Family.FamilyProductsFilterQuery.#ctor(System.Int32,System.Int32,Greta.BO.BusinessLogic.Models.Dto.Search.FamilySearchModel)">
            <summary>
            Query for filter the Tax entities
            </summary>
            <param name="CurrentPage">Current page</param>
            <param name="PageSize">Current size</param>
            <param name="Filter">Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Family.FamilyProductsFilterQuery.CurrentPage">
            <summary>Current page</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Family.FamilyProductsFilterQuery.PageSize">
            <summary>Current size</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Family.FamilyProductsFilterQuery.Filter">
            <summary>Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Family.FamilyProductsFilterQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Family.FamilyProductsValidator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Family.FamilyProductsValidator.#ctor">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Family.FamilyProductsHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Family.FamilyProductsHandler.#ctor(Greta.BO.BusinessLogic.Service.IFamilyService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Family.FamilyProductsHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Family.FamilyProductsFilterQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Family.FamilyProductsResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Family.ProductFilterNotIncludedInFamilyQuery">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Family.ProductFilterNotIncludedInFamilyQuery.#ctor(System.Int64,System.Int32,System.Int32,Greta.BO.BusinessLogic.Models.Dto.Search.ProductSearchModel)">
            <inheritdoc />
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Family.ProductFilterNotIncludedInFamilyQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Family.ProductFilterNotIncludedInFamilyValidator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Family.ProductFilterNotIncludedInFamilyValidator.#ctor">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Family.ProductFilterNotIncludedInFamilyHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Family.ProductFilterNotIncludedInFamilyHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Queries.Family.ProductFilterNotIncludedInFamilyHandler},Greta.BO.BusinessLogic.Service.IProductService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Family.ProductFilterNotIncludedInFamilyHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Family.ProductFilterNotIncludedInFamilyQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Family.ProductFilterNotIncludedInFamilyResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Fee.FeeFilterQuery">
            <summary>
            Query for filter an paginate Fee
            </summary>
            <param name="CurrentPage"></param>
            <param name="PageSize"></param>
            <param name="Filter"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Fee.FeeFilterQuery.#ctor(System.Int32,System.Int32,Greta.BO.BusinessLogic.Models.Dto.Search.FeeSearchModel)">
            <summary>
            Query for filter an paginate Fee
            </summary>
            <param name="CurrentPage"></param>
            <param name="PageSize"></param>
            <param name="Filter"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Fee.FeeFilterQuery.CurrentPage">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Fee.FeeFilterQuery.PageSize">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Fee.FeeFilterQuery.Filter">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Fee.FeeFilterQuery.Requirements">
            <summary>
            
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Fee.FeeFilterValidator">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Fee.FeeFilterValidator.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Fee.FeeFilterHandler">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Fee.FeeFilterHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Queries.Fee.FeeFilterHandler},Greta.BO.BusinessLogic.Service.IFeeService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Fee.FeeFilterHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Fee.FeeFilterQuery,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException"></exception>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Fee.FeeFilterResponse">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Fee.FeeGetAllQuery">
            <summary>
            Query for get all fees
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Fee.FeeGetAllQuery.Requirements">
            <summary>
            
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Fee.FeeGetAllHandler">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Fee.FeeGetAllHandler.#ctor(Greta.BO.BusinessLogic.Service.IFeeService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Fee.FeeGetAllHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Fee.FeeGetAllQuery,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Fee.FeeGetAllResponse">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Fee.FeeGetByIdQuery">
            <summary>
            Query for get Fee by id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Fee.FeeGetByIdQuery.#ctor(System.Int64)">
            <summary>
            Query for get Fee by id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Fee.FeeGetByIdQuery.Id">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Fee.FeeGetByIdQuery.Requirements">
            <summary>
            
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Fee.FeeGetByIdQuery.CacheKey">
            <summary>
            
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Fee.FeeGetByIdHandler">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Fee.FeeGetByIdHandler.#ctor(Greta.BO.BusinessLogic.Service.IFeeService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Fee.FeeGetByIdHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Fee.FeeGetByIdQuery,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Fee.FeeGetByIdResponse">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.FunctionGroup.FunctionGroupGetAllQuery">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="applicationId"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.FunctionGroup.FunctionGroupGetAllQuery.#ctor(System.Int64)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="applicationId"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.FunctionGroup.FunctionGroupGetAllQuery.applicationId">
            <summary></summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.FunctionGroup.FunctionGroupGetAllHandler">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.FunctionGroup.FunctionGroupGetAllHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Queries.FunctionGroup.FunctionGroupGetAllHandler},Greta.BO.BusinessLogic.Service.IFunctionGroupService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.FunctionGroup.FunctionGroupGetAllHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.FunctionGroup.FunctionGroupGetAllQuery,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.FunctionGroup.FunctionGroupGetAllResponse">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Grind.GrindFilterQuery">
            <summary>
            Query for filter the Grind entities
            </summary>
            <param name="CurrentPage">Current page</param>
            <param name="PageSize">Current size</param>
            <param name="Filter">Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Grind.GrindFilterQuery.#ctor(System.Int32,System.Int32,Greta.BO.BusinessLogic.Models.Dto.Search.GrindSearchModel)">
            <summary>
            Query for filter the Grind entities
            </summary>
            <param name="CurrentPage">Current page</param>
            <param name="PageSize">Current size</param>
            <param name="Filter">Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Grind.GrindFilterQuery.CurrentPage">
            <summary>Current page</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Grind.GrindFilterQuery.PageSize">
            <summary>Current size</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Grind.GrindFilterQuery.Filter">
            <summary>Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Grind.GrindFilterQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Grind.GrindFilterValidator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Grind.GrindFilterValidator.#ctor">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Grind.GrindFilterHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Grind.GrindFilterHandler.#ctor(Greta.BO.BusinessLogic.Service.IGrindService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Grind.GrindFilterHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Grind.GrindFilterQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Grind.GrindFilterResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Grind.GrindGetAllQuery">
            <summary>
            Get all entities
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Grind.GrindGetAllQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Grind.GrindGetAllHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Grind.GrindGetAllHandler.#ctor(Greta.BO.BusinessLogic.Service.IGrindService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Grind.GrindGetAllHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Grind.GrindGetAllQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Grind.GrindGetAllResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Grind.GrindGetByIdQuery">
            <summary>
            Get entity by id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Grind.GrindGetByIdQuery.#ctor(System.Int64)">
            <summary>
            Get entity by id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Grind.GrindGetByIdQuery.Id">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Grind.GrindGetByIdQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Grind.GrindGetByIdQuery.CacheKey">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Grind.GrindGetByIdHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Grind.GrindGetByIdHandler.#ctor(Greta.BO.BusinessLogic.Service.IGrindService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Grind.GrindGetByIdHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Grind.GrindGetByIdQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Grind.GrindGetByIdResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.InventoryQueries.InventoryFilterQuery">
            <summary>
            Query for filter and paginate Inventory
            </summary>
            <param name="StoreId"></param>
            <param name="CurrentPage"></param>
            <param name="PageSize"></param>
            <param name="Filter"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.InventoryQueries.InventoryFilterQuery.#ctor(System.Int64,System.Int32,System.Int32,Greta.BO.BusinessLogic.Models.Dto.Search.InventorySearchModel)">
            <summary>
            Query for filter and paginate Inventory
            </summary>
            <param name="StoreId"></param>
            <param name="CurrentPage"></param>
            <param name="PageSize"></param>
            <param name="Filter"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.InventoryQueries.InventoryFilterQuery.StoreId">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.InventoryQueries.InventoryFilterQuery.CurrentPage">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.InventoryQueries.InventoryFilterQuery.PageSize">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.InventoryQueries.InventoryFilterQuery.Filter">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.InventoryQueries.InventoryFilterQuery.Requirements">
            <summary>
            
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.InventoryQueries.InventoryFilterValidator">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.InventoryQueries.InventoryFilterValidator.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.InventoryQueries.InventoryFilterHandler">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.InventoryQueries.InventoryFilterHandler.#ctor(Greta.BO.BusinessLogic.Service.IStoreProductService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.InventoryQueries.InventoryFilterHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.InventoryQueries.InventoryFilterQuery,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException"></exception>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.InventoryQueries.InventoryFilterResponse">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.InventoryQueries.InventorySuggestedFilterQuery">
            <summary>
            Query for suggested filter and paginate Inventory 
            </summary>
            <param name="StoreId"></param>
            <param name="VendorId"></param>
            <param name="CurrentPage"></param>
            <param name="PageSize"></param>
            <param name="Filter"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.InventoryQueries.InventorySuggestedFilterQuery.#ctor(System.Int64,System.Int64,System.Int32,System.Int32,Greta.BO.BusinessLogic.Models.Dto.Search.InventorySearchModel)">
            <summary>
            Query for suggested filter and paginate Inventory 
            </summary>
            <param name="StoreId"></param>
            <param name="VendorId"></param>
            <param name="CurrentPage"></param>
            <param name="PageSize"></param>
            <param name="Filter"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.InventoryQueries.InventorySuggestedFilterQuery.StoreId">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.InventoryQueries.InventorySuggestedFilterQuery.VendorId">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.InventoryQueries.InventorySuggestedFilterQuery.CurrentPage">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.InventoryQueries.InventorySuggestedFilterQuery.PageSize">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.InventoryQueries.InventorySuggestedFilterQuery.Filter">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.InventoryQueries.InventorySuggestedFilterQuery.Requirements">
            <summary>
            
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.InventoryQueries.InventorySuggestedFilterValidator">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.InventoryQueries.InventorySuggestedFilterValidator.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.InventoryQueries.InventorySuggestedFilterHandler">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.InventoryQueries.InventorySuggestedFilterHandler.#ctor(Greta.BO.BusinessLogic.Service.IStoreProductService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.InventoryQueries.InventorySuggestedFilterHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.InventoryQueries.InventorySuggestedFilterQuery,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException"></exception>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.InventoryQueries.InventorySuggestedFilterResponse">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.LoyaltyDiscount.LoyaltyDiscountFilterQuery">
            <summary>
            Query for filter and paginate LoyaltyDiscount
            </summary>
            <param name="CurrentPage"></param>
            <param name="PageSize"></param>
            <param name="Filter"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.LoyaltyDiscount.LoyaltyDiscountFilterQuery.#ctor(System.Int32,System.Int32,Greta.BO.BusinessLogic.Models.Dto.Search.LoyaltyDiscountSearchModel)">
            <summary>
            Query for filter and paginate LoyaltyDiscount
            </summary>
            <param name="CurrentPage"></param>
            <param name="PageSize"></param>
            <param name="Filter"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.LoyaltyDiscount.LoyaltyDiscountFilterQuery.CurrentPage">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.LoyaltyDiscount.LoyaltyDiscountFilterQuery.PageSize">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.LoyaltyDiscount.LoyaltyDiscountFilterQuery.Filter">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.LoyaltyDiscount.LoyaltyDiscountFilterQuery.Requirements">
            <summary>
            
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.LoyaltyDiscount.LoyaltyDiscountFilterValidator">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.LoyaltyDiscount.LoyaltyDiscountFilterValidator.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.LoyaltyDiscount.LoyaltyDiscountFilterHandler">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.LoyaltyDiscount.LoyaltyDiscountFilterHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Queries.LoyaltyDiscount.LoyaltyDiscountFilterHandler},Greta.BO.BusinessLogic.Service.ILoyaltyDiscountService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.LoyaltyDiscount.LoyaltyDiscountFilterHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.LoyaltyDiscount.LoyaltyDiscountFilterQuery,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException"></exception>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.LoyaltyDiscount.LoyaltyDiscountFilterResponse">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.LoyaltyDiscount.LoyaltyDiscountGetAllQuery">
            <summary>
            Query for get all LoyaltyDiscount
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.LoyaltyDiscount.LoyaltyDiscountGetAllQuery.Requirements">
            <summary>
            
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.LoyaltyDiscount.LoyaltyDiscountGetAllHandler">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.LoyaltyDiscount.LoyaltyDiscountGetAllHandler.#ctor(Greta.BO.BusinessLogic.Service.ILoyaltyDiscountService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.LoyaltyDiscount.LoyaltyDiscountGetAllHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.LoyaltyDiscount.LoyaltyDiscountGetAllQuery,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.LoyaltyDiscount.LoyaltyDiscountGetAllResponse">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.LoyaltyDiscount.LoyaltyDiscountGetByIdQuery">
            <summary>
            Query for get by id LoyaltyDiscount
            </summary>
            <param name="Id"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.LoyaltyDiscount.LoyaltyDiscountGetByIdQuery.#ctor(System.Int64)">
            <summary>
            Query for get by id LoyaltyDiscount
            </summary>
            <param name="Id"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.LoyaltyDiscount.LoyaltyDiscountGetByIdQuery.Id">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.LoyaltyDiscount.LoyaltyDiscountGetByIdQuery.Requirements">
            <summary>
            
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.LoyaltyDiscount.LoyaltyDiscountGetByIdQuery.CacheKey">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.LoyaltyDiscount.LoyaltyDiscountGetByIdHandler">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.LoyaltyDiscount.LoyaltyDiscountGetByIdHandler.#ctor(Greta.BO.BusinessLogic.Service.ILoyaltyDiscountService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.LoyaltyDiscount.LoyaltyDiscountGetByIdHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.LoyaltyDiscount.LoyaltyDiscountGetByIdQuery,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.LoyaltyDiscount.LoyaltyDiscountGetByIdResponse">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.LoyaltyDiscount.LoyaltyDiscountRemainStoresQuery">
            <summary>
            Query for get list of Loyalty Discount Remain Stores
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.LoyaltyDiscount.LoyaltyDiscountRemainStoresQuery.Requirements">
            <summary>
            
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.LoyaltyDiscount.LoyaltyDiscountRemainStoresHandler">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.LoyaltyDiscount.LoyaltyDiscountRemainStoresHandler.#ctor(Greta.BO.BusinessLogic.Service.ILoyaltyDiscountService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.LoyaltyDiscount.LoyaltyDiscountRemainStoresHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.LoyaltyDiscount.LoyaltyDiscountRemainStoresQuery,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.LoyaltyDiscount.LoyaltyDiscountRemainStoresResponse">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.MixAndMatch.MixAndMatchFilterQuery">
            <summary>
            Query for filter MixAndMatch entities
            </summary>
            <param name="CurrentPage"></param>
            <param name="PageSize"></param>
            <param name="Filter"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.MixAndMatch.MixAndMatchFilterQuery.#ctor(System.Int32,System.Int32,Greta.BO.BusinessLogic.Models.Dto.Search.MixAndMatchSearchModel)">
            <summary>
            Query for filter MixAndMatch entities
            </summary>
            <param name="CurrentPage"></param>
            <param name="PageSize"></param>
            <param name="Filter"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.MixAndMatch.MixAndMatchFilterQuery.CurrentPage">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.MixAndMatch.MixAndMatchFilterQuery.PageSize">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.MixAndMatch.MixAndMatchFilterQuery.Filter">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.MixAndMatch.MixAndMatchFilterQuery.Requirements">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.MixAndMatch.Validator">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.MixAndMatch.Validator.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.MixAndMatch.MixAndMatchFilterHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.MixAndMatch.MixAndMatchFilterHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Queries.MixAndMatch.MixAndMatchFilterHandler},Greta.BO.BusinessLogic.Service.IMixAndMatchService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.MixAndMatch.MixAndMatchFilterHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.MixAndMatch.MixAndMatchFilterQuery,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException"></exception>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.MixAndMatch.MixAndMatchFilterResponse">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.MixAndMatch.MixAndMatchGetAllQuery">
            <summary>
            Query for get all MixAndMatch entities
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.MixAndMatch.MixAndMatchGetAllQuery.Requirements">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.MixAndMatch.MixAndMatchGetAllHandler">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.MixAndMatch.MixAndMatchGetAllHandler.#ctor(Greta.BO.BusinessLogic.Service.IMixAndMatchService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.MixAndMatch.MixAndMatchGetAllHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.MixAndMatch.MixAndMatchGetAllQuery,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.MixAndMatch.MixAndMatchGetAllResponse">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.MixAndMatch.MixAndMatchGetByIdQuery">
            <summary>
            Query for get by id MixAndMatch entity
            </summary>
            <param name="Id"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.MixAndMatch.MixAndMatchGetByIdQuery.#ctor(System.Int64)">
            <summary>
            Query for get by id MixAndMatch entity
            </summary>
            <param name="Id"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.MixAndMatch.MixAndMatchGetByIdQuery.Id">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.MixAndMatch.MixAndMatchGetByIdQuery.Requirements">
            <inheritdoc/>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.MixAndMatch.MixAndMatchGetByIdQuery.CacheKey">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.MixAndMatch.MixAndMatchGetByIdHandler">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.MixAndMatch.MixAndMatchGetByIdHandler.#ctor(Greta.BO.BusinessLogic.Service.IMixAndMatchService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.MixAndMatch.MixAndMatchGetByIdHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.MixAndMatch.MixAndMatchGetByIdQuery,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.MixAndMatch.MixAndMatchGetByIdResponse">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.OnlineStore.OnlineStoreFilterQuery">
            <summary>
            Query for filter the OnlineStore entities
            </summary>
            <param name="CurrentPage">Current page</param>
            <param name="PageSize">Current size</param>
            <param name="Filter">Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.OnlineStore.OnlineStoreFilterQuery.#ctor(System.Int32,System.Int32,Greta.BO.BusinessLogic.Models.Dto.Search.OnlineStoreSearchModel)">
            <summary>
            Query for filter the OnlineStore entities
            </summary>
            <param name="CurrentPage">Current page</param>
            <param name="PageSize">Current size</param>
            <param name="Filter">Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.OnlineStore.OnlineStoreFilterQuery.CurrentPage">
            <summary>Current page</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.OnlineStore.OnlineStoreFilterQuery.PageSize">
            <summary>Current size</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.OnlineStore.OnlineStoreFilterQuery.Filter">
            <summary>Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.OnlineStore.OnlineStoreFilterQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.OnlineStore.OnlineStoreFilterValidator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.OnlineStore.OnlineStoreFilterValidator.#ctor">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.OnlineStore.OnlineStoreFilterHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.OnlineStore.OnlineStoreFilterHandler.#ctor(Greta.BO.BusinessLogic.Service.IOnlineStoreService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.OnlineStore.OnlineStoreFilterHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.OnlineStore.OnlineStoreFilterQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.OnlineStore.OnlineStoreFilterResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.OnlineStore.OnlineStoreGetAllQuery">
            <summary>
            Get all entities
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.OnlineStore.OnlineStoreGetAllQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.OnlineStore.OnlineStoreGetAllHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.OnlineStore.OnlineStoreGetAllHandler.#ctor(Greta.BO.BusinessLogic.Service.IOnlineStoreService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.OnlineStore.OnlineStoreGetAllHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.OnlineStore.OnlineStoreGetAllQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.OnlineStore.OnlineStoreGetAllResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.OnlineStore.OnlineStoreGetByIdQuery">
            <summary>
            Get entity by id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.OnlineStore.OnlineStoreGetByIdQuery.#ctor(System.Int64)">
            <summary>
            Get entity by id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.OnlineStore.OnlineStoreGetByIdQuery.Id">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.OnlineStore.OnlineStoreGetByIdQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.OnlineStore.OnlineStoreGetByIdQuery.CacheKey">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.OnlineStore.OnlineStoreGetByIdHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.OnlineStore.OnlineStoreGetByIdHandler.#ctor(Greta.BO.BusinessLogic.Service.IOnlineStoreService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.OnlineStore.OnlineStoreGetByIdHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.OnlineStore.OnlineStoreGetByIdQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.OnlineStore.OnlineStoreGetByIdResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.PriceBatchDetail.PriceBatchDetailFilterQuery">
            <summary>
            Query for filter the PriceBatchDetail entities
            </summary>
            <param name="CurrentPage">Current page</param>
            <param name="PageSize">Current size</param>
            <param name="Filter">Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.PriceBatchDetail.PriceBatchDetailFilterQuery.#ctor(System.Int32,System.Int32,Greta.BO.BusinessLogic.Models.Dto.Search.PriceBatchDetailSearchModel)">
            <summary>
            Query for filter the PriceBatchDetail entities
            </summary>
            <param name="CurrentPage">Current page</param>
            <param name="PageSize">Current size</param>
            <param name="Filter">Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.PriceBatchDetail.PriceBatchDetailFilterQuery.CurrentPage">
            <summary>Current page</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.PriceBatchDetail.PriceBatchDetailFilterQuery.PageSize">
            <summary>Current size</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.PriceBatchDetail.PriceBatchDetailFilterQuery.Filter">
            <summary>Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.PriceBatchDetail.PriceBatchDetailFilterQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.PriceBatchDetail.PriceBatchDetailFilterValidator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.PriceBatchDetail.PriceBatchDetailFilterValidator.#ctor">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.PriceBatchDetail.PriceBatchDetailFilterHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.PriceBatchDetail.PriceBatchDetailFilterHandler.#ctor(Greta.BO.BusinessLogic.Service.IPriceBatchDetailService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.PriceBatchDetail.PriceBatchDetailFilterHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.PriceBatchDetail.PriceBatchDetailFilterQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.PriceBatchDetail.PriceBatchDetailFilterResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.PriceBatchDetail.PriceBatchDetailGetAllQuery">
            <summary>
            Get all entities
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.PriceBatchDetail.PriceBatchDetailGetAllQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.PriceBatchDetail.PriceBatchDetailGetAllHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.PriceBatchDetail.PriceBatchDetailGetAllHandler.#ctor(Greta.BO.BusinessLogic.Service.IPriceBatchDetailService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.PriceBatchDetail.PriceBatchDetailGetAllHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.PriceBatchDetail.PriceBatchDetailGetAllQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.PriceBatchDetail.PriceBatchDetailGetAllResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.PriceBatchDetail.PriceBatchDetailGetByIdQuery">
            <summary>
            Get entity by id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.PriceBatchDetail.PriceBatchDetailGetByIdQuery.#ctor(System.Int64)">
            <summary>
            Get entity by id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.PriceBatchDetail.PriceBatchDetailGetByIdQuery.Id">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.PriceBatchDetail.PriceBatchDetailGetByIdQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.PriceBatchDetail.PriceBatchDetailGetByIdQuery.CacheKey">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.PriceBatchDetail.PriceBatchDetailGetByIdHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.PriceBatchDetail.PriceBatchDetailGetByIdHandler.#ctor(Greta.BO.BusinessLogic.Service.IPriceBatchDetailService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.PriceBatchDetail.PriceBatchDetailGetByIdHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.PriceBatchDetail.PriceBatchDetailGetByIdQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.PriceBatchDetail.PriceBatchDetailGetByIdResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Products.ProductGetByUpcQuery">
            <summary>
            Get a ProductModel by upc
            </summary>
            <param name="UPC"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Products.ProductGetByUpcQuery.#ctor(System.String)">
            <summary>
            Get a ProductModel by upc
            </summary>
            <param name="UPC"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Products.ProductGetByUpcQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Products.ProductGetByUpcHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Products.ProductGetByUpcHandler.#ctor(Greta.BO.BusinessLogic.Service.IProductService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Products.ProductGetByUpcHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Products.ProductGetByUpcQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Products.ProductGetByUpcResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Products.ScaleProductGetByCutListTemplateQuery">
            <summary>
            Get scale product by cut list template Id
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Products.ScaleProductGetByCutListTemplateQuery.#ctor(System.Int64)">
            <summary>
            Get scale product by cut list template Id
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Products.ScaleProductGetByCutListTemplateQuery.Requirements">
            <summary>
            
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Products.ScaleProductGetByCutListTemplateHandler">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Products.ScaleProductGetByCutListTemplateHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Queries.Products.ScaleProductGetByCutListTemplateHandler},Greta.BO.BusinessLogic.Service.IProductService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Products.ScaleProductGetByCutListTemplateHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Products.ScaleProductGetByCutListTemplateQuery,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Products.ScaleProductGetByCutListTemplateResponse">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Products.ScaleProductGetByUpcOrPluQuery">
            <summary>
            Get a ProductModel by upc
            </summary>
            <param name="Filter"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Products.ScaleProductGetByUpcOrPluQuery.#ctor(System.String)">
            <summary>
            Get a ProductModel by upc
            </summary>
            <param name="Filter"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Products.ScaleProductGetByUpcOrPluQuery.Filter">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Products.ScaleProductGetByUpcOrPluQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Products.ScaleProductGetByUpcOrPluHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Products.ScaleProductGetByUpcOrPluHandler.#ctor(Greta.BO.BusinessLogic.Service.IProductService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Products.ScaleProductGetByUpcOrPluHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Products.ScaleProductGetByUpcOrPluQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Products.ScaleProductGetByUpcOrPluResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Products.ScaleProductGetByUpcPluProductQuery">
            <summary>
            Get filter and paginate Scale product without cutListTemplate
            </summary>
            <param name="cutTemplateId"></param>
            <param name="currentPage"></param>
            <param name="pageSize"></param>
            <param name="filter"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Products.ScaleProductGetByUpcPluProductQuery.#ctor(System.Int64,System.Int32,System.Int32,Greta.BO.BusinessLogic.Models.Dto.Search.ScaleProductSearchModel)">
            <summary>
            Get filter and paginate Scale product without cutListTemplate
            </summary>
            <param name="cutTemplateId"></param>
            <param name="currentPage"></param>
            <param name="pageSize"></param>
            <param name="filter"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Products.ScaleProductGetByUpcPluProductQuery.cutTemplateId">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Products.ScaleProductGetByUpcPluProductQuery.currentPage">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Products.ScaleProductGetByUpcPluProductQuery.pageSize">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Products.ScaleProductGetByUpcPluProductQuery.filter">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Products.ScaleProductGetByUpcPluProductQuery.Requirements">
            <summary>
            
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Products.ScaleProductGetByUpcPluProductHandler">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Products.ScaleProductGetByUpcPluProductHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Queries.Products.ScaleProductGetByUpcPluProductHandler},Greta.BO.BusinessLogic.Service.IProductService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Products.ScaleProductGetByUpcPluProductHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Products.ScaleProductGetByUpcPluProductQuery,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Products.ScaleProductGetByUpcPluProductResponse">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Profiles.ProfilesFilterQuery">
            <summary>
            Query for filter and paginate profiles
            </summary>
            <param name="CurrentPage"></param>
            <param name="PageSize"></param>
            <param name="Filter"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Profiles.ProfilesFilterQuery.#ctor(System.Int32,System.Int32,Greta.BO.BusinessLogic.Models.Dto.Search.ProfilesSearchModel)">
            <summary>
            Query for filter and paginate profiles
            </summary>
            <param name="CurrentPage"></param>
            <param name="PageSize"></param>
            <param name="Filter"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Profiles.ProfilesFilterQuery.CurrentPage">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Profiles.ProfilesFilterQuery.PageSize">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Profiles.ProfilesFilterQuery.Filter">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Profiles.ProfilesFilterQuery.Requirements">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Profiles.ProfilesFilterValidator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Profiles.ProfilesFilterValidator.#ctor">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Profiles.ProfilesFilterHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Profiles.ProfilesFilterHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Queries.Profiles.ProfilesFilterHandler},Greta.BO.BusinessLogic.Service.IProfilesService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Profiles.ProfilesFilterHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Profiles.ProfilesFilterQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Profiles.ProfilesFilterResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Profiles.ProfilesGetByApplicationQuery">
            <summary>
            
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Profiles.ProfilesGetByApplicationQuery.#ctor(System.Int64)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Profiles.ProfilesGetByApplicationQuery.Requirements">
            <summary>
            
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Profiles.ProfilesGetByApplicationHandler">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Profiles.ProfilesGetByApplicationHandler.#ctor(Greta.BO.BusinessLogic.Service.IProfilesService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Profiles.ProfilesGetByApplicationHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Profiles.ProfilesGetByApplicationQuery,System.Threading.CancellationToken)">
            <summary>
            Get profiles by Application
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Profiles.ProfilesGetByApplicationResponse">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Profiles.ProfilesGetByIdQuery">
            <summary>
            Query for get profile by Id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Profiles.ProfilesGetByIdQuery.#ctor(System.Int64)">
            <summary>
            Query for get profile by Id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Profiles.ProfilesGetByIdQuery.Id">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Profiles.ProfilesGetByIdQuery.Requirements">
            <summary>
            
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Profiles.ProfilesGetByIdHandler">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Profiles.ProfilesGetByIdHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Queries.Profiles.ProfilesGetByIdHandler},Greta.BO.BusinessLogic.Service.IProfilesService)">
            <summary>
            Constructor of ProfilesGetByIdHandler
            </summary>
            <param name="service"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Profiles.ProfilesGetByIdHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Profiles.ProfilesGetByIdQuery,System.Threading.CancellationToken)">
            <summary>
            Handler of ProfilesGetByIdHandler
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Profiles.ProfilesGetByIdResponse">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Region.RegionFilterQuery">
            <summary>
            Query for filter the Region entities
            </summary>
            <param name="CurrentPage">Current page</param>
            <param name="PageSize">Current size</param>
            <param name="Filter">Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Region.RegionFilterQuery.#ctor(System.Int32,System.Int32,Greta.BO.BusinessLogic.Models.Dto.Search.RegionSearchModel)">
            <summary>
            Query for filter the Region entities
            </summary>
            <param name="CurrentPage">Current page</param>
            <param name="PageSize">Current size</param>
            <param name="Filter">Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Region.RegionFilterQuery.CurrentPage">
            <summary>Current page</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Region.RegionFilterQuery.PageSize">
            <summary>Current size</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Region.RegionFilterQuery.Filter">
            <summary>Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Region.RegionFilterQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Region.RegionFilterValidator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Region.RegionFilterValidator.#ctor">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Region.RegionFilterHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Region.RegionFilterHandler.#ctor(Greta.BO.BusinessLogic.Service.IRegionService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Region.RegionFilterHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Region.RegionFilterQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Region.RegionFilterResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Region.RegionGetAllQuery">
            <summary>
            Get all entities
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Region.RegionGetAllQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Region.RegionGetAllHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Region.RegionGetAllHandler.#ctor(Greta.BO.BusinessLogic.Service.IRegionService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Region.RegionGetAllHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Region.RegionGetAllQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Region.RegionGetAllResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Region.RegionGetByIdQuery">
            <summary>
            Get entity by id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Region.RegionGetByIdQuery.#ctor(System.Int64)">
            <summary>
            Get entity by id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Region.RegionGetByIdQuery.Id">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Region.RegionGetByIdQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Region.RegionGetByIdQuery.CacheKey">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Region.RegionGetByIdHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Region.RegionGetByIdHandler.#ctor(Greta.BO.BusinessLogic.Service.IRegionService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Region.RegionGetByIdHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Region.RegionGetByIdQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Region.RegionGetByIdResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Report.ReportFilterQuery">
            <summary>
            Query for filter and paginate Report
            </summary>
            <param name="CurrentPage"></param>
            <param name="PageSize"></param>
            <param name="Filter"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Report.ReportFilterQuery.#ctor(System.Int32,System.Int32,Greta.BO.BusinessLogic.Models.Dto.Search.ReportSearchModel)">
            <summary>
            Query for filter and paginate Report
            </summary>
            <param name="CurrentPage"></param>
            <param name="PageSize"></param>
            <param name="Filter"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Report.ReportFilterQuery.CurrentPage">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Report.ReportFilterQuery.PageSize">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Report.ReportFilterQuery.Filter">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Report.ReportFilterQuery.Requirements">
            <summary>
            
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Report.Validator">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Report.Validator.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Report.ReportFilterHandler">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Report.ReportFilterHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Queries.Report.ReportFilterHandler},Greta.BO.BusinessLogic.Service.IReportService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Report.ReportFilterHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Report.ReportFilterQuery,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException"></exception>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Report.ReportFilterResponse">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Report.ReportGetAllQuery">
            <summary>
            Query for get all Report
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Report.ReportGetAllQuery.Requirements">
            <summary>
            
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Report.ReportGetAllHandler">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Report.ReportGetAllHandler.#ctor(Greta.BO.BusinessLogic.Service.IReportService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Report.ReportGetAllHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Report.ReportGetAllQuery,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException"></exception>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Report.ReportGetAllResponse">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Report.ReportGetByIdQuery">
            <summary>
            Query for get Report by id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Report.ReportGetByIdQuery.#ctor(System.Int64)">
            <summary>
            Query for get Report by id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Report.ReportGetByIdQuery.Id">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Report.ReportGetByIdQuery.Requirements">
            <summary>
            
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Report.ReportGetByIdHandler">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Report.ReportGetByIdHandler.#ctor(Greta.BO.BusinessLogic.Service.IReportService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Report.ReportGetByIdHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Report.ReportGetByIdQuery,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException"></exception>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Report.ReportGetByIdResponse">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Report.ReportsGetByCategoryQuery">
            <summary>
            Query for get Report by Category
            </summary>
            <param name="Category"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Report.ReportsGetByCategoryQuery.#ctor(Greta.BO.Api.Entities.Enum.ReportCategory)">
            <summary>
            Query for get Report by Category
            </summary>
            <param name="Category"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Report.ReportsGetByCategoryQuery.Category">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Report.ReportsGetByCategoryQuery.Requirements">
            <summary>
            
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Report.ReportsGetByCategoryHandler">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Report.ReportsGetByCategoryHandler.#ctor(Greta.BO.BusinessLogic.Service.IReportService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Report.ReportsGetByCategoryHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Report.ReportsGetByCategoryQuery,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException"></exception>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Report.ReportsGetByCategoryResponse">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Role.RoleFilterQuery">
            <summary>
            Query for filter the rol entities
            </summary>
            <param name="CurrentPage">Current page</param>
            <param name="PageSize">Current size</param>
            <param name="Filter">Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Role.RoleFilterQuery.#ctor(System.Int32,System.Int32,Greta.BO.BusinessLogic.Models.Dto.Search.RoleSearchModel)">
            <summary>
            Query for filter the rol entities
            </summary>
            <param name="CurrentPage">Current page</param>
            <param name="PageSize">Current size</param>
            <param name="Filter">Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Role.RoleFilterQuery.CurrentPage">
            <summary>Current page</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Role.RoleFilterQuery.PageSize">
            <summary>Current size</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Role.RoleFilterQuery.Filter">
            <summary>Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Role.RoleFilterQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Role.RoleFilterValidator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Role.RoleFilterValidator.#ctor">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Role.RoleFilterHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Role.RoleFilterHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Queries.Role.RoleFilterHandler},Greta.BO.BusinessLogic.Service.IRoleService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Role.RoleFilterHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Role.RoleFilterQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Role.RoleFilterResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Role.RoleGetAllQuery">
            <summary>
            Query for get all rols entities
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Role.RoleGetAllQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Role.RoleGetAllHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Role.RoleGetAllHandler.#ctor(Greta.BO.BusinessLogic.Service.IRoleService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Role.RoleGetAllHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Role.RoleGetAllQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Role.RoleGetAllResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Role.RoleGetAllDto">
            <inheritdoc />
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Role.RoleGetAllDto.Id">
            <summary>
            Role Id
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Role.RoleGetAllDto.Name">
            <summary>
            Role Name
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Role.RoleGetByIdQuery">
            <summary>
            Query for get rol by id
            </summary>
            <param name="Id">id of rol</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Role.RoleGetByIdQuery.#ctor(System.Int64)">
            <summary>
            Query for get rol by id
            </summary>
            <param name="Id">id of rol</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Role.RoleGetByIdQuery.Id">
            <summary>id of rol</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Role.RoleGetByIdQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Role.RoleGetByIdQuery.CacheKey">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Role.RoleGetByIdHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Role.RoleGetByIdHandler.#ctor(Greta.BO.BusinessLogic.Service.IRoleService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Role.RoleGetByIdHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Role.RoleGetByIdQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Role.RoleGetByIdResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.RoundingTableQueries.RoundingTableFilterQuery">
            <summary>
            Query for filter the Rounding Table entities
            </summary>
            <param name="CurrentPage">Current page</param>
            <param name="PageSize">Current size</param>
            <param name="Filter">Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.RoundingTableQueries.RoundingTableFilterQuery.#ctor(System.Int32,System.Int32,Greta.BO.BusinessLogic.Models.Dto.Search.RoundingTableSearchModel)">
            <summary>
            Query for filter the Rounding Table entities
            </summary>
            <param name="CurrentPage">Current page</param>
            <param name="PageSize">Current size</param>
            <param name="Filter">Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.RoundingTableQueries.RoundingTableFilterQuery.CurrentPage">
            <summary>Current page</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.RoundingTableQueries.RoundingTableFilterQuery.PageSize">
            <summary>Current size</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.RoundingTableQueries.RoundingTableFilterQuery.Filter">
            <summary>Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.RoundingTableQueries.RoundingTableFilterQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.RoundingTableQueries.RoundingTableFilterValidator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.RoundingTableQueries.RoundingTableFilterValidator.#ctor">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.RoundingTableQueries.RoundingTableFilterHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.RoundingTableQueries.RoundingTableFilterHandler.#ctor(Greta.BO.BusinessLogic.Service.IRoundingTableService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.RoundingTableQueries.RoundingTableFilterHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.RoundingTableQueries.RoundingTableFilterQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.RoundingTableQueries.RoundingTableFilterResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.RoundingTableQueries.RoundingTableGetAllQuery">
            <summary>
            Get all entities
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.RoundingTableQueries.RoundingTableGetAllQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.RoundingTableQueries.RoundingTableGetAllHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.RoundingTableQueries.RoundingTableGetAllHandler.#ctor(Greta.BO.BusinessLogic.Service.IRoundingTableService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.RoundingTableQueries.RoundingTableGetAllHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.RoundingTableQueries.RoundingTableGetAllQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.RoundingTableQueries.RoundingTableGetAllResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.RoundingTableQueries.RoundingTableGetByIdQuery">
            <summary>
            Get entity by id
            </summary>
            <param name="Id">Tax id</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.RoundingTableQueries.RoundingTableGetByIdQuery.#ctor(System.Int64)">
            <summary>
            Get entity by id
            </summary>
            <param name="Id">Tax id</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.RoundingTableQueries.RoundingTableGetByIdQuery.Id">
            <summary>Tax id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.RoundingTableQueries.RoundingTableGetByIdQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.RoundingTableQueries.RoundingTableGetByIdQuery.CacheKey">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.RoundingTableQueries.RoundingTableGetByIdHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.RoundingTableQueries.RoundingTableGetByIdHandler.#ctor(Greta.BO.BusinessLogic.Service.IRoundingTableService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.RoundingTableQueries.RoundingTableGetByIdHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.RoundingTableQueries.RoundingTableGetByIdQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.RoundingTableQueries.RoundingTableGetByIdResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.RoundingTableQueries.RoundPriceQuery">
            <summary>
            Round the price based on the rounding table
            </summary>
            <param name="Price"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.RoundingTableQueries.RoundPriceQuery.#ctor(System.Decimal)">
            <summary>
            Round the price based on the rounding table
            </summary>
            <param name="Price"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.RoundingTableQueries.RoundPriceQuery.Price">
            <summary></summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.RoundingTableQueries.RoundPriceHandler">
            <summary>
            Handler for <see cref="T:Greta.BO.BusinessLogic.Handlers.Queries.RoundingTableQueries.RoundPriceQuery"/>
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.RoundingTableQueries.RoundPriceHandler.#ctor(Greta.BO.BusinessLogic.Service.IRoundingTableService)">
            <summary>
            Constructor
            </summary>
            <param name="roundingTableService"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.RoundingTableQueries.RoundPriceHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.RoundingTableQueries.RoundPriceQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.RoundingTableQueries.RoundPriceResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.ScaleCategory.ScaleCategoryFilterQuery">
            <summary>
            Query for filter the ScaleCategory entities
            </summary>
            <param name="CurrentPage">Current page</param>
            <param name="PageSize">Current size</param>
            <param name="Filter">Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.ScaleCategory.ScaleCategoryFilterQuery.#ctor(System.Int32,System.Int32,Greta.BO.BusinessLogic.Models.Dto.Search.ScaleCategorySearchModel)">
            <summary>
            Query for filter the ScaleCategory entities
            </summary>
            <param name="CurrentPage">Current page</param>
            <param name="PageSize">Current size</param>
            <param name="Filter">Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.ScaleCategory.ScaleCategoryFilterQuery.CurrentPage">
            <summary>Current page</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.ScaleCategory.ScaleCategoryFilterQuery.PageSize">
            <summary>Current size</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.ScaleCategory.ScaleCategoryFilterQuery.Filter">
            <summary>Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.ScaleCategory.ScaleCategoryFilterQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.ScaleCategory.ScaleCategoryFilterValidator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.ScaleCategory.ScaleCategoryFilterValidator.#ctor">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.ScaleCategory.ScaleCategoryFilterHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.ScaleCategory.ScaleCategoryFilterHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Queries.ScaleCategory.ScaleCategoryFilterHandler},Greta.BO.BusinessLogic.Service.IScaleCategoryService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.ScaleCategory.ScaleCategoryFilterHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.ScaleCategory.ScaleCategoryFilterQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.ScaleCategory.ScaleCategoryFilterResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.ScaleCategory.ScaleCategoryGetAllQuery">
            <summary>
            Get all entities
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.ScaleCategory.ScaleCategoryGetAllQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.ScaleCategory.ScaleCategoryGetAllHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.ScaleCategory.ScaleCategoryGetAllHandler.#ctor(Greta.BO.BusinessLogic.Service.IScaleCategoryService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.ScaleCategory.ScaleCategoryGetAllHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.ScaleCategory.ScaleCategoryGetAllQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.ScaleCategory.ScaleCategoryGetAllResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.ScaleCategory.ScaleCategoryGetByIdQuery">
            <summary>
            
            </summary>
            <param name="Id"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.ScaleCategory.ScaleCategoryGetByIdQuery.#ctor(System.Int64)">
            <summary>
            
            </summary>
            <param name="Id"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.ScaleCategory.ScaleCategoryGetByIdQuery.Id">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.ScaleCategory.ScaleCategoryGetByIdQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.ScaleCategory.ScaleCategoryGetByIdQuery.CacheKey">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.ScaleCategory.ScaleCategoryGetByIdHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.ScaleCategory.ScaleCategoryGetByIdHandler.#ctor(Greta.BO.BusinessLogic.Service.IScaleCategoryService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.ScaleCategory.ScaleCategoryGetByIdHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.ScaleCategory.ScaleCategoryGetByIdQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.ScaleCategory.ScaleCategoryGetByIdResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.ScaleLabelType.ScaleLabelTypeFilterQuery">
            <summary>
            Query for filter the ScaleLabelType entities
            </summary>
            <param name="CurrentPage">Current page</param>
            <param name="PageSize">Current size</param>
            <param name="Filter">Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.ScaleLabelType.ScaleLabelTypeFilterQuery.#ctor(System.Int32,System.Int32,Greta.BO.BusinessLogic.Models.Dto.Search.ScaleLabelTypeSearchModel)">
            <summary>
            Query for filter the ScaleLabelType entities
            </summary>
            <param name="CurrentPage">Current page</param>
            <param name="PageSize">Current size</param>
            <param name="Filter">Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.ScaleLabelType.ScaleLabelTypeFilterQuery.CurrentPage">
            <summary>Current page</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.ScaleLabelType.ScaleLabelTypeFilterQuery.PageSize">
            <summary>Current size</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.ScaleLabelType.ScaleLabelTypeFilterQuery.Filter">
            <summary>Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.ScaleLabelType.ScaleLabelTypeFilterQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.ScaleLabelType.ScaleLabelTypeFilterResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.ScaleLabelType.ScaleLabelTypeFilterValidator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.ScaleLabelType.ScaleLabelTypeFilterValidator.#ctor">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.ScaleLabelType.ScaleLabelTypeFilterHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.ScaleLabelType.ScaleLabelTypeFilterHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Queries.ScaleLabelType.ScaleLabelTypeFilterHandler},Greta.BO.BusinessLogic.Service.IScaleLabelTypeService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.ScaleLabelType.ScaleLabelTypeFilterHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.ScaleLabelType.ScaleLabelTypeFilterQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.ScaleLabelType.ScaleLabelTypeGetAllQuery">
            <summary>
            Get all entities
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.ScaleLabelType.ScaleLabelTypeGetAllQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.ScaleLabelType.ScaleLabelTypeGetAllHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.ScaleLabelType.ScaleLabelTypeGetAllHandler.#ctor(Greta.BO.BusinessLogic.Service.IScaleLabelTypeService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.ScaleLabelType.ScaleLabelTypeGetAllHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.ScaleLabelType.ScaleLabelTypeGetAllQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.ScaleLabelType.ScaleLabelTypeGetAllResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.ScaleLabelType.ScaleLabelTypeGetByIdQuery">
            <summary>
            Get entity by id
            </summary>
            <param name="Id">ScaleLabelType id</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.ScaleLabelType.ScaleLabelTypeGetByIdQuery.#ctor(System.Int64)">
            <summary>
            Get entity by id
            </summary>
            <param name="Id">ScaleLabelType id</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.ScaleLabelType.ScaleLabelTypeGetByIdQuery.Id">
            <summary>ScaleLabelType id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.ScaleLabelType.ScaleLabelTypeGetByIdQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.ScaleLabelType.ScaleLabelTypeGetByIdQuery.CacheKey">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.ScaleLabelType.ScaleLabelTypeGetByIdHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.ScaleLabelType.ScaleLabelTypeGetByIdHandler.#ctor(Greta.BO.BusinessLogic.Service.IScaleLabelTypeService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.ScaleLabelType.ScaleLabelTypeGetByIdHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.ScaleLabelType.ScaleLabelTypeGetByIdQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.ScaleLabelType.ScaleLabelTypeGetByIdResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.ScaleLabelType.ScaleLabelTypeGetByTypeQuery">
            <summary>
            Get entity by type
            </summary>
            <param name="type">ScaleType</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.ScaleLabelType.ScaleLabelTypeGetByTypeQuery.#ctor(Greta.BO.Api.Entities.Enum.ScaleType)">
            <summary>
            Get entity by type
            </summary>
            <param name="type">ScaleType</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.ScaleLabelType.ScaleLabelTypeGetByTypeQuery.type">
            <summary>ScaleType</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.ScaleLabelType.ScaleLabelTypeGetByTypeQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.ScaleLabelType.ScaleLabelTypeGetByTypeQuery.CacheKey">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.ScaleLabelType.ScaleLabelTypeGetByTypeHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.ScaleLabelType.ScaleLabelTypeGetByTypeHandler.#ctor(Greta.BO.BusinessLogic.Service.IScaleLabelTypeService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.ScaleLabelType.ScaleLabelTypeGetByTypeHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.ScaleLabelType.ScaleLabelTypeGetByTypeQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.ScaleLabelType.ScaleLabelTypeGetByTypeResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Scalendar.ScalendarFilterQuery">
            <summary>
            Query for filter the Scalendar entities
            </summary>
            <param name="CurrentPage">Current page</param>
            <param name="PageSize">Current size</param>
            <param name="Filter">Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Scalendar.ScalendarFilterQuery.#ctor(System.Int32,System.Int32,Greta.BO.BusinessLogic.Models.Dto.Search.ScalendarSearchModel)">
            <summary>
            Query for filter the Scalendar entities
            </summary>
            <param name="CurrentPage">Current page</param>
            <param name="PageSize">Current size</param>
            <param name="Filter">Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Scalendar.ScalendarFilterQuery.CurrentPage">
            <summary>Current page</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Scalendar.ScalendarFilterQuery.PageSize">
            <summary>Current size</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Scalendar.ScalendarFilterQuery.Filter">
            <summary>Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Scalendar.ScalendarFilterQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Scalendar.ScalendarFilterValidator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Scalendar.ScalendarFilterValidator.#ctor">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Scalendar.ScalendarFilterHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Scalendar.ScalendarFilterHandler.#ctor(Greta.BO.BusinessLogic.Service.IScalendarService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Scalendar.ScalendarFilterHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Scalendar.ScalendarFilterQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Scalendar.ScalendarFilterResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Scalendar.ScalendarGetAllQuery">
            <summary>
            Get all entities
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Scalendar.ScalendarGetAllQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Scalendar.ScalendarGetAllHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Scalendar.ScalendarGetAllHandler.#ctor(Greta.BO.BusinessLogic.Service.IScalendarService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Scalendar.ScalendarGetAllHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Scalendar.ScalendarGetAllQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Scalendar.ScalendarGetAllResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Scalendar.ScalendarGetByIdQuery">
            <summary>
            Get entity by id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Scalendar.ScalendarGetByIdQuery.#ctor(System.Int64)">
            <summary>
            Get entity by id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Scalendar.ScalendarGetByIdQuery.Id">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Scalendar.ScalendarGetByIdQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Scalendar.ScalendarGetByIdQuery.CacheKey">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Scalendar.ScalendarGetByIdHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Scalendar.ScalendarGetByIdHandler.#ctor(Greta.BO.BusinessLogic.Service.IScalendarService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Scalendar.ScalendarGetByIdHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Scalendar.ScalendarGetByIdQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Scalendar.ScalendarGetByIdResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.ShelfTag.ShelfTagFilterQuery">
            <summary>
            Query for filter the ShelfTag entities
            </summary>
            <param name="CurrentPage">Current page</param>
            <param name="PageSize">Current size</param>
            <param name="Filter">Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.ShelfTag.ShelfTagFilterQuery.#ctor(System.Int32,System.Int32,Greta.BO.BusinessLogic.Models.Dto.Search.ShelfTagSearchModel)">
            <summary>
            Query for filter the ShelfTag entities
            </summary>
            <param name="CurrentPage">Current page</param>
            <param name="PageSize">Current size</param>
            <param name="Filter">Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.ShelfTag.ShelfTagFilterQuery.CurrentPage">
            <summary>Current page</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.ShelfTag.ShelfTagFilterQuery.PageSize">
            <summary>Current size</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.ShelfTag.ShelfTagFilterQuery.Filter">
            <summary>Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.ShelfTag.ShelfTagFilterQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.ShelfTag.ShelfTagFilterValidator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.ShelfTag.ShelfTagFilterValidator.#ctor">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.ShelfTag.ShelfTagFilterHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.ShelfTag.ShelfTagFilterHandler.#ctor(Greta.BO.BusinessLogic.Service.IShelfTagService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.ShelfTag.ShelfTagFilterHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.ShelfTag.ShelfTagFilterQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.ShelfTag.ShelfTagFilterResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.ShelfTag.ShelfTagGetAllQuery">
            <summary>
            Get all entities
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.ShelfTag.ShelfTagGetAllQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.ShelfTag.ShelfTagGetAllHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.ShelfTag.ShelfTagGetAllHandler.#ctor(Greta.BO.BusinessLogic.Service.IShelfTagService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.ShelfTag.ShelfTagGetAllHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.ShelfTag.ShelfTagGetAllQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.ShelfTag.ShelfTagGetAllResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.ShelfTag.ShelfTagGetByIdQuery">
            <summary>
            Get entity by id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.ShelfTag.ShelfTagGetByIdQuery.#ctor(System.Int64)">
            <summary>
            Get entity by id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.ShelfTag.ShelfTagGetByIdQuery.Id">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.ShelfTag.ShelfTagGetByIdQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.ShelfTag.ShelfTagGetByIdQuery.CacheKey">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.ShelfTag.ShelfTagGetByIdHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.ShelfTag.ShelfTagGetByIdHandler.#ctor(Greta.BO.BusinessLogic.Service.IShelfTagService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.ShelfTag.ShelfTagGetByIdHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.ShelfTag.ShelfTagGetByIdQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.ShelfTag.ShelfTagGetByIdResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreGetTimezonesIdQuery">
            <summary>
            Get time zones id
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreGetTimezonesIdHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreGetTimezonesIdHandler.#ctor(Greta.BO.BusinessLogic.Service.IStoreService)">
            <summary>
            
            </summary>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreGetTimezonesIdHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreGetTimezonesIdQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreGetTimezonesIdResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Store.TimezoneData">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Store.TimezoneData.#ctor(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreFilterQuery">
            <summary>
            Query for filter the Store entities
            </summary>
            <param name="CurrentPage">Current page</param>
            <param name="PageSize">Current size</param>
            <param name="Filter">Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreFilterQuery.#ctor(System.Int32,System.Int32,Greta.BO.BusinessLogic.Models.Dto.Search.StoreSearchModel)">
            <summary>
            Query for filter the Store entities
            </summary>
            <param name="CurrentPage">Current page</param>
            <param name="PageSize">Current size</param>
            <param name="Filter">Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreFilterQuery.CurrentPage">
            <summary>Current page</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreFilterQuery.PageSize">
            <summary>Current size</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreFilterQuery.Filter">
            <summary>Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreFilterQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreFilterValidator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreFilterValidator.#ctor">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreFilterHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreFilterHandler.#ctor(Greta.BO.BusinessLogic.Service.IStoreService)">
            <summary>
            
            </summary>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreFilterHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreFilterQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreFilterResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreGetAllQuery">
            <summary>
            Get all entities
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreGetAllQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreGetAllHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreGetAllHandler.#ctor(Greta.BO.BusinessLogic.Service.IStoreService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreGetAllHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreGetAllQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreGetAllResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreGetByGuidQuery">
            <summary>
            Get entity by guid
            </summary>
            <param name="guid">Guid guid</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreGetByGuidQuery.#ctor(System.Guid)">
            <summary>
            Get entity by guid
            </summary>
            <param name="guid">Guid guid</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreGetByGuidQuery.guid">
            <summary>Guid guid</summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreGetByGuidHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreGetByGuidHandler.#ctor(Greta.BO.BusinessLogic.Service.IStoreService)">
            <summary>
            
            </summary>
            <param name="service"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreGetByGuidHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreGetByGuidQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreGetByGuidResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreGetByIdQuery">
            <summary>
            Get entity by id
            </summary>
            <param name="Id">Store id</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreGetByIdQuery.#ctor(System.Int64)">
            <summary>
            Get entity by id
            </summary>
            <param name="Id">Store id</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreGetByIdQuery.Id">
            <summary>Store id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreGetByIdQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreGetByIdQuery.CacheKey">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreGetByIdHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreGetByIdHandler.#ctor(Greta.BO.BusinessLogic.Service.IStoreService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreGetByIdHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreGetByIdQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreGetByIdResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreGetForDashboardAllQuery">
            <summary>
            Get for dashboard all entities
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreGetForDashboardAllQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreGetForDashboardAllHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreGetForDashboardAllHandler.#ctor(Greta.BO.BusinessLogic.Service.IStoreService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreGetForDashboardAllHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreGetForDashboardAllQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreGetForDashboardAllResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreGetWithExternalScaleQuery">
            <summary>
            Get with external scale entities
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreGetWithExternalScaleQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreGetWithExternalScaleHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreGetWithExternalScaleHandler.#ctor(Greta.BO.BusinessLogic.Service.IStoreService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreGetWithExternalScaleHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreGetWithExternalScaleQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Store.StoreGetWithExternalScaleResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Tax.TaxFilterQuery">
            <summary>
            Query for filter the Tax entities
            </summary>
            <param name="CurrentPage">Current page</param>
            <param name="PageSize">Current size</param>
            <param name="Filter">Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Tax.TaxFilterQuery.#ctor(System.Int32,System.Int32,Greta.BO.BusinessLogic.Models.Dto.Search.TaxSearchModel)">
            <summary>
            Query for filter the Tax entities
            </summary>
            <param name="CurrentPage">Current page</param>
            <param name="PageSize">Current size</param>
            <param name="Filter">Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Tax.TaxFilterQuery.CurrentPage">
            <summary>Current page</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Tax.TaxFilterQuery.PageSize">
            <summary>Current size</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Tax.TaxFilterQuery.Filter">
            <summary>Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Tax.TaxFilterQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Tax.TaxFilterValidator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Tax.TaxFilterValidator.#ctor">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Tax.TaxFilterHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Tax.TaxFilterHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Queries.Tax.TaxFilterHandler},Greta.BO.BusinessLogic.Service.ITaxService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Tax.TaxFilterHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Tax.TaxFilterQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Tax.TaxFilterResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Tax.TaxGetAllQuery">
            <summary>
            Get all entities
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Tax.TaxGetAllQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Tax.TaxGetAllHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Tax.TaxGetAllHandler.#ctor(Greta.BO.BusinessLogic.Service.ITaxService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Tax.TaxGetAllHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Tax.TaxGetAllQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Tax.TaxGetAllResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Tax.TaxGetByIdQuery">
            <summary>
            Get entity by id
            </summary>
            <param name="Id">Tax id</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Tax.TaxGetByIdQuery.#ctor(System.Int64)">
            <summary>
            Get entity by id
            </summary>
            <param name="Id">Tax id</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Tax.TaxGetByIdQuery.Id">
            <summary>Tax id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Tax.TaxGetByIdQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Tax.TaxGetByIdQuery.CacheKey">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Tax.TaxGetByIdHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Tax.TaxGetByIdHandler.#ctor(Greta.BO.BusinessLogic.Service.ITaxService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Tax.TaxGetByIdHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Tax.TaxGetByIdQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Tax.TaxGetByIdResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Tax.TaxGetByStoreQuery">
            <summary>
            Get Tax entity by store
            </summary>
            <param name="Id">Store id</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Tax.TaxGetByStoreQuery.#ctor(System.Int64)">
            <summary>
            Get Tax entity by store
            </summary>
            <param name="Id">Store id</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Tax.TaxGetByStoreQuery.Id">
            <summary>Store id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Tax.TaxGetByStoreQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.Tax.TaxGetByStoreQuery.CacheKey">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Tax.TaxGetByStoreHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Tax.TaxGetByStoreHandler.#ctor(Greta.BO.BusinessLogic.Service.ITaxService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.Tax.TaxGetByStoreHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.Tax.TaxGetByStoreQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.Tax.TaxGetByStoreResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.TimeKeepingQueries.ExportCsvWorkTimeQuery">
            <summary>
            Command for export csv
            </summary>
            <param name="WorkTimeReportModels"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.TimeKeepingQueries.ExportCsvWorkTimeQuery.#ctor(System.Collections.Generic.List{Greta.BO.BusinessLogic.Models.Dto.ReportDto.WorkTimeReportModel})">
            <summary>
            Command for export csv
            </summary>
            <param name="WorkTimeReportModels"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.TimeKeepingQueries.ExportCsvWorkTimeQuery.WorkTimeReportModels">
            <summary></summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.TimeKeepingQueries.ExportCsvWorkTimeResponse">
            <summary>
            ClockOutResponse
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.TimeKeepingQueries.ExportCsvWorkTimeHandler">
            <summary>
            ClockOutHandler
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.TimeKeepingQueries.ExportCsvWorkTimeHandler.#ctor(Greta.BO.BusinessLogic.Service.ITimeKeepingService)">
            <summary>
            ClockOutHandler
            </summary>
            <param name="timeKeepingService"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.TimeKeepingQueries.ExportCsvWorkTimeHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.TimeKeepingQueries.ExportCsvWorkTimeQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.TimeKeepingQueries.TimeKeepingFilterValidator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.TimeKeepingQueries.TimeKeepingFilterValidator.#ctor">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.TimeKeepingQueries.TimeKeepingWorkTimeReportQuery">
            <summary>
            Query for get the work time by employee
            </summary>
            <param name="storeId"></param>
            <param name="Filter"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.TimeKeepingQueries.TimeKeepingWorkTimeReportQuery.#ctor(System.Int64,Greta.BO.BusinessLogic.Models.Dto.Search.WorkTimeSearchModel)">
            <summary>
            Query for get the work time by employee
            </summary>
            <param name="storeId"></param>
            <param name="Filter"></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.TimeKeepingQueries.TimeKeepingWorkTimeReportQuery.storeId">
            <summary></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.TimeKeepingQueries.TimeKeepingWorkTimeReportQuery.Filter">
            <summary></summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.TimeKeepingQueries.TimeKeepingWorkTimeReportResponse">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.TimeKeepingQueries.TimeKeepingWorkTimeReportValidator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.TimeKeepingQueries.TimeKeepingWorkTimeReportValidator.#ctor">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.TimeKeepingQueries.TimeKeepingWorkTimeReportHandler">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.TimeKeepingQueries.TimeKeepingWorkTimeReportHandler.#ctor(Greta.BO.BusinessLogic.Service.ITimeKeepingService)">
            <summary>
            
            </summary>
            <param name="timeKeepingService"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.TimeKeepingQueries.TimeKeepingWorkTimeReportHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.TimeKeepingQueries.TimeKeepingWorkTimeReportQuery,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrderDetail.GetProductByUpcQuery">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrderDetail.GetProductByUpcQuery.#ctor(System.Int64,System.Int64,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrderDetail.GetProductByUpcResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrderDetail.GetProductByUpcHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrderDetail.GetProductByUpcHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Queries.VendorOrderDetail.GetProductByUpcHandler},Greta.BO.BusinessLogic.Service.IVendorOrderDetailService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrderDetail.GetProductByUpcHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.VendorOrderDetail.GetProductByUpcQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrderDetail.GetStatusPurchaseOrderQuery">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrderDetail.GetStatusPurchaseOrderQuery.#ctor(System.Int64)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrderDetail.GetStatusPurchaseOrderResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrderDetail.GetStatusPurchaseOrderHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrderDetail.GetStatusPurchaseOrderHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Queries.VendorOrderDetail.GetStatusPurchaseOrderHandler},Greta.BO.BusinessLogic.Service.IVendorOrderDetailService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrderDetail.GetStatusPurchaseOrderHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.VendorOrderDetail.GetStatusPurchaseOrderQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrderDetail.VendorOrderDetailFilterQuery">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrderDetail.VendorOrderDetailFilterQuery.#ctor(Greta.BO.BusinessLogic.Models.Dto.Search.VendorOrderDetailSearchModel)">
            <inheritdoc />
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrderDetail.VendorOrderDetailFilterQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrderDetail.VendorOrderDetailHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrderDetail.VendorOrderDetailHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Queries.VendorOrderDetail.VendorOrderDetailHandler},Greta.BO.BusinessLogic.Service.IVendorOrderDetailService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrderDetail.VendorOrderDetailHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.VendorOrderDetail.VendorOrderDetailFilterQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrderDetail.VendorOrderDetailFilterResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrderDetail.VendorOrderDetailGetAllQuery">
            <inheritdoc />
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrderDetail.VendorOrderDetailGetAllQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrderDetail.VendorOrderDetailGetAllHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrderDetail.VendorOrderDetailGetAllHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Queries.VendorOrderDetail.VendorOrderDetailGetAllHandler},Greta.BO.BusinessLogic.Service.IVendorOrderDetailService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrderDetail.VendorOrderDetailGetAllHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.VendorOrderDetail.VendorOrderDetailGetAllQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrderDetail.VendorOrderDetailGetAllResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrderDetail.VendorOrderDetailGetByIdQuery">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrderDetail.VendorOrderDetailGetByIdQuery.#ctor(System.Int64)">
            <inheritdoc />
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrderDetail.VendorOrderDetailGetByIdQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrderDetail.VendorOrderDetailGetByIdHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrderDetail.VendorOrderDetailGetByIdHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Queries.VendorOrderDetail.VendorOrderDetailGetByIdHandler},Greta.BO.BusinessLogic.Service.IVendorOrderDetailService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrderDetail.VendorOrderDetailGetByIdHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.VendorOrderDetail.VendorOrderDetailGetByIdQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrderDetail.VendorOrderDetailGetByIdResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrder.VendorOrderFilterQuery">
            <summary>
            Query for filter the vendor order entities
            </summary>
            <param name="CurrentPage">Current page</param>
            <param name="PageSize">Current size</param>
            <param name="Filter">Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrder.VendorOrderFilterQuery.#ctor(System.Int32,System.Int32,Greta.BO.BusinessLogic.Models.Dto.Search.VendorOrderSearchModel)">
            <summary>
            Query for filter the vendor order entities
            </summary>
            <param name="CurrentPage">Current page</param>
            <param name="PageSize">Current size</param>
            <param name="Filter">Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrder.VendorOrderFilterQuery.CurrentPage">
            <summary>Current page</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrder.VendorOrderFilterQuery.PageSize">
            <summary>Current size</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrder.VendorOrderFilterQuery.Filter">
            <summary>Filter object of extend of type <see cref="T:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel"/></summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrder.VendorOrderFilterQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrder.VendorOrderFilterValidator">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrder.VendorOrderFilterValidator.#ctor">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrder.VendorOrderFilterHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrder.VendorOrderFilterHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Queries.VendorOrder.VendorOrderFilterHandler},Greta.BO.BusinessLogic.Service.IVendorOrderService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrder.VendorOrderFilterHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.VendorOrder.VendorOrderFilterQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrder.VendorOrderFilterResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrder.VendorOrderGetAllQuery">
            <summary>
            Query for return all vendor orders
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrder.VendorOrderGetAllQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrder.VendorOrderGetAllHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrder.VendorOrderGetAllHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Queries.VendorOrder.VendorOrderGetAllHandler},Greta.BO.BusinessLogic.Service.IVendorOrderService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrder.VendorOrderGetAllHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.VendorOrder.VendorOrderGetAllQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrder.VendorOrderGetAllResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrder.VendorOrderGetByIdQuery">
            <summary>
            Return vendor order by id, throw exception if exists more than 1
            </summary>
            <param name="Id">Vendor Order Id</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrder.VendorOrderGetByIdQuery.#ctor(System.Int64)">
            <summary>
            Return vendor order by id, throw exception if exists more than 1
            </summary>
            <param name="Id">Vendor Order Id</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrder.VendorOrderGetByIdQuery.Id">
            <summary>Vendor Order Id</summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrder.VendorOrderGetByIdQuery.Requirements">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrder.VendorOrderGetByIdHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrder.VendorOrderGetByIdHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Queries.VendorOrder.VendorOrderGetByIdHandler},Greta.BO.BusinessLogic.Service.IVendorOrderService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrder.VendorOrderGetByIdHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.VendorOrder.VendorOrderGetByIdQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrder.VendorOrderGetByIdResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrder.VendorOrderHasProductsQuery">
            <summary>
            Returns true if vendor order have products associated
            </summary>
            <param name="VendorOrderId">Vendor Order Id</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrder.VendorOrderHasProductsQuery.#ctor(System.Int64)">
            <summary>
            Returns true if vendor order have products associated
            </summary>
            <param name="VendorOrderId">Vendor Order Id</param>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrder.VendorOrderHasProductsQuery.VendorOrderId">
            <summary>Vendor Order Id</summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrder.VendorOrderHasProductsResponse">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrder.VendorOrderHasProductsHandler">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrder.VendorOrderHasProductsHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Handlers.Queries.VendorOrder.VendorOrderHasProductsHandler},Greta.BO.BusinessLogic.Service.IVendorOrderService,AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="service"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Handlers.Queries.VendorOrder.VendorOrderHasProductsHandler.Handle(Greta.BO.BusinessLogic.Handlers.Queries.VendorOrder.VendorOrderHasProductsQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Hubs.ICloudHub.OnNeedUpdate(System.String,System.Collections.Generic.List{Greta.BO.BusinessLogic.Hubs.SynchroPathData})">
            <summary>
                Inform to the Client need a update
            </summary>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Hubs.ICloudHub.GetPrinters(System.String,System.Int64,System.String)">
            <summary>
                Get a list of printers on the system
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Hubs.ICloudHub.SetConfiguration(Greta.BO.BusinessLogic.Models.Hubs.DeviceConfigurationUpdate)">
            <summary>
                SetConfiguration
            </summary>
            <param name="configuration">Send Configuration to device</param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Hubs.ICloudHub.TestPrint(System.String,System.String)">
            <summary>
            Test print from device
            </summary>
            <param name="printer"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Hubs.ICloudHub.OnCompleteFullBackup(Greta.BO.BusinessLogic.Models.Hubs.NotifyWorkerFullBackupStatus)">
            <summary>
            Notify to clients the backup is ready
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Hubs.ICloudHub.SendExternalScaleExternalJobToDevice(Greta.BO.Api.Entities.Dto.SendScaleDataDto)">
            <summary>
            send external scale data to device
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Hubs.CloudHub.GetPartialsUpdates(System.String,System.Int64)">
            <summary>
            Get all paths update for device
            </summary>
            <param name="deviceId"></param>
            <param name="tags"></param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Hubs.CloudHub.PingPong(System.String)">
            <summary>
                Update last connection time for device.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Hubs.CloudHub.OnGetPrinters(System.Collections.Generic.List{System.String},System.Int64,System.String)">
            <summary>
                Notify the response of device when request the printers
            </summary>
            <param name="printers"></param>
            <param name="deviceId"></param>
            <param name="connectionId"></param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Hubs.IFrontHub.OnGetPrinter(System.Object)">
            <summary>
            NOtify the result data from device
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Hubs.IFrontHub.OnCloseSynchronization(Greta.BO.BusinessLogic.Models.Hubs.NotifyWorkerStatus)">
            <summary>
            Notify one synchro are closed
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Hubs.IFrontHub.OnUpdateStatus(System.Object)">
            <summary>
            Update import status
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Hubs.FrontHub.GetPrinters(System.String,System.Int64)">
            <summary>
                Reuqest all the printers from one device
            </summary>
            <param name="type">romote, local, all</param>
            <param name="deviceid">device id</param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Hubs.FrontHub.NeedSynchro(System.String)">
            <summary>
                Reuqest to one device tahat need syncronization
            </summary>
            <param name="type">romote, local, all</param>
            <param name="deviceid">device id</param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Hubs.FrontHub.PingPong">
            <summary>
            Ping pong function for frontend
            </summary>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Interfaces.IGenericBaseService`1">
            <summary>
            Describe a generic service for greta system
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Interfaces.IGenericBaseService`1.Get(Ardalis.Specification.Specification{`0},System.Threading.CancellationToken)">
            <summary>
            Filter a list of entities
            </summary>
            <param name="specification"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Interfaces.IGenericBaseService`1.Get``1(Ardalis.Specification.Specification{`0,``0},System.Threading.CancellationToken)">
            <summary>
            Filter a list of entities and return a result model
            </summary>
            <param name="specification"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Interfaces.IGenericBaseService`1.Get(Ardalis.Specification.SingleResultSpecification{`0},System.Threading.CancellationToken)">
            <summary>
            Get a single item or default
            </summary>
            <param name="specification"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Interfaces.IGenericBaseService`1.Get``1(Ardalis.Specification.SingleResultSpecification{`0,``0},System.Threading.CancellationToken)">
            <summary>
            Get a single item or default
            </summary>
            <param name="specification"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Interfaces.IGenericBaseService`1.Filter(System.Int32,System.Int32,`0,System.String,System.String)">
            <summary>
            Filter an d paginate the data and get one object of type <see cref="T:Greta.Sdk.Core.Models.Pager.Pager`1"/>
            </summary>
            <param name="currentPage">Current page</param>
            <param name="pageSize">Page Size</param>
            <param name="filter">Filter object</param>
            <param name="search">Search string for build the like object</param>
            <param name="sort"> Source string with the format [field-sort order]</param>
            <returns>Pager object <see cref="T:Greta.Sdk.Core.Models.Pager.Pager`1"/></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Interfaces.IGenericBaseService`1.FilterSpec(System.Int32,System.Int32,Ardalis.Specification.ISpecification{`0},System.Threading.CancellationToken)">
            <summary>
            Filter an d paginate the data and get one object of type <see cref="T:Greta.Sdk.Core.Models.Pager.Pager`1"/>
            </summary>
            <param name="currentPage">Current page</param>
            <param name="pageSize">Page Size</param>
            <param name="spec">Filter specification</param>
            <param name="cancellationToken">Cancellation object</param>
            <returns>Pager object <see cref="T:Greta.Sdk.Core.Models.Pager.Pager`1"/></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Interfaces.IGenericBaseService`1.FilterSpec``1(System.Int32,System.Int32,Ardalis.Specification.ISpecification{`0,``0},System.Threading.CancellationToken)">
            <summary>
            Filter an d paginate the data and get one object of type <see cref="T:Greta.Sdk.Core.Models.Pager.Pager`1"/>
            </summary>
            <param name="currentPage">Current page</param>
            <param name="pageSize">Page Size</param>
            <param name="spec">Filter specification</param>
            <param name="cancellationToken">Cancellation object</param>
            <returns>Pager object <see cref="T:Greta.Sdk.Core.Models.Pager.Pager`1"/></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Interfaces.IGenericBaseService`1.ChangeState(System.Int64,System.Boolean)">
            <summary>
                Change State for entity
            </summary>
            <param name="id">Id</param>
            <param name="state">new State</param>
            <returns>Boolean success</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If id is less to -1</exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Interfaces.IGenericBaseService`1.Delete(System.Int64)">
            <summary>
            Delete an entity
            </summary>
            <param name="id">Entity Id</param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Interfaces.IGenericBaseService`1.DeleteRange(System.Collections.Generic.List{System.Int64})">
            <summary>
            Delete an Range of entities
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Interfaces.IGenericBaseService`1.Get">
            <summary>
            Get all entities
            </summary>
            <returns>Return an List <see cref="T:System.Collections.Generic.List`1"/> of entities</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Interfaces.IGenericBaseService`1.Get(System.Int64)">
            <summary>
            Get the entity of type {T} by id <see cref="!:T"/>
            </summary>
            <param name="id">Entity id</param>
            <returns>Return an entity</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Interfaces.IGenericBaseService`1.Post(`0)">
            <summary>
            Create a entity
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Interfaces.IGenericBaseService`1.Put(System.Int64,`0)">
            <summary>
                Update entity
            </summary>
            <param name="id">Id</param>
            <param name="entity">Entity to update</param>
            <returns>Boolean success</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If id is less to -1</exception>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Models.Dto.ActionResponseDeviceModel">
            <summary>
            Describe a Device Response
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Models.Dto.CategoryTargetGrossProfitModel">
            <summary>
            Model to change target gross profit to products
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Dto.CategoryTargetGrossProfitModel.StoreId">
            <summary>
            Store id, if is not selected => return -1
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Dto.CategoryTargetGrossProfitModel.RegionId">
            <summary>
            Region id, if is not selected => return -1
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Dto.CategoryTargetGrossProfitModel.AllStores">
            <summary>
            Return if gross profit change all products of all stores
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Dto.CategoryTargetGrossProfitModel.TargetGrossProfit">
            <summary>
            New gross profit
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Models.Dto.CutListDetailListModel">
            <summary>
            
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Models.Dto.CutListDetailModel">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Models.Dto.CutListDetailProductModel">
            <inheritdoc />
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Dto.DeviceModel.LastPongTime">
            <summary>
                Used for disconnect not reported elements
            </summary>
            <value></value>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Dto.DeviceModel.PrinterName">
            <summary>
                If type is Remote then ip:port
                if type is local then printer name
            </summary>
            <value>ex: 192.168.0.1:9001 or Epson4625</value>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Dto.DeviceModel.LabelPrinterName">
            <summary>
                If type is Remote then ip:port
                if type is local then printer name
            </summary>
            <value>ex: 192.168.0.1:9001 or Epson4625</value>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Dto.DeviceModel.Printers">
            <summary>
                Printers names coma separate
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Dto.DeviceModel.ScaleComName">
            <summary>
                COM1, COM2 example
            </summary>
            <value></value>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Dto.DeviceModel.ScaleBaudRate">
            <summary>
                Scale BaudRate
            </summary>
            <value></value>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Dto.ProductForFeeModel.QtyHand">
            <summary>
                Qty on Hand
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Dto.ProductForFeeModel.OrderTrigger">
            <summary>
                Not defined yet
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Dto.ProductForFeeModel.OrderAmount">
            <summary>
                Not defined yet
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Dto.KitProductModel.QtyHand">
            <summary>
                Qty on Hand
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Dto.KitProductModel.OrderTrigger">
            <summary>
                Not defined yet
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Dto.KitProductModel.OrderAmount">
            <summary>
                Not defined yet
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Dto.MixAndMatchDto.MixAndMatchFilterModel.ProductBuy">
            <summary>
                Product to buy for activate the BuyOneGetFree
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Dto.MixAndMatchDto.MixAndMatchGetByIdModel.ProductBuy">
            <summary>
                Product to buy for activate the BuyOneGetFree
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Dto.MixAndMatchDto.MixAndMatchModel.ProductBuy">
            <summary>
                Product to buy for activate the BuyOneGetFree
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Dto.ProductModel.QtyHand">
            <summary>
                Qty on Hand
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Dto.ProductModel.OrderTrigger">
            <summary>
                Not defined yet
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Dto.ProductModel.OrderAmount">
            <summary>
                Not defined yet
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Dto.ScaleLabelDefinitionModel.State">
            <summary>
                No used on this entity
            </summary>
            <value></value>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Dto.ScaleLabelTypeModel.LabelId">
            <summary>
                This value if ScaleType is GretaLabel then this is 500+
                if ScaleType is External then this value is 1 to 250
                Not user for shelftags
            </summary>
            <value></value>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Dto.ScaleLabelTypeModel.Design">
            <summary>
                This is only used for Shelf tags ans GretaLabels, not for externals
            </summary>
            <value></value>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Dto.ScaleProductModel.ByCount">
            <summary>
                By Count is the number of units in a package. Like I have a package of Dinner rolls there are 6 in the package. So
                By count would be 6
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Dto.ScaleProductModel.ServingPerContainer">
            <summary>
                Servings per container
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Dto.ScaleProductModel.ServingSize">
            <summary>
                Serving Size
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Dto.ScaleProductModel.AmountPerServingCalories">
            <summary>
                Amount per serving calories
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Dto.ScaleProductModel.TotalFatGrams">
            <summary>
                Total fat grams(g)
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Dto.ScaleProductModel.TotalFat">
            <summary>
                Total fat %
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Dto.ScaleProductModel.SaturedFatGrams">
            <summary>
                Saturated fat grams(g)
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Dto.ScaleProductModel.SaturedFat">
            <summary>
                Saturated fat %
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Dto.ScaleProductModel.CholesterolMGrams">
            <summary>
                Cholesterol mgrams(mg)
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Dto.ScaleProductModel.Cholesterol">
            <summary>
                Cholesterol %
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Dto.ScaleProductModel.SodiumMGrams">
            <summary>
                Sodium mgrams(mg)
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Dto.ScaleProductModel.Sodium">
            <summary>
                Sodium %
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Dto.ScaleProductModel.TotalCarbohydrateGrams">
            <summary>
                Total Carbohydrate grams(g)
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Dto.ScaleProductModel.TotalCarbohydrate">
            <summary>
                Total Carbohydrate %
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Dto.ScaleProductModel.DietaryFiberGrams">
            <summary>
                Dietary Fiber grams(g)
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Dto.ScaleProductModel.DietaryFiber">
            <summary>
                Dietary Fiber %
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Dto.ScaleProductModel.TotalSugarGrams">
            <summary>
                Total Sugar grams(g)
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Dto.ScaleProductModel.AddedSugarGrams">
            <summary>
                Added Sugar grams(g)
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Dto.ScaleProductModel.AddedSugar">
            <summary>
                Added Sugar %
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Dto.ScaleProductModel.ProteinGrams">
            <summary>
                Protein grams (g)
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Dto.ScaleProductModel.VitDMGrams">
            <summary>
                Vit. D microgram(mcg)
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Dto.ScaleProductModel.VitD">
            <summary>
                Vit. D %
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Dto.ScaleProductModel.CalciumMGrams">
            <summary>
                Calcium mgrams(mg)
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Dto.ScaleProductModel.Calcium">
            <summary>
                Calcium %
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Dto.ScaleProductModel.IronMGrams">
            <summary>
                Iron mgrams(mg)
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Dto.ScaleProductModel.Iron">
            <summary>
                Iron %
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Dto.ScaleProductModel.PotasMGrams">
            <summary>
                Potas mgrams(mg)
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Dto.ScaleProductModel.Potas">
            <summary>
                Potas %
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel.Sort">
            <summary>
                Sort data ( field_direction ex name_asc or description_desc )
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Dto.Search.BaseSearchModel.Search">
            <summary>
                Basic search string
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Models.Dto.Search.CutListDetailSearchModel">
            <inheritdoc />
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Dto.Search.CutListDetailSearchModel.CutListId">
            <summary>
            Cut List Id
            </summary>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Hubs.DeviceConfigurationUpdate.PrinterName">
            <summary>
                If type is Remote then ip:port
                if type is local then printer name
            </summary>
            <value>ex: 192.168.0.1:9001 or Epson4625</value>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Hubs.DeviceConfigurationUpdate.LabelPrinterName">
            <summary>
                If type is Remote then ip:port
                if type is local then printer name
            </summary>
            <value>ex: 192.168.0.1:9001 or Epson4625</value>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Hubs.DeviceConfigurationUpdate.ScaleComName">
            <summary>
                COM1, COM2 example
            </summary>
            <value></value>
        </member>
        <member name="P:Greta.BO.BusinessLogic.Models.Hubs.DeviceConfigurationUpdate.ScaleBaudRate">
            <summary>
                Scale BaudRate
            </summary>
            <value></value>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.AdBatchService.GetByName(System.String,System.Int64)">
            <summary>
                Get entity by name
            </summary>
            <param name="name">AdBatch name</param>
            <returns>AdBatch</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.AdBatchService.Post(Greta.BO.Api.Entities.AdBatch)">
            <summary>
                Insert a entity
            </summary>
            <param name="entity">Entity to insert</param>
            <returns>Entity</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.AdBatchService.Put(System.Int64,Greta.BO.Api.Entities.AdBatch)">
            <summary>
                Update entity
            </summary>
            <param name="id">Id</param>
            <param name="entity">Entity to update</param>
            <returns>Boolean success</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If id is less to -1</exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.AdBatchService.DeleteRange(System.Collections.Generic.List{System.Int64})">
            <summary>
                Delete a list
            </summary>
            <param name="ids">List of ids</param>
            <returns>Boolean success</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If list is null or empty</exception>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.IAnimalService">
            <summary>
            Service layer for animal entity
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IAnimalService.GetAnimalByRancher(System.Int64)">
            <summary>
                get a list of animals by rancher id
            </summary>
            <param name="rancherId">Rancher Id</param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IAnimalService.GetAnimalByBreed(System.Int64)">
            <summary>
                get a list of animals by breed id
            </summary>
            <param name="breedId">Breed Id</param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IAnimalService.GetSelectScheduleForDay(System.DateTime)">
            <summary>
               Get Breeds allowed
            </summary>
            <param name="date">Date</param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IAnimalService.ValidateForDay(System.DateTime)">
            <summary>
                Validate if this day can be added more data
            </summary>
            <param name="date">Date</param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.AnimalService">
            <inheritdoc cref="T:Greta.BO.BusinessLogic.Service.IAnimalService" />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.AnimalService.#ctor(Greta.BO.Api.Abstractions.IAnimalRepository,Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Service.AnimalService})">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.AnimalService.Get(System.Int64)">
            <summary>
                Get entity by Id
            </summary>
            <param name="id">Id</param>
            <returns>Animal</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If id is less to -1</exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.AnimalService.GetAnimalByRancher(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.AnimalService.GetAnimalByBreed(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.AnimalService.Post(Greta.BO.Api.Entities.Animal)">
            <summary>
                Insert a entity
            </summary>
            <param name="entity">Entity to insert</param>
            <returns>Entity</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.AnimalService.Put(System.Int64,Greta.BO.Api.Entities.Animal)">
            <summary>
                Update entity
            </summary>
            <param name="id">Id</param>
            <param name="entity">Entity to update</param>
            <returns>Boolean success</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If id is less to -1</exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.AnimalService.GetSelectScheduleForDay(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.AnimalService.ValidateForDay(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.BaseService`2">
            <summary>
            Base implementation for <exception cref="T:Greta.BO.BusinessLogic.Interfaces.IGenericBaseService`1"></exception>
            </summary>
            <typeparam name="TRepository"></typeparam>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.BaseService`2.GenerateCsv``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Generate a csv string format for a list of entities
            </summary>
            <param name="rows"></param>
            <typeparam name="TEntityCsv"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.BaseService`2.Get(Ardalis.Specification.Specification{`1},System.Threading.CancellationToken)">
            <summary>
            Filter a list of entities
            </summary>
            <param name="specification"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.BaseService`2.Get``1(Ardalis.Specification.Specification{`1,``0},System.Threading.CancellationToken)">
            <summary>
            Filter a list of entities and return a result model
            </summary>
            <param name="specification"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.BaseService`2.Get(Ardalis.Specification.SingleResultSpecification{`1},System.Threading.CancellationToken)">
            <summary>
            Get a single item or default
            </summary>
            <param name="specification"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.BaseService`2.Get``1(Ardalis.Specification.SingleResultSpecification{`1,``0},System.Threading.CancellationToken)">
            <summary>
            Get a single item or default
            </summary>
            <param name="specification"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.BaseService`2.Filter(System.Int32,System.Int32,`1,System.String,System.String)">
            <summary>
                Filter and sort list of entities
            </summary>
            <param name="currentPage">Current page</param>
            <param name="pageSize">Page size</param>
            <param name="filter">Filter params</param>
            <param name="searchstring">basic searc string</param>
            <param name="sortstring">sort string </param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.BaseService`2.FilterqueryBuilder(`1,System.String,System.String[],Microsoft.EntityFrameworkCore.DbSet{`1})">
            <summary>
                Function to return filter
            </summary>
            <param name="filter">Entity to filter</param>
            <param name="searchstring">String to bassic filter</param>
            <param name="sortSplited">sort data</param>
            <param name="query">Dataset base to return</param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.BaseService`2.FilterSpec(System.Int32,System.Int32,Ardalis.Specification.ISpecification{`1},System.Threading.CancellationToken)">
            <summary>
                Function to return filter
            </summary>
            <param name="pageSize">Data amount</param>
            <param name="currentPage">Current page for skip data</param>
            <param name="spec">Specification</param>
            <param name="cancellationToken">Cancellation Token by default [default]</param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.BaseService`2.FilterSpec``1(System.Int32,System.Int32,Ardalis.Specification.ISpecification{`1,``0},System.Threading.CancellationToken)">
            <summary>
                Function to return filter
            </summary>
            <param name="pageSize">Data amount</param>
            <param name="currentPage">Current page for skip data</param>
            <param name="spec">Specification</param>
            <param name="cancellationToken">Cancellation Token by default [default]</param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.BaseService`2.Get">
            <summary>
                Get all entities
            </summary>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.BaseService`2.Get(System.Int64)">
            <summary>
                Get entity by Id
            </summary>
            <param name="id">Id</param>
            <returns>Customer</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If id is less to -1</exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.BaseService`2.Post(`1)">
            <summary>
                Insert a entity
            </summary>
            <param name="entity">Entity to insert</param>
            <returns>Entity</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.BaseService`2.Delete(System.Int64)">
            <summary>
                Delete a entity
            </summary>
            <param name="id">Id</param>
            <returns>Boolean success</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If id is less to -1</exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.BaseService`2.DeleteRange(System.Collections.Generic.List{System.Int64})">
            <summary>
                Delete a list
            </summary>
            <param name="ids">List of ids</param>
            <returns>Boolean success</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If list is null or empty</exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.BinLocationService.GetByName(System.String,System.Int64)">
            <summary>
                Get entity by name
            </summary>
            <param name="name">BinLocation name</param>
            <returns>BinLocation</returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.IBOUserService">
            <summary>
            Service layer for BOUser entity
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.BOUserService.GetByUserId(System.String)">
            <summary>
                Get a BOUser by Global user id
            </summary>
            <param name="id">GLobal user id</param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.BOUserService.GetById(System.Int64)">
            <summary>
                Get a BOUser by Global user id
            </summary>
            <param name="id">GLobal user id</param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.BOUserService.GetByPin(System.String,System.Int64)">
            <summary>
            Chack if exist user with this pin
            </summary>
            <param name="pin"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.BOUserService.GetDetachedById(System.Int64)">
            <summary>
                Get a BOUser by Global user id
            </summary>
            <param name="id">GLobal user id</param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.BOUserService.Get(System.Int64)">
            <summary>
                Get entity by Id
            </summary>
            <param name="id">Id</param>
            <returns>BoUser</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If id is less to -1</exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.BOUserService.Delete(System.Int64)">
            <summary>
                Delete a entity
            </summary>
            <param name="id">Id</param>
            <returns>Boolean success</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If id is less to -1</exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.BOUserService.DeleteRange(System.Collections.Generic.List{System.Int64})">
            <summary>
                Delete a list
            </summary>
            <param name="ids">List of ids</param>
            <returns>Boolean success</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If list is null or empty</exception>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.IBreedService">
            <summary>
            Service layer for breed entity
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.BreedService">
            <inheritdoc cref="T:Greta.BO.BusinessLogic.Service.IBreedService" />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.BreedService.#ctor(Greta.BO.Api.Abstractions.IBreedRepository,Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Service.BreedService})">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.ICategoryService">
            <summary>
            Service layer for category entity
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ICategoryService.GetByCategoryId(System.Int32,System.Int64)">
            <summary>
                Get entity by categoryId
            </summary>
            <param name="catId">Category Id</param>
            <param name="id">Category Id</param>
            <returns>Category</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ICategoryService.GetIdByCategoryId(System.Int32)">
            <summary>
                Get Category Id by categoryId
            </summary>
            <param name="catId">Category Id</param>
            <returns>Id</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ICategoryService.GetByDepartment(System.Int64)">
            <summary>
                get a list of categories by department id
            </summary>
            <param name="dep">department id</param>
            <returns>List Categories</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ICategoryService.GetIdFromCategoryId(System.Int32)">
            <summary>
                Get Id by categoryId
            </summary>
            <param name="categoryId">Category Id</param>
            <returns>Id</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ICategoryService.CanDeleted(System.Int64)">
            <summary>
            Determine if this category entity can be deleted
            </summary>
            <param name="id">Category Id</param>
            <returns>Return true if this category dont have any element associated</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ICategoryService.CanDeleted(System.Collections.Generic.List{System.Int64})">
            <summary>
            Determine if this category entity can be deleted of list
            </summary>
            <param name="ids">Category Id</param>
            <returns>Return true if this category dont have any element associated</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ICategoryService.GetCategoryWithProduct(System.Int64)">
            <summary>
                Get category entity with your products by categoryId
            </summary>
            <param name="id">Category Id</param>
            <returns>Category</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ICategoryService.FilterCategory(System.Int32,System.Int32,Greta.BO.BusinessLogic.Models.Dto.Search.CategorySearchModel,System.String,System.String)">
            <summary>
                Filter and sort list of entities
            </summary>
            <param name="currentPage">Current page</param>
            <param name="pageSize">Page size</param>
            <param name="filter">Filter params</param>
            <param name="searchstring">basic searc string</param>
            <param name="sortstring">sort string </param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ICategoryService.GetWithOnlineStores(System.Int64)">
            <summary>
            Get Category with online stores
            </summary>
            <param name="id">Category id</param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ICategoryService.GetWithOnlineStores(System.Collections.Generic.List{System.Int64})">
            <summary>
            Get a list of Category with online stores
            </summary>
            <param name="ids">List of ids of categories</param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ICategoryService.ChangeLiquor(System.Int64,System.Boolean)">
            <summary>
            Change isLiquorCategory of the Category
            </summary>
            <param name="id"></param>
            <param name="isLiquorCategory"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.CategoryService">
            <inheritdoc cref="T:Greta.BO.BusinessLogic.Service.ICategoryService" />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.CategoryService.#ctor(Greta.BO.Api.Abstractions.ICategoryRepository,Greta.BO.BusinessLogic.Service.ISynchroService,Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Service.CategoryService})">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.CategoryService.Get(System.Int64)">
            <summary>
                Get entity by Id
            </summary>
            <param name="id">Id</param>
            <returns>Customer</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If id is less to -1</exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.CategoryService.Get">
            <inheritdoc cref="T:Greta.BO.BusinessLogic.Service.BaseService`2"/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.CategoryService.GetByDepartment(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.CategoryService.GetByCategoryId(System.Int32,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.CategoryService.GetIdByCategoryId(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.CategoryService.Post(Greta.BO.Api.Entities.Category)">
            <summary>
                Insert a entity
            </summary>
            <param name="entity">Entity to insert</param>
            <returns>Entity</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.CategoryService.Put(System.Int64,Greta.BO.Api.Entities.Category)">
            <summary>
                Update entity
            </summary>
            <param name="id">Id</param>
            <param name="entity">Entity to update</param>
            <returns>Boolean success</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If id is less to -1</exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.CategoryService.GetIdFromCategoryId(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.CategoryService.FilterCategory(System.Int32,System.Int32,Greta.BO.BusinessLogic.Models.Dto.Search.CategorySearchModel,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.CategoryService.GetWithOnlineStores(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.CategoryService.GetWithOnlineStores(System.Collections.Generic.List{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.CategoryService.CanDeleted(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.CategoryService.CanDeleted(System.Collections.Generic.List{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.CategoryService.GetCategoryWithProduct(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.CategoryService.ChangeLiquor(System.Int64,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.CSVMappingService.CSVMappingImport(Microsoft.AspNetCore.Http.IFormFile,System.Char,Greta.BO.Api.Entities.Enum.ModelImport,System.Collections.Generic.List{System.Int64},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
                Get colums name list
            </summary>
            <param name="csvFile">csv file</param>
            <param name="separator">csv separador character</param>
            <param name="modelImport">model to import</param>
            <returns>Colums list</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.CSVMappingService.GetColumsName(Microsoft.AspNetCore.Http.IFormFile,System.Char,Greta.BO.Api.Entities.Enum.ModelImport)">
            <summary>
                Get colums name list
            </summary>
            <param name="csvFile">csv file</param>
            <param name="separator">csv separador character</param>
            <param name="modelImport">model to import</param>
            <returns>Colums list</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.CSVMappingService.GetSugestionMap(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
               Get columns sugestionsname list
            </summary>
            <param name="csv"></param>
            <param name="databaseFields"></param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.CSVMappingService.GetById(System.Int64)">
            <summary>
                Get entity by Id
            </summary>
            <param name="id"></param>
            <returns>Mapping</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.CSVMappingService.GetByModelImport(Greta.BO.Api.Entities.Enum.ModelImport)">
            <summary>
                Get entity by ModelImport
            </summary>
            <param Id="Id">CSVMapping Id</param>
            <returns>Mapping List by ModelImport</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.CSVMappingService.GetByName(System.String,System.Int64)">
            <summary>
                Get entity by name
            </summary>
            <param name="name">PriceBatch name</param>
            <returns>PriceBatch</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.CSVMappingService.Filter(System.Int32,System.Int32,Greta.BO.Api.Entities.CSVMapping,System.String,System.String,Greta.BO.Api.Entities.Enum.ModelImport)">
            <summary>
                Filter and sort list of entities
            </summary>
            <param name="currentPage">Current page</param>
            <param name="pageSize">Page size</param>
            <param name="filter">Filter params</param>
            <param name="searchstring">basic searc string</param>
            <param name="sortstring">sort string </param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.CSVMappingService.Update(System.String,System.Int32,Greta.BO.Api.Entities.Enum.ModelImport)">
            <summary>
                Delete mapping
            </summary>
            <param name="csvHeaderIndex">Header index from csv file</param>
            <param name="modelHeader">Header from model</param>
            <param name="modelImport">model to import</param>
            <returns>Colums list</returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.ICustomerService">
            <summary>
            Service layer for customer entity
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ICustomerService.GetByName(System.String,System.Int64)">
            <summary>
                Get entity by name
            </summary>
            <param name="name">Customer name</param>
            <returns>Customer</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ICustomerService.UpdatePoints(System.Collections.Generic.List{Greta.BO.Api.Entities.Customer})">
            <summary>
                Update Points
            </summary>
            <param name="customers">Customers List</param>
            <returns>Boolean success</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ICustomerService.SearchByPhone(System.String)">
            <summary>
                Get entity by name
            </summary>
            <param name="phone">Customer phone</param>
            <returns>Customer</returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.CustomerService">
            <inheritdoc cref="T:Greta.BO.BusinessLogic.Service.ICustomerService" />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.CustomerService.#ctor(Greta.BO.Api.Abstractions.ICustomerRepository,Greta.BO.BusinessLogic.Service.ISynchroService,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Service.CustomerService})">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.CustomerService.Get(System.Int64)">
            <summary>
                Get entity by Id
            </summary>
            <param name="id">Id</param>
            <returns>Customer</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If id is less to -1</exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.CustomerService.SearchByPhone(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.CustomerService.GetByName(System.String,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.CustomerService.Post(Greta.BO.Api.Entities.Customer)">
            <summary>
                Insert a entity
            </summary>
            <param name="entity">Entity to insert</param>
            <returns>Entity</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.CustomerService.Put(System.Int64,Greta.BO.Api.Entities.Customer)">
            <summary>
                Update entity
            </summary>
            <param name="id">Id</param>
            <param name="entity">Entity to update</param>
            <returns>Boolean success</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If id is less to -1</exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.CustomerService.UpdatePoints(System.Collections.Generic.List{Greta.BO.Api.Entities.Customer})">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.ICutListDetailService">
            <summary>
            Service layer for CutListDetail entity
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ICutListDetailService.PostMultiple(System.Collections.Generic.List{Greta.BO.Api.Entities.CutListDetail},System.Threading.CancellationToken)">
            <summary>
            Save list of cut list detail and assign to a cut list
            </summary>
            <param name="entity">List of cut list detail to save</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.CutListDetailService">
            <inheritdoc cref="T:Greta.BO.BusinessLogic.Service.ICutListService"/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.CutListDetailService.#ctor(Greta.BO.Api.Abstractions.ICutListDetailRepository,Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Service.CutListDetailService})">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.CutListDetailService.PostMultiple(System.Collections.Generic.List{Greta.BO.Api.Entities.CutListDetail},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.ICutListService">
            <summary>
            Service layer for CutList entity
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ICutListService.GetCustomerByAnimal(System.Int64)">
            <summary>
            List of customer associated with an animal
            </summary>
            <param name="animalId">Animal Id</param>
            <returns>List of customers</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ICutListService.GetCutListDetails(System.Int64)">
            <summary>
            Get CutList by animal and customer 
            </summary>
            <param name="cutListId"></param>
            <returns>If exist return CutList, else return null</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ICutListService.GetWithDetails(System.Int64)">
            <summary>
            Get CutList order with details
            </summary>
            <param name="id">Cut List Id</param>
            <returns>Return a Cut List with details</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ICutListService.GetScaleProductsByUpcAndPlu(System.String,System.Int32,System.Int64)">
            <summary>
            Get ScaleProduct by UPC and PLUNumber 
            </summary>
            <param name="upc"></param>
            <param name="plu"></param>
            <param name="animalId"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ICutListService.GetScaleProductsOfTemplate(System.Int64,System.Int64)">
            <summary>
            Get ScaleProduct of Template 
            </summary>
            <param name="cutListTemplateId"></param>
            <param name="animalId"></param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.CutListService">
            <inheritdoc cref="T:Greta.BO.BusinessLogic.Service.ICutListService"/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.CutListService.#ctor(Greta.BO.Api.Abstractions.ICutListRepository,Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Service.CutListService})">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.CutListService.GetCustomerByAnimal(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.CutListService.GetCutListDetails(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.CutListService.GetScaleProductsByUpcAndPlu(System.String,System.Int32,System.Int64)">
            <summary>
            
            </summary>
            <param name="upc"></param>
            <param name="plu"></param>
            <param name="animalId"></param>
            <returns></returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException"></exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.CutListService.GetScaleProductsOfTemplate(System.Int64,System.Int64)">
            <summary>
            Get list of ScaleProduct of Template
            </summary>
            <param name="cutListTemplateId"></param>
            <param name="animalId"></param>
            <returns></returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException"></exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.CutListService.GetWithDetails(System.Int64)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.ICutListTemplateService">
            <summary>
            Service layer for CutListTemplate entity
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ICutListTemplateService.CanDeleted(System.Int64)">
            <summary>
            Determine if this CutListTemplate entity can be deleted
            </summary>
            <param name="id">CutListTemplate Id</param>
            <returns>Return true if this CutListTemplate don't have any product associated</returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.CutListTemplateService">
            <inheritdoc cref="T:Greta.BO.BusinessLogic.Service.ICutListTemplateService" />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.CutListTemplateService.#ctor(Greta.BO.Api.Abstractions.ICutListTemplateRepository,Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Service.CutListTemplateService})">
            <summary>
            
            </summary>
            <param name="cutListTemplateRepository"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.CutListTemplateService.CanDeleted(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.CutListTemplateService.Post(Greta.BO.Api.Entities.CutListTemplate)">
            <summary>
                Insert a entity
            </summary>
            <param name="entity">Entity to insert</param>
            <returns>Entity</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.CutListTemplateService.Put(System.Int64,Greta.BO.Api.Entities.CutListTemplate)">
            <summary>
                Update entity
            </summary>
            <param name="id">Id</param>
            <param name="entity">Entity to update</param>
            <returns>Boolean success</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If id is less to -1</exception>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.IDepartmentService">
            <summary>
            Service layer for department entity
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IDepartmentService.GetByDepartmentId(System.Int32,System.Int64)">
            <summary>
                Get entity by departmentId
            </summary>
            <param name="departmentId">department Id</param>
            <param name="id">Id</param>
            <returns>Category</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IDepartmentService.Get(System.Boolean)">
            <summary>
                Get entity by perishable
            </summary>
            <param name="perishable">Bool perishable</param>
            <returns>List of Perishables departments</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IDepartmentService.GetByDepartment(System.Int32,System.Boolean)">
            <summary>
                get a list of departments by department id
            </summary>
            <param name="departmentId">department id</param>
            <param name="track">department id</param>
            <returns>department</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IDepartmentService.GetIdFromDepartmentId(System.Int32)">
            <summary>
                Get Id by departmentId
            </summary>
            <param name="departmentId">Department Id</param>
            <returns>Id</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IDepartmentService.CanDeleted(System.Int64)">
            <summary>
            Determine if this depoartment entity can be deleted
            </summary>
            <param name="id">Department Id</param>
            <returns>Return true if this department dont have any element associated</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IDepartmentService.CanDeleted(System.Collections.Generic.List{System.Int64})">
            <summary>
            Determine if this category entity can be deleted of list
            </summary>
            <param name="ids">Department list Id</param>
            <returns>Return true if this department dont have any element associated</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IDepartmentService.GetUpdatesForScales(System.DateTime,System.Collections.Generic.List{System.Int64})">
            <summary>
                Updates departments for scales
            </summary>
            <param name="last">last date</param>
            <param name="deps">department list</param>
            <returns>department</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IDepartmentService.GetAllForScales(System.Collections.Generic.List{System.Int64})">
            <summary>
                Get departments for scales
            </summary>
            <param name="deps">department list</param>
            <returns>department</returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.DepartmentService">
            <inheritdoc cref="T:Greta.BO.BusinessLogic.Service.IDepartmentService" />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.DepartmentService.#ctor(Greta.BO.Api.Abstractions.IDepartmentRepository,Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Service.DepartmentService},Greta.BO.BusinessLogic.Service.ISynchroService)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.DepartmentService.GetByDepartmentId(System.Int32,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.DepartmentService.Get(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.DepartmentService.GetUpdatesForScales(System.DateTime,System.Collections.Generic.List{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.DepartmentService.GetAllForScales(System.Collections.Generic.List{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.DepartmentService.GetByDepartment(System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.DepartmentService.GetIdFromDepartmentId(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.DepartmentService.CanDeleted(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.DepartmentService.CanDeleted(System.Collections.Generic.List{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.DepartmentService.Get(System.Int64)">
            <summary>
                Get entity Department by Id
            </summary>
            <param name="id">Id</param>
            <returns>Department</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If id is less to -1</exception>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.IDeviceService">
            <summary>
            Service layer for device entity
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IDeviceService.SignalRConnected(System.String,System.String)">
            <summary>
            Signal connected in a device
            </summary>
            <param name="deviceId">device Id</param>
            <param name="connectionId">connection Id</param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IDeviceService.SignalRDisconnected(System.String)">
            <summary>
            Signal disconnected in a device
            </summary>
            <param name="connectionId">connection Id</param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IDeviceService.GetConnectionIdById(System.Int64)">
            <summary>
            Get connection device by id
            </summary>
            <param name="id">Id</param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IDeviceService.GetConnectionIdByDeviceId(System.String)">
            <summary>
            Get connection device by device id
            </summary>
            <param name="id">device Id</param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IDeviceService.GetConnectionIdByGuid(System.String)">
            <summary>
            Get connection device by guid
            </summary>
            <param name="guid">guid</param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IDeviceService.UpdatePong(System.String,System.String)">
            <summary>
                Update entity last pong time and signalr connection id
            </summary>
            <param name="deviceId">deviceId</param>
            <param name="connectionId">connectionId</param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IDeviceService.PutName(System.Int64,Greta.BO.Api.Entities.Device)">
            <summary>
                Update entity only allow Name
            </summary>
            <param name="id">Id</param>
            <param name="entity">Entity to update</param>
            <returns>Boolean success</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If id is less to -1</exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IDeviceService.GetDeviceConnectedByStore(System.Int64)">
            <summary>
                Get all the Entities by store id
            </summary>
            <param name="storeId">Store id</param>
            <returns>Return list of entities</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IDeviceService.GetSynchronizationStatus(System.Int64)">
            <summary>
                Get synchronization status of devices
            </summary>
            <param name="requestId">requestId Id</param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IDeviceService.PutConfiguration(System.Int64,Greta.BO.Api.Entities.Device)">
            <summary>
            Update entity only allow Configuration Fields
            </summary>
            <param name="id">Id</param>
            <param name="entity">Entity to update</param>
            <returns>Boolean success</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If id is less to -1</exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IDeviceService.UpdateTagVersion(System.String,System.Int64)">
            <summary>
                Update tag version device
            </summary>
            <param name="deviceId">Device Id</param>
            <param name="newTag">new Tag</param>
            <returns>Return true or false</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IDeviceService.GetIdByGuid(System.Guid)">
            <summary>
                Get id by guid
            </summary>
            <param name="guid">guid</param>
            <returns>Id</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IDeviceService.GetByDeviceLic(System.String)">
            <summary>
                Get device by lic
            </summary>
            <param name="lic">lic</param>
            <returns>device</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IDeviceService.GetAllConnectedByStore(System.Int64)">
            <summary>
                Get all the connected entities by store id
            </summary>
            <param name="storeId">Store id</param>
            <returns>Return list of entities</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IDeviceService.GetDeviceByConnectionId(System.String)">
            <summary>
                Get device by signalRConnectionId
            </summary>
            <param name="signalRConnectionId">signalR connection id</param>
            <returns>device</returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.DeviceService">
            <inheritdoc cref="T:Greta.BO.BusinessLogic.Service.IDeviceService" />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.DeviceService.#ctor(Greta.BO.Api.Abstractions.IDeviceRepository,Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Service.DeviceService})">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.DeviceService.Get">
            <summary>
                Get all entities
            </summary>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.DeviceService.PutConfiguration(System.Int64,Greta.BO.Api.Entities.Device)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.DeviceService.UpdateTagVersion(System.String,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.DeviceService.PutName(System.Int64,Greta.BO.Api.Entities.Device)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.DeviceService.GetSynchronizationStatus(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.DeviceService.GetConnectionIdById(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.DeviceService.GetConnectionIdByDeviceId(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.DeviceService.GetConnectionIdByGuid(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.DeviceService.GetDeviceByConnectionId(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.DeviceService.GetAllConnectedByStore(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.DeviceService.GetIdByGuid(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.DeviceService.GetByDeviceLic(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.DeviceService.SignalRConnected(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.DeviceService.SignalRDisconnected(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.DeviceService.UpdatePong(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.DeviceService.GetDeviceConnectedByStore(System.Int64)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.IDiscountService">
            <summary>
            Service layer for discount entity
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.DiscountService">
            <inheritdoc cref="T:Greta.BO.BusinessLogic.Service.IDiscountService" />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.DiscountService.#ctor(Greta.BO.Api.Abstractions.IDiscountRepository,Greta.BO.BusinessLogic.Service.ISynchroService,Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Service.DiscountService})">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.DiscountService.Get(System.Int64)">
            <summary>
                Get entity by Id
            </summary>
            <param name="id">Id</param>
            <returns>Customer</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If id is less to -1</exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.DiscountService.Post(Greta.BO.Api.Entities.Discount)">
            <summary>
                Insert a entity
            </summary>
            <param name="entity">Entity to insert</param>
            <returns>Entity</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.DiscountService.Put(System.Int64,Greta.BO.Api.Entities.Discount)">
            <summary>
                Update entity
            </summary>
            <param name="id">Id</param>
            <param name="entity">Entity to update</param>
            <returns>Boolean success</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If id is less to -1</exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.EmployeeService.Post(Greta.BO.Api.Entities.Employee)">
            <summary>
                Insert a entity
            </summary>
            <param name="entity">Entity to insert</param>
            <returns>Entity</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.EmployeeService.Put(System.Int64,Greta.BO.Api.Entities.Employee)">
            <summary>
                Update entity
            </summary>
            <param name="id">Id</param>
            <param name="entity">Entity to update</param>
            <returns>Boolean success</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If id is less to -1</exception>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.IExternalScaleService">
            <summary>
            Service layer for external scale entity
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IExternalScaleService.GetExternalScaleByStore(System.Int64)">
            <summary>
                Get Entity by id
            </summary>
            <param name="storeId">Store Id</param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IExternalScaleService.GetExternalScaleByStoreAndDepartment(System.Int64,System.Int64)">
            <summary>
                Get Entity list by storeId and departmentId
            </summary>
            <param name="storeId">Store Id</param>
            <param name="departmentId">Department Id</param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.ExternalScaleService">
            <inheritdoc cref="T:Greta.BO.BusinessLogic.Service.IFamilyService" />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ExternalScaleService.#ctor(Greta.BO.Api.Abstractions.IExternalScaleRepository,Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Service.ExternalScaleService},Greta.BO.BusinessLogic.Service.ISynchroService)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ExternalScaleService.Get(System.Int64)">
            <summary>
                Get entity by Id
            </summary>
            <param name="id">Id</param>
            <returns>ExternalScale</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If id is less to -1</exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ExternalScaleService.GetExternalScaleByStore(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ExternalScaleService.GetExternalScaleByStoreAndDepartment(System.Int64,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ExternalScaleService.Post(Greta.BO.Api.Entities.ExternalScale)">
            <summary>
                Insert a entity
            </summary>
            <param name="entity">Entity to insert</param>
            <returns>Entity</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ExternalScaleService.Put(System.Int64,Greta.BO.Api.Entities.ExternalScale)">
            <summary>
                Update entity
            </summary>
            <param name="id">Id</param>
            <param name="entity">Entity to update</param>
            <returns>Boolean success</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If id is less to -1</exception>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.IFamilyService">
            <summary>
            Service layer for family entity
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IFamilyService.CanDeleted(System.Int64)">
            <summary>
            Determine if this family entity can be deleted
            </summary>
            <param name="id">Family Id</param>
            <returns>Return true if this family don't have any product associated</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IFamilyService.AddProductsToFamily(System.Int64,System.Collections.Generic.List{System.String})">
            <summary>
            Add a list of product to this family
            </summary>
            <param name="id">Family Id</param>
            <param name="uPCs">List of upc of the product to add</param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IFamilyService.FilterFamily(System.Int32,System.Int32,Greta.BO.BusinessLogic.Specifications.FamilySpecs.ProductByFamilyIdSpec)">
            <summary>
            filter product associated to one family id
            </summary>
            <param name="currentPage">Current page</param>
            <param name="pageSize">Page Size</param>
            <param name="spec">specification</param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IFamilyService.DeleteProduct(System.Int64,System.Int64)">
            <summary>
            Remove association of one product from one family
            </summary>
            <param name="familyId">Family Id</param>
            <param name="productId">Product Id</param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IFamilyService.DeleteRangeProduct(System.Int64,System.Collections.Generic.List{System.Int64})">
            <summary>
            Remove a list of products from a family
            </summary>
            <param name="familyId">Family Id</param>
            <param name="productIds">List of product id</param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.FamilyService">
            <inheritdoc cref="T:Greta.BO.BusinessLogic.Service.IFamilyService" />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.FamilyService.#ctor(Greta.BO.Api.Abstractions.IFamilyRepository,Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Service.FamilyService},Greta.BO.BusinessLogic.Service.ISynchroService)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.FamilyService.CanDeleted(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.FamilyService.AddProductsToFamily(System.Int64,System.Collections.Generic.List{System.String})">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.FamilyService.FilterFamily(System.Int32,System.Int32,Greta.BO.BusinessLogic.Specifications.FamilySpecs.ProductByFamilyIdSpec)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.FamilyService.DeleteProduct(System.Int64,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.FamilyService.DeleteRangeProduct(System.Int64,System.Collections.Generic.List{System.Int64})">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.IFeeService">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.FeeService">
            <inheritdoc cref="T:Greta.BO.BusinessLogic.Service.FeeService" />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.FeeService.#ctor(Greta.BO.Api.Abstractions.IFeeRepository,Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Service.FeeService})">
            <summary>
            
            </summary>
            <param name="repository"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.FeeService.#ctor(Greta.BO.Api.Abstractions.IFeeRepository,Greta.BO.BusinessLogic.Service.ISynchroService,Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Service.FeeService})">
            <summary>
            
            </summary>
            <param name="repository"></param>
            <param name="synchroService"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.FeeService.Get(System.Int64)">
            <summary>
                Get entity by Id
            </summary>
            <param name="id">Id</param>
            <returns>Customer</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If id is less to -1</exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.FeeService.Post(Greta.BO.Api.Entities.Fee)">
            <summary>
                Insert a entity
            </summary>
            <param name="entity">Entity to insert</param>
            <returns>Entity</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.FeeService.Put(System.Int64,Greta.BO.Api.Entities.Fee)">
            <summary>
                Update entity
            </summary>
            <param name="id">Id</param>
            <param name="entity">Entity to update</param>
            <returns>Boolean success</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If id is less to -1</exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.FeeService.ChangeState(System.Int64,System.Boolean)">
            <summary>
            Command for change state of Fee when there are synchro entities
            </summary>
            <param name="id"></param>
            <param name="state"></param>
            <returns></returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException"></exception>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.IFunctionGroupService">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IFunctionGroupService.GetByAplication(System.Int64)">
            <summary>
            Get entity by Application
            </summary>
            <param name="applicationId"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.FunctionGroupService">
            <summary>
            
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.FunctionGroupService.#ctor(Greta.BO.Api.Abstractions.IFunctionGroupRepository,Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Service.FunctionGroupService})">
            <summary>
            
            </summary>
            <param name="categoryRepository"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.FunctionGroupService.GetByAplication(System.Int64)">
            <summary>
                Get all entities
            </summary>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.IGiftCardService">
            <summary>
            Gift card service
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IGiftCardService.GetByCardNumber(System.String)">
            <summary>
            Get gift card by card number
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IGiftCardService.ProcessGc(System.Collections.Generic.List{Greta.BO.Api.Entities.GiftCard},System.String)">
            <summary>
            Process gift cards
            </summary>
            <param name="giftcards"></param>
            <param name="connectionString">Database connection string</param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IGiftCardService.AddTransaction(Greta.BO.Api.Entities.GiftCard,Greta.BO.Api.Entities.GiftCardTransaction)">
            <summary>
            Add transaction to gift card
            </summary>
            <param name="obj"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.GiftCardService">
            <inheritdoc cref="T:Greta.BO.BusinessLogic.Service.IGiftCardService" />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.GiftCardService.#ctor(Greta.BO.Api.Abstractions.IGiftCardRepository,Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Service.GiftCardService})">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.GiftCardService.AddTransaction(Greta.BO.Api.Entities.GiftCard,Greta.BO.Api.Entities.GiftCardTransaction)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.GiftCardService.GetByCardNumber(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.GiftCardService.ProcessGc(System.Collections.Generic.List{Greta.BO.Api.Entities.GiftCard},System.String)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.IGrindService">
            <summary>
            Service layer for grind entity
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.GrindService">
            <inheritdoc cref="T:Greta.BO.BusinessLogic.Service.IGrindService" />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.GrindService.#ctor(Greta.BO.Api.Abstractions.IGrindRepository,Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Service.GrindService})">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.LocationService.GetCountries">
            <summary>
                Get all Countries
            </summary>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.LocationService.GetCountryById(System.Int64)">
            <summary>
                Get Country by Id
            </summary>
            <param name="id">Id</param>
            <returns>Country</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If id is less to -1</exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.LocationService.GetProvincesByCountry(System.Int64)">
            <summary>
                Get All Provinces by countryId
            </summary>
            <param name="countryId">Country Id</param>
            <returns>Provinces for countryId passed by parameters</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If id is less to -1</exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.LoyaltyDiscountService.HaveSameStore(System.Int64,System.Nullable{System.Int64})">
            <summary>
            Return the discount with this store but diferent to id if id is diferent to null
            </summary>
            <param name="storeId"></param>
            <param name="id"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.LoyaltyDiscountService.GetByStore(System.Int64)">
            <summary>
            Return LoyaltyDiscount by store id
            </summary>
            <param name="storeId"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.IMixAndMatchService">
            <summary>
            
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.MixAndMatchService">
            <summary>
            
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.MixAndMatchService.#ctor(Greta.BO.Api.Abstractions.IMixAndMatchRepository,Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Service.MixAndMatchService})">
            <summary>
            
            </summary>
            <param name="familyRepository"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.MixAndMatchService.#ctor(Greta.BO.Api.Abstractions.IMixAndMatchRepository,Greta.BO.BusinessLogic.Service.ISynchroService,Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Service.MixAndMatchService})">
            <summary>
            
            </summary>
            <param name="repository"></param>
            <param name="synchroService"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.MixAndMatchService.Get(System.Int64)">
            <summary>
                Get entity by Id
            </summary>
            <param name="id">Id</param>
            <returns>Customer</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If id is less to -1</exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.MixAndMatchService.Post(Greta.BO.Api.Entities.MixAndMatch)">
            <summary>
                Insert a entity
            </summary>
            <param name="entity">Entity to insert</param>
            <returns>Entity</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.MixAndMatchService.Put(System.Int64,Greta.BO.Api.Entities.MixAndMatch)">
            <summary>
                Update entity
            </summary>
            <param name="id">Id</param>
            <param name="entity">Entity to update</param>
            <returns>Boolean success</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If id is less to -1</exception>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.IOnlineStoreService">
            <summary>
            Service layer for online store entity
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IOnlineStoreService.CanDeleted(System.Int64)">
            <summary>
            Determine if this online store entity can be deleted
            </summary>
            <param name="id">online store Id</param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IOnlineStoreService.CanDeleted(System.Collections.Generic.List{System.Int64})">
            <summary>
            Determine if this online store entity can be deleted of list
            </summary>
            <param name="ids">online store ids</param>
            <returns></returns>
            
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IOnlineStoreService.GetWixStoreTokens(System.Collections.Generic.List{System.Int64},System.Int64,System.Threading.CancellationToken)">
            <summary>
                Get wix store tokens
            </summary>
            <param name="stores"></param>
            <param name="departmentId">department Id</param>
            <param name="cancellationToken">cancellation Token</param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IOnlineStoreService.GetWixStoreToken(System.Int64)">
            <summary>
                Get wix store token
            </summary>
            <param name="storeId">store Id</param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IOnlineStoreService.CreateCategoryOnline(System.Int64,System.Int64,System.String)">
            <summary>
                Create category online
            </summary>
            <param name="categoryId">category Id </param>
            <param name="onlineStoreId">onlineStore Id </param>
            <param name="onlineId">online Id </param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IOnlineStoreService.GetOnlineCategoryByIdForStore(System.Int64)">
            <summary>
                Ge online category by id for store
            </summary>
            <param name="categoryId">category Id </param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IOnlineStoreService.CreateProductOnline(System.Int64,System.Int64,System.String)">
            <summary>
                Create product online
            </summary>
            <param name="productId">product Id </param>
            <param name="onlineStoreId">onlineStore Id </param>
            <param name="onlineId">online Id </param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IOnlineStoreService.GetOnlineCategoryForStore(System.Int64,System.Int64)">
            <summary>
                Ge online category by id for store
            </summary>
            <param name="categoryId">category Id </param>
            <param name="onlineStoreId">online store Id </param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IOnlineStoreService.GetOnlineCategoryIdForStore(System.Int64,System.Int64)">
            <summary>
                Ge online category by id for store
            </summary>
            <param name="categoryId">category Id </param>
            <param name="onlineStoreId">online store Id </param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IOnlineStoreService.GetOnlineProductForStore(System.Int64,System.Int64)">
            <summary>
                Ge online product for store
            </summary>
            <param name="productId">product Id </param>
            <param name="onlineStoreId">online store Id </param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IOnlineStoreService.GetOnlineProductIdForStore(System.Int64,System.Int64)">
            <summary>
                Ge online product for store
            </summary>
            <param name="productId">product Id </param>
            <param name="onlineStoreId">online store Id </param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IOnlineStoreService.GetCategoryWithProduct(System.Int64)">
            <summary>
                Ge category by id
            </summary>
            <param name="id">product Id </param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IOnlineStoreService.GetCategoriesWithProduct(System.Int64,System.Threading.CancellationToken)">
            <summary>
                Ge category by id
            </summary>
            <param name="id">product Id </param>
            <param name="cancellationToken">cancellationToken </param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.OnlineStoreService">
            <inheritdoc cref="T:Greta.BO.BusinessLogic.Service.IOnlineStoreService" />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.OnlineStoreService.#ctor(Greta.BO.Api.Abstractions.IOnlineStoreRepository,Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Service.OnlineStoreService})">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.OnlineStoreService.#ctor(Greta.BO.Api.Abstractions.IOnlineStoreRepository,Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Service.OnlineStoreService},MassTransit.Mediator.IMediator,Greta.BO.Api.Abstractions.IProductRepository)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.OnlineStoreService.CanDeleted(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.OnlineStoreService.CanDeleted(System.Collections.Generic.List{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.OnlineStoreService.Get(System.Int64)">
            <summary>
                Get entity by Id
            </summary>
            <param name="id">Id</param>
            <returns>ExternalScale</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If id is less to -1</exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.OnlineStoreService.Post(Greta.BO.Api.Entities.OnlineStore)">
            <summary>
                Insert a entity
            </summary>
            <param name="entity">Entity to insert</param>
            <returns>Entity</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.OnlineStoreService.Put(System.Int64,Greta.BO.Api.Entities.OnlineStore)">
            <summary>
                Update entity
            </summary>
            <param name="id">Id</param>
            <param name="entity">Entity to update</param>
            <returns>Boolean success</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If id is less to -1</exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.OnlineStoreService.GetWixStoreTokens(System.Collections.Generic.List{System.Int64},System.Int64,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.OnlineStoreService.GetWixStoreToken(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.OnlineStoreService.CreateCategoryOnline(System.Int64,System.Int64,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.OnlineStoreService.CreateProductOnline(System.Int64,System.Int64,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.OnlineStoreService.GetOnlineCategoryForStore(System.Int64,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.OnlineStoreService.GetOnlineCategoryIdForStore(System.Int64,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.OnlineStoreService.GetOnlineProductForStore(System.Int64,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.OnlineStoreService.GetOnlineProductIdForStore(System.Int64,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.OnlineStoreService.GetOnlineCategoryByIdForStore(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.OnlineStoreService.GetCategoryWithProduct(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.OnlineStoreService.GetCategoriesWithProduct(System.Int64,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.PermissionService.GetByAplication(System.Int64)">
            <summary>
                Get all entities
            </summary>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.IPriceBatchDetailService">
            <summary>
            Service layer for price batch detail entity
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IPriceBatchDetailService.GetProductIdByUpc(System.String)">
            <summary>
                Get productId by upc
            </summary>
            <param name="upc">upc</param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IPriceBatchDetailService.GetByProductAndHEader(System.Int64,System.Int64)">
            <summary>
                Get price batch detail by productId and headerId
            </summary>
            <param name="productId">productId</param>
            <param name="headerId">headerId</param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IPriceBatchDetailService.GetFullDetails(System.Int64)">
            <summary>
            Get full entity used for zpl converter or other operation
            </summary>
            <param name="headerId">header Id</param>
            <returns>Entity with all Product reference</returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.PriceBatchDetailService">
            <inheritdoc cref="T:Greta.BO.BusinessLogic.Service.IPriceBatchDetailService" />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.PriceBatchDetailService.#ctor(Greta.BO.Api.Abstractions.IPriceBatchDetailRepository,Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Service.PriceBatchDetailService},Greta.BO.BusinessLogic.Service.ISynchroService)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.PriceBatchDetailService.Post(Greta.BO.Api.Entities.PriceBatchDetail)">
            <summary>
                Insert a entity
            </summary>
            <param name="entity">Entity to insert</param>
            <returns>Entity</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.PriceBatchDetailService.ChangeState(System.Int64,System.Boolean)">
            <inheritdoc cref="M:Greta.BO.BusinessLogic.Interfaces.IGenericBaseService`1.ChangeState(System.Int64,System.Boolean)" />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.PriceBatchDetailService.GetFullDetails(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.PriceBatchDetailService.Delete(System.Int64)">
            <summary>
                Delete a entity
            </summary>
            <param name="id">Id</param>
            <returns>Boolean success</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If id is less to -1</exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.PriceBatchDetailService.DeleteRange(System.Collections.Generic.List{System.Int64})">
            <summary>
                Delete a list
            </summary>
            <param name="ids">List of ids</param>
            <returns>Boolean success</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If list is null or empty</exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.PriceBatchDetailService.GetProductIdByUpc(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.PriceBatchDetailService.GetByProductAndHEader(System.Int64,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.PriceBatchService.GetByName(System.String,System.Int64)">
            <summary>
                Get entity by name
            </summary>
            <param name="name">PriceBatch name</param>
            <returns>PriceBatch</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.PriceBatchService.Post(Greta.BO.Api.Entities.PriceBatch)">
            <summary>
                Insert a entity
            </summary>
            <param name="entity">Entity to insert</param>
            <returns>Entity</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.PriceBatchService.Put(System.Int64,Greta.BO.Api.Entities.PriceBatch)">
            <summary>
                Update entity
            </summary>
            <param name="id">Id</param>
            <param name="entity">Entity to update</param>
            <returns>Boolean success</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If id is less to -1</exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.PriceBatchService.DeleteRange(System.Collections.Generic.List{System.Int64})">
            <summary>
                Delete a list
            </summary>
            <param name="ids">List of ids</param>
            <returns>Boolean success</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If list is null or empty</exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ProductService.Filter(System.Int32,System.Int32,Greta.BO.BusinessLogic.Models.Dto.Search.ProductSearchModel,System.String,System.String)">
            <summary>
                Filter and sort list of entities
            </summary>
            <param name="currentPage">Current page</param>
            <param name="pageSize">Page size</param>
            <param name="filter">Filter params</param>
            <param name="searchstring">basic searc string</param>
            <param name="sortstring">sort string </param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ProductService.FilterByStore(System.Int64,System.Int32,System.Int32,Greta.BO.Api.Entities.Product,System.String,System.String)">
            <summary>
                Filter and sort list of entities
            </summary>
            <param name="currentPage">Current page</param>
            <param name="pageSize">Page size</param>
            <param name="filter">Filter params</param>
            <param name="searchstring">basic searc string</param>
            <param name="sortstring">sort string </param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ProductService.FilterByBatch(System.Int64,System.Int32,System.Int32,Greta.BO.Api.Entities.Product,System.String,System.String)">
            <summary>
                Filter and sort list of entities
            </summary>
            <param name="batchId">Batch id</param>
            <param name="currentPage">Current page</param>
            <param name="pageSize">Page size</param>
            <param name="filter">Filter params</param>
            <param name="searchstring">basic searc string</param>
            <param name="sortstring">sort string </param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ProductService.FilterByFamily(System.Int64,System.Int32,System.Int32,Greta.BO.Api.Entities.Product,System.String,System.String)">
            <summary>
                Filter and sort list of entities
            </summary>
            <param name="familyId">Family id</param>
            <param name="currentPage">Current page</param>
            <param name="pageSize">Page size</param>
            <param name="filter">Filter params</param>
            <param name="searchstring">basic searc string</param>
            <param name="sortstring">sort string </param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ProductService.FilterNotByFamily(System.Int32,System.Int32,Greta.BO.Api.Entities.Product,System.String,System.String)">
            <summary>
            Filter and sort list of entities that do not belong to the selected family
            </summary>
            <param name="currentPage">Current page</param>
            <param name="pageSize">Page size</param>
            <param name="filter">Filter params</param>
            <param name="searchstring">basic searc string</param>
            <param name="sortstring">sort string </param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ProductService.Get">
            <summary>
                Get all products
            </summary>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ProductService.ChangeState(System.Int64,System.Boolean)">
            <summary>
                Change State for entity
            </summary>
            <param name="id">Id</param>
            <param name="state">new State</param>
            <returns>Boolean success</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If id is less to -1</exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ProductService.UpdateProductOnline(System.Int64)">
            <summary>
                Update Product Online
            </summary>
            <param name="id">Id</param>
            <returns></returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If id is less to -1</exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ProductService.Delete(System.Int64)">
            <summary>
                Delete a entity
            </summary>
            <param name="id">Id</param>
            <returns>Boolean success</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If id is less to -1</exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ProductService.DeleteRange(System.Collections.Generic.List{System.Int64})">
            <summary>
                Delete a list
            </summary>
            <param name="ids">List of ids</param>
            <returns>Boolean success</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If list is null or empty</exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ProductService.GetScaleProductsByUpcPluProduct(System.Int64,System.Int32,System.Int32,Greta.BO.BusinessLogic.Models.Dto.Search.ScaleProductSearchModel)">
            <summary>
            
            </summary>
            <param name="cutTemplateId"></param>
            <param name="currentPage"></param>
            <param name="pageSize"></param>
            <param name="filter"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ProductService.GetScaleProductsByTemplate(System.Int64)">
            <summary>
            Get filter and paginate ScaleProduct by TemplateId
            </summary>
            <param name="CurrentPage"></param>
            <param name="PageSize"></param>
            <param name="TemplateId">Cut List Template Id</param>
            <param name="filter"></param>
            <returns></returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException"></exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ProductService.GetScaleProductsByUpcOrPlu(System.String)">
            <summary>
            Get ScaleProducts by filter
            </summary>
            <param name="filter">UPC Code or PlUNumber</param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.IProfilesService">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IProfilesService.GetByApplication(System.Int64)">
            <summary>
            
            </summary>
            <param name="applicationId"></param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IProfilesService.ExistWithThisApplication(System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="applicationId"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.ProfilesService">
            <summary>
            
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ProfilesService.#ctor(Greta.BO.Api.Abstractions.IProfilesRepository,Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Service.ProfilesService})">
            <summary>
            
            </summary>
            <param name="repository"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ProfilesService.#ctor(Greta.BO.Api.Abstractions.IProfilesRepository,Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Service.ProfilesService},Greta.BO.BusinessLogic.Service.ISynchroService)">
            <summary>
            
            </summary>
            <param name="repository"></param>
            <param name="logger"></param>
            <param name="synchroService"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ProfilesService.Get">
            <summary>
                Get all entities
            </summary>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ProfilesService.Get(System.Int64)">
            <summary>
                Get entity by Id
            </summary>
            <param name = "id"> Id </param>
            <returns > Customer </returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If id is less to -1</exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ProfilesService.Post(Greta.BO.Api.Entities.Profiles)">
            <summary>
                Insert a entity
            </summary>
            <param name="entity">Entity to insert</param>
            <returns>Entity</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ProfilesService.Put(System.Int64,Greta.BO.Api.Entities.Profiles)">
            <summary>
                Update entity
            </summary>
            <param name="id">Id</param>
            <param name="entity">Entity to update</param>
            <returns>Boolean success</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If id is less to -1</exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ProfilesService.GetByName(System.String,System.Int64)">
            <summary>
                Get entity by name
            </summary>
            <param name="name">Profile name</param>        
            <param name="id">Profile id</param>   
            <returns>Profiles</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ProfilesService.ExistWithThisApplication(System.Int64,System.Int64)">
            <summary>
            Check if exist with this Application
            </summary>
            <param name="id"></param>
            <param name="applicationId"></param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ProfilesService.GetByApplication(System.Int64)">
            <summary>
                Get entities by application
            </summary>
            <param name="applicationId">Aplication Id</param>
            <returns>Profiles</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.RancherService.GetByName(System.String,System.Int64)">
            <summary>
                Get entity by name
            </summary>
            <param name="name">Rancher name</param>
            <returns>Rancher</returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.IRegionService">
            <summary>
            Service layer for region entity
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.RegionService">
            <inheritdoc cref="T:Greta.BO.BusinessLogic.Service.IRegionService" />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.RegionService.#ctor(Greta.BO.Api.Abstractions.IRegionRepository,Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Service.RegionService})">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.IReportService">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IReportService.FilterReportAsync(System.String,Greta.BO.Api.Entities.Report,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="userId"></param>
            <param name="filter"></param>
            <param name="searchstring"></param>
            <param name="sortstring"></param>
            <param name="currentPage"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IReportService.GetById(System.Int64)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IReportService.GetByName(System.String,System.Int64)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IReportService.GetReportsSpaByFilterAsync(System.Collections.Generic.List{System.Guid})">
            <summary>
            
            </summary>
            <param name="longIds"></param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IReportService.GetReportsByCategory(Greta.BO.Api.Entities.Enum.ReportCategory)">
            <summary>
            
            </summary>
            <param name="category"></param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IReportService.GetIdByGuid(System.Guid)">
            <summary>
            
            </summary>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IReportService.GetByGuid(System.Guid)">
            <summary>
            
            </summary>
            <param name="guidId"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.ReportService">
            <summary>
            Report Service
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ReportService.#ctor(Greta.BO.Api.Abstractions.IReportRepository,Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Service.ReportService},MassTransit.IRequestClient{Greta.Report.SPA.EventContracts.Corporate.Report.FilterReportRequestContract})">
            <summary>
            
            </summary>
            <param name="reportRepository"></param>
            <param name="logger"></param>
            <param name="client"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ReportService.GetByName(System.String,System.Int64)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ReportService.GetIdByGuid(System.Guid)">
            <summary>
            Get report id by guid
            </summary>
            <param name="guid">Report guid</param>
            <returns>Report id</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ReportService.GetReportsByCategory(Greta.BO.Api.Entities.Enum.ReportCategory)">
            <summary>
            Get Reports list by clienId
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ReportService.GetById(System.Int64)">
            <summary>
            Get Report by Id
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ReportService.FilterReportAsync(System.String,Greta.BO.Api.Entities.Report,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Filter report
            </summary>
            <param name="userId"></param>
            <param name="filter"></param>
            <param name="searchstring"></param>
            <param name="sortstring"></param>
            <param name="currentPage"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ReportService.GetReportsSpaByFilterAsync(System.Collections.Generic.List{System.Guid})">
            <summary>
            Get reports by list of guid
            </summary>
            <param name="guidIds"></param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ReportService.GetByGuid(System.Guid)">
            <summary>
            Get report by guid
            </summary>
            <param name="guidId"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.IRoleService">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.RoleService">
            <inheritdoc cref="T:Greta.BO.BusinessLogic.Service.IRoleService" />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.RoleService.#ctor(Greta.BO.Api.Abstractions.IRoleRepository,Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Service.RoleService})">
            <inheritdoc/>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.IRoundingTableService">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IRoundingTableService.ChangeBy(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Return the element on the rounding table that match with the endWith parameter or -1 if not found
            </summary>
            <param name="endWith"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.RoundingTableService">
            <inheritdoc cref="T:Greta.BO.BusinessLogic.Service.IRoleService" />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.RoundingTableService.#ctor(Greta.BO.Api.Abstractions.IRoundingTableRepository,Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Service.RoundingTableService})">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.RoundingTableService.ChangeBy(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.SaleService.Get(System.Int64)">
            <summary>
                Get entity by Id
            </summary>
            <param name="id">Id</param>
            <returns>Customer</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If id is less to -1</exception>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.IScaleCategoryService">
            <summary>
            Service layer for scale category entity
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IScaleCategoryService.GetByScaleCategoryId(System.Int32,System.Int64)">
             <summary>
            Get Scale Category by category id and entity Id
             </summary>
             <param name="catId">Category Id</param>
             <param name="id">Entity Id</param>
             <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IScaleCategoryService.GetUpdatesForScales(System.DateTime,System.Collections.Generic.List{System.Int64})">
            <summary>
            Get a list of Category
            </summary>
            <param name="last">Last Date</param>
            <param name="deps">Lis of departments Ids</param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IScaleCategoryService.GetAllForScales(System.Collections.Generic.List{System.Int64})">
            <summary>
            Get a list of Category
            </summary>
            <param name="deps">Lis of departments Ids</param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.ScaleCategoryService">
            <inheritdoc cref="T:Greta.BO.BusinessLogic.Service.IScaleCategoryService" />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ScaleCategoryService.#ctor(Greta.BO.Api.Abstractions.IScaleCategoryRepository,Greta.BO.BusinessLogic.Service.ISynchroService,Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Service.ScaleCategoryService})">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ScaleCategoryService.Get">
            <summary>
                Get entity by name
            </summary>
            <returns>ScaleCategory</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ScaleCategoryService.GetByScaleCategoryId(System.Int32,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ScaleCategoryService.GetUpdatesForScales(System.DateTime,System.Collections.Generic.List{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ScaleCategoryService.GetAllForScales(System.Collections.Generic.List{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ScaleCategoryService.Put(System.Int64,Greta.BO.Api.Entities.ScaleCategory)">
            <summary>
                Update entity
            </summary>
            <param name="id">Id</param>
            <param name="entity">Entity to update</param>
            <returns>Boolean success</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If id is less to -1</exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ScaleHomeFavService.Get(System.Int64)">
            <summary>
                Get entity by Id
            </summary>
            <param name="id">Id</param>
            <returns>Customer</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If id is less to -1</exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ScaleHomeFavService.Post(Greta.BO.Api.Entities.ScaleHomeFav)">
            <summary>
                Insert a entity
            </summary>
            <param name="entity">Entity to insert</param>
            <returns>Entity</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ScaleHomeFavService.Put(System.Int64,Greta.BO.Api.Entities.ScaleHomeFav)">
            <summary>
                Update entity
            </summary>
            <param name="id">Id</param>
            <param name="entity">Entity to update</param>
            <returns>Boolean success</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If id is less to -1</exception>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.IScaleLabelTypeService">
            <summary>
            Service layer for scale label type entity
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IScaleLabelTypeService.GetByType(Greta.BO.Api.Entities.Enum.ScaleType)">
            <summary>
                Get Entities by type
            </summary>
            <param name="type">ScaleType 0 for shelfTag, 1 GretaLabel 2 for External</param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IScaleLabelTypeService.FilterTag(System.Int32,System.Int32,Greta.BO.Api.Entities.ScaleLabelType,System.String,System.String)">
            <summary>
                Filter and sort list of entities
            </summary>
            <param name="currentPage">Current page</param>
            <param name="pageSize">Page size</param>
            <param name="filter">Filter params</param>
            <param name="searchstring">basic searc string</param>
            <param name="sortstring">sort string </param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.ScaleLabelTypeService">
            <inheritdoc cref="T:Greta.BO.BusinessLogic.Service.IScaleLabelTypeService" />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ScaleLabelTypeService.#ctor(Greta.BO.Api.Abstractions.IScaleLabelTypeRepository,Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Service.ScaleLabelTypeService},Greta.BO.BusinessLogic.Service.ISynchroService)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ScaleLabelTypeService.FilterTag(System.Int32,System.Int32,Greta.BO.Api.Entities.ScaleLabelType,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ScaleLabelTypeService.GetByType(Greta.BO.Api.Entities.Enum.ScaleType)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ScaleLabelTypeService.Post(Greta.BO.Api.Entities.ScaleLabelType)">
            <summary>
                Insert a entity
            </summary>
            <param name="entity">Entity to insert</param>
            <returns>Entity</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ScaleLabelTypeService.Put(System.Int64,Greta.BO.Api.Entities.ScaleLabelType)">
            <summary>
                Update a entity
            </summary>
            <param name="entity">Entity to update</param>
            <param name="id">Entity Id</param>
            <returns>Entity</returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.IScalendarService">
            <summary>
            Service layer for scalendar entity
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.ScalendarService">
            <inheritdoc cref="T:Greta.BO.BusinessLogic.Service.IScalendarService" />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ScalendarService.#ctor(Greta.BO.Api.Abstractions.IScalendarRepository,Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Service.ScalendarService})">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ScalendarService.Get(System.Int64)">
            <summary>
                Get entity by Id
            </summary>
            <param name="id">Id</param>
            <returns>Customer</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If id is less to -1</exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ScalendarService.Post(Greta.BO.Api.Entities.Scalendar)">
            <summary>
                Insert a entity
            </summary>
            <param name="entity">Entity to insert</param>
            <returns>Entity</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ScalendarService.Put(System.Int64,Greta.BO.Api.Entities.Scalendar)">
            <summary>
                Update entity
            </summary>
            <param name="id">Id</param>
            <param name="entity">Entity to update</param>
            <returns>Boolean success</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If id is less to -1</exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ScaleReasonCodesService.GetByName(System.String,System.Int64)">
            <summary>
                Get entity by name
            </summary>
            <param name="name">ScaleCategory name</param>
            <returns>ScaleCategory</returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.IShelfTagService">
            <summary>
            Service layer for shelfTag entity
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IShelfTagService.PostFromCategory(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Create entities from Category Id
            </summary>
            <param name="categoryId"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException"></exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IShelfTagService.PostFromStoreProduct(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Create entity from Storeroduct object
            </summary>
            <param name="storeProductId">StoreProductId</param>
            <param name="cancellationToken"></param>
            <returns>shelfTag object</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If id is less to -1</exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IShelfTagService.PostFromVendorProduct(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Create entity from Storeroduct object
            </summary>
            <param name="vendorProductId">VendorProductId</param>
            <param name="cancellationToken"></param>
            <returns>shelfTag object</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If id is less to -1</exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IShelfTagService.PutByQty(System.Int64,System.Int32)">
            <summary>
                Update entity
            </summary>
            <param name="id">Id</param>
            <param name="qty"></param>
            <returns>Boolean success</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If id is less to -1</exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IShelfTagService.DeleteByStore(System.Int64)">
            <summary>
                Delete a list
            </summary>
            <param name="storeId">StoreId</param>
            <returns>Boolean success</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If list is null or empty</exception>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.ShelfTagService">
            <inheritdoc cref="T:Greta.BO.BusinessLogic.Service.IShelfTagService" />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ShelfTagService.#ctor(Greta.BO.Api.Abstractions.IShelfTagRepository,Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Service.ShelfTagService})">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ShelfTagService.PostFromCategory(System.Int64,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ShelfTagService.PostFromStoreProduct(System.Int64,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ShelfTagService.PostFromVendorProduct(System.Int64,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ShelfTagService.DeleteByStore(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ShelfTagService.PutByQty(System.Int64,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IStoreProductService.PutByOrderAmount(System.Int64,System.Decimal)">
            <summary>
            Update order amount
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IStoreProductService.FilterInventory(Greta.BO.BusinessLogic.Models.Dto.Search.InventorySearchModel,System.Int32,System.Int32,System.Int64)">
            <summary>
            Filter and paginate inventory
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IStoreProductService.FilterPaginatedSuggested(Greta.BO.BusinessLogic.Models.Dto.Search.InventorySearchModel,System.Int32,System.Int32,System.Int64,System.Int64)">
            <summary>
            Filter and paginate suggested inventory 
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IStoreProductService.FilterSuggested(Greta.BO.BusinessLogic.Models.Dto.Search.InventorySearchModel,System.Int64,System.Int64)">
            <summary>
            Filter suggested
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IStoreProductService.UpdateInventory(Greta.BO.BusinessLogic.Models.Dto.InventoryUpdateModel)">
            <summary>
            Update inventory from model
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IStoreProductService.PreprocessFiscalInventory(Greta.BO.BusinessLogic.Models.Dto.InventoryFiscalModel)">
            <summary>
            Pre process fiscal inventory
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IStoreProductService.ProcessFiscalInventory(Greta.BO.BusinessLogic.Models.Dto.InventoryFiscalModel)">
            <summary>
            Process fiscal inventory
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IStoreProductService.UpdateValuesByTargetGrossProfit(Greta.BO.Api.Entities.StoreProduct,System.Decimal)">
            <summary>
            Update price and gross profit when changes the target Gross Profit of Category
            </summary>
            <param name="entity"></param>
            <param name="targetGrossProfit"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IStoreProductService.UpdateValues(Greta.BO.Api.Entities.StoreProduct)">
            <summary>
            Update Price and GrossProfit, the calculus si different if have CategoryChange
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.StoreProductService.FilterInventory(Greta.BO.BusinessLogic.Models.Dto.Search.InventorySearchModel,System.Int32,System.Int32,System.Int64)">
            <summary>
            Query for paginate and filter inventory
            </summary>
            <param name="filter"></param>
            <param name="currentPage"></param>
            <param name="pageSize"></param>
            <param name="storeId"></param>
            <returns></returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException"></exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.StoreProductService.FilterPaginatedSuggested(Greta.BO.BusinessLogic.Models.Dto.Search.InventorySearchModel,System.Int32,System.Int32,System.Int64,System.Int64)">
            <summary>
            Filter and paginate suggested inventory
            </summary>
            <param name="filter"></param>
            <param name="currentPage"></param>
            <param name="pageSize"></param>
            <param name="storeId"></param>
            <param name="vendorId"></param>
            <returns></returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException"></exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.StoreProductService.FilterSuggested(Greta.BO.BusinessLogic.Models.Dto.Search.InventorySearchModel,System.Int64,System.Int64)">
            <summary>
            Filter uggested
            </summary>
            <param name="filter"></param>
            <param name="storeId"></param>
            <param name="vendorId"></param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.StoreProductService.GetSuggested(Greta.BO.BusinessLogic.Models.Dto.Search.InventorySearchModel,System.Int64,System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="storeId"></param>
            <param name="vendorId"></param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.StoreProductService.Get">
            <summary>
                Get all entities
            </summary>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.StoreProductService.GetWithProduct(System.Int64)">
            <summary>
                Get all entities
            </summary>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.StoreProductService.UpdateValuesByTargetGrossProfit(Greta.BO.Api.Entities.StoreProduct,System.Decimal)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.StoreProductService.Post(Greta.BO.Api.Entities.StoreProduct)">
            <summary>
                Insert a entity
            </summary>
            <param name="entity">Entity to insert</param>
            <returns>Entity</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.StoreProductService.PostImport(Greta.BO.Api.Entities.StoreProduct,Greta.BO.Api.Entities.Product)">
            <summary>
                Insert a entity
            </summary>
            <param name="entity">Entity to insert</param>
            <param name="product"></param>
            <returns>Entity</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.StoreProductService.Put(System.Int64,Greta.BO.Api.Entities.StoreProduct)">
            <summary>
                Update entity
            </summary>
            <param name="id">Id</param>
            <param name="entity">Entity to update</param>
            <returns>Boolean success</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If id is less to -1</exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.StoreProductService.GetAllByProduct(System.Int64)">
            <summary>
                Get all entities
            </summary>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.StoreProductService.PutByOrderAmount(System.Int64,System.Decimal)">
            <summary>
                Update entity
            </summary>
            <param name="id">Id</param>
            <param name="orderAmount"></param>
            <returns>Boolean success</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If id is less to -1</exception>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.IStoreService">
            <summary>
            Service layer for store entity
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IStoreService.GetById(System.Int64)">
            <summary>
            Get Entity by id
            </summary>
            <param name="Id">Entity Id</param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IStoreService.GetByGuid(System.Guid)">
            <summary>
            Get Entity by guid
            </summary>
            <param name="guid">Guid</param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IStoreService.GetByRegion(System.Int64)">
            <summary>
                get a list of stores by region id
            </summary>
            <param name="RegionId">RegionId</param>
            <returns>List Stores</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IStoreService.GetAllIds">
            <summary>
                get a list of stores id
            </summary>
            <returns>List Stores Id</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IStoreService.GetWithStores(System.Int32,System.Int32,System.String,System.Int64,Greta.BO.Api.Entities.Enum.SynchroStatus)">
            <summary>
                Filter and sort list of entities
            </summary>
            <param name="currentPage">Current page</param>
            <param name="pageSize">Page size</param>
            <param name="search">basic searc string</param>
            <param name="regionId">sort string </param>
            <param name="status">sort string </param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IStoreService.PutConfiguration(System.Int64,Greta.BO.Api.Entities.Store)">
            <summary>
                Update configuration entity
            </summary>
            <param name="id">Id</param>
            <param name="entity">Entity to update</param>
            <returns>Boolean success</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If id is less to -1</exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IStoreService.GetWithStores(System.Int64)">
            <summary>
            Get Entity store by id
            </summary>
            <param name="storeId">Entity Id</param>
            <returns>Store</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IStoreService.UpdateLastCloseSynchro(System.Int64,System.Int64)">
            <summary>
                Update configuration entity
            </summary>
            <param name="store">Id</param>
            <param name="tag">Entity to update</param>
            <returns>Boolean success</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If id is less to -1</exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IStoreService.GetStoresWithExternalScales">
            <summary>
            Get all Stores with External Scales
            </summary>
            <returns>Return list of entities</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IStoreService.GetForDashboard">
            <summary>
            Get all the Entities
            </summary>
            <returns>Return list of entities</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IStoreService.GetWithTaxesById(System.Int64)">
            <summary>
            Get Entity by id with taxes
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.StoreService">
            <inheritdoc cref="T:Greta.BO.BusinessLogic.Service.IStoreService" />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.StoreService.#ctor(Greta.BO.Api.Abstractions.IStoreRepository,Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Service.StoreService})">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.StoreService.GetAllIds">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.StoreService.GetWithStores(System.Int32,System.Int32,System.String,System.Int64,Greta.BO.Api.Entities.Enum.SynchroStatus)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.StoreService.GetWithStores(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.StoreService.GetById(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.StoreService.GetWithTaxesById(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.StoreService.GetByRegion(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.StoreService.PutConfiguration(System.Int64,Greta.BO.Api.Entities.Store)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.StoreService.GetByGuid(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.StoreService.UpdateLastCloseSynchro(System.Int64,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.StoreService.GetStoresWithExternalScales">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.StoreService.GetForDashboard">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.SynchroService.HasSynchroInProgress(System.Int64)">
            <summary>
            Return if we have one synchro processing
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.SynchroService.CreateAFullBackupFile(System.Int64)">
            <summary>
            Create a full backup
            </summary>
            <param name="storeId"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.ITaxService">
            <summary>
            Service layer for tax entity
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ITaxService.GetTaxByStore(System.Int64)">
            <summary>
                Get Entity by StoreId
            </summary>
            <param name="storeId">Store Id</param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ITaxService.FilterTax(System.Int32,System.Int32,Greta.BO.BusinessLogic.Models.Dto.Search.TaxSearchModel,System.String,System.String)">
            <summary>
                Filter and sort list of entities
            </summary>
            <param name="currentPage">Current page</param>
            <param name="pageSize">Page size</param>
            <param name="filter">Filter params</param>
            <param name="searchstring">basic searc string</param>
            <param name="sortstring">sort string </param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.TaxService">
            <inheritdoc cref="T:Greta.BO.BusinessLogic.Service.ITaxService" />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.TaxService.#ctor(Greta.BO.Api.Abstractions.ITaxRepository,Greta.BO.BusinessLogic.Service.ISynchroService,Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Service.TaxService})">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.TaxService.Post(Greta.BO.Api.Entities.Tax)">
            <summary>
                Insert a entity
            </summary>
            <param name="entity">Entity to insert</param>
            <returns>Entity</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.TaxService.Put(System.Int64,Greta.BO.Api.Entities.Tax)">
            <summary>
                Update entity
            </summary>
            <param name="id">Id</param>
            <param name="entity">Entity to update</param>
            <returns>Boolean success</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If id is less to -1</exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.TaxService.Get(System.Int64)">
            <summary>
                Get entity by Id
            </summary>
            <param name="id">Id</param>
            <returns>Customer</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If id is less to -1</exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.TaxService.GetTaxByStore(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.TaxService.Delete(System.Int64)">
            <summary>
                Delete a entity
            </summary>
            <param name="id">Id</param>
            <returns>Boolean success</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If id is less to -1</exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.TaxService.DeleteRange(System.Collections.Generic.List{System.Int64})">
            <summary>
                Delete a list
            </summary>
            <param name="ids">List of ids</param>
            <returns>Boolean success</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If list is null or empty</exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.TaxService.FilterTax(System.Int32,System.Int32,Greta.BO.BusinessLogic.Models.Dto.Search.TaxSearchModel,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.TenderTypeService.GetByName(System.String,System.Int64)">
            <summary>
                Get entity by name
            </summary>
            <param name="name">TenderType name</param>
            <returns>TenderType</returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.ITimeKeepingService">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ITimeKeepingService.GetInformation(System.Int64,System.Int64,System.DateTime)">
            <summary>
            
            </summary>
            <param name="employeeId"></param>
            <param name="storeId"></param>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ITimeKeepingService.ClockIn(System.Int64,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.DateTime,System.String)">
            <summary>
            
            </summary>
            <param name="employeeId"></param>
            <param name="employeeName"></param>
            <param name="deviceId"></param>
            <param name="storeId"></param>
            <param name="storeName"></param>
            <param name="date"></param>
            <param name="formatDate"></param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ITimeKeepingService.ClockOut(System.Int64,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.DateTime,System.String)">
            <summary>
            
            </summary>
            <param name="employeeId"></param>
            <param name="employeeName"></param>
            <param name="deviceId"></param>
            <param name="storeId"></param>
            <param name="storeName"></param>
            <param name="date"></param>
            <param name="formatDate"></param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ITimeKeepingService.WorkTimeReport(System.Int64,Greta.BO.BusinessLogic.Models.Dto.Search.WorkTimeSearchModel)">
            <summary>
            Calculate WorkTimeReport
            </summary>
            <param name="storeId"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.ITimeKeepingService.ExportCsv(System.Collections.Generic.List{Greta.BO.BusinessLogic.Models.Dto.ReportDto.WorkTimeReportModel})">
            <summary>
            Export Csv
            </summary>
            <param name="workTimeReportModel"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.TimeKeepingService">
            <inheritdoc cref="T:Greta.BO.BusinessLogic.Service.ITimeKeepingService" />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.TimeKeepingService.#ctor(Greta.BO.Api.Abstractions.ITimeKeepingRepository,Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Service.TimeKeepingService})">
            <summary>
            
            </summary>
            <param name="repository"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.TimeKeepingService.GetInformation(System.Int64,System.Int64,System.DateTime)">
            <summary>
            
            </summary>
            <param name="employeeId"></param>
            <param name="storeId"></param>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.TimeKeepingService.ClockIn(System.Int64,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.DateTime,System.String)">
            <summary>
            
            </summary>
            <param name="employeeId"></param>
            <param name="employeeName"></param>
            <param name="deviceId"></param>
            <param name="storeId"></param>
            <param name="storeName"></param>
            <param name="date"></param>
            <param name="formatDate"></param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.TimeKeepingService.ClockOut(System.Int64,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.DateTime,System.String)">
            <summary>
            
            </summary>
            <param name="employeeId"></param>
            <param name="employeeName"></param>
            <param name="deviceId"></param>
            <param name="storeId"></param>
            <param name="storeName"></param>
            <param name="date"></param>
            <param name="formatDate"></param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.TimeKeepingService.WorkTimeReport(System.Int64,Greta.BO.BusinessLogic.Models.Dto.Search.WorkTimeSearchModel)">
            <summary>
            Return list of time worked by store for all employees by day between dates
            </summary>
            <param name="storeId"></param>
            <param name="filter"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.TimeKeepingService.ExportCsv(System.Collections.Generic.List{Greta.BO.BusinessLogic.Models.Dto.ReportDto.WorkTimeReportModel})">
            <summary>
            Export worked time to csv
            </summary>
            <param name="workTimeReportModel"></param>
            <returns></returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException"></exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.VendorContactService.GetByVendor(System.Int64)">
            <summary>
                Get list of vendor contact by vendor Id
            </summary>
            <param name="vendorId">Vendor Id</param>
            <returns>Customer</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If id is less to -1</exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.VendorContactService.GetByContactVendor(System.String,System.Int64,System.Int64)">
            <summary>
                Get entity by name
            </summary>
            <param name="contact">VendorContact contact</param>
            <param name="vendorId">VendorContact Vendor id</param>
            <returns>VendorContact</returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.IVendorOrderService">
            <summary>
            Service layer for vendor order entity
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IVendorOrderService.GetWithDetails(System.Int64)">
            <summary>
            Get Vendor order with details
            </summary>
            <param name="id">VendorOrder Id</param>
            <returns>Return a Vendor Order with details</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IVendorOrderService.GetFullOrder(System.Int64)">
            <summary>
            Get Vendor Order with details, vendor and store
            </summary>
            <param name="id">VendorOrder Id</param>
            <returns>Return a Vendor Order with details, vendor and store</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IVendorOrderService.HasProducts(System.Int64)">
            <summary>
            Determine if the vendor order have any product
            </summary>
            <param name="vendorOrderId">VendorOrder Id</param>
            <returns>Return true if any detail of vendor order has products associated</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IVendorOrderService.GetOnlyReceivedModeDetails(System.Int64)">
            <summary>
            Get only details with the receive data necesary for call the receive on DSD functionality
            </summary>
            <param name="vendorOrderId"></param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.VendorOrderService">
            <inheritdoc cref="T:Greta.BO.BusinessLogic.Service.IVendorOrderService"/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.VendorOrderService.#ctor(Greta.BO.Api.Abstractions.IVendorOrderRepository,Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Service.VendorOrderService})">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.VendorOrderService.FilterSpec(System.Int32,System.Int32,Ardalis.Specification.ISpecification{Greta.BO.Api.Entities.VendorOrder},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Greta.BO.BusinessLogic.Interfaces.IGenericBaseService`1.FilterSpec(System.Int32,System.Int32,Ardalis.Specification.ISpecification{`0},System.Threading.CancellationToken)" />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.VendorOrderService.GetWithDetails(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.VendorOrderService.GetOnlyReceivedModeDetails(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.VendorOrderService.GetFullOrder(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.VendorOrderService.HasProducts(System.Int64)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.IVendorOrderDetailService">
            <summary>
            Service layer for vendor order detail entity
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IVendorOrderDetailService.FilterCustom(Greta.BO.BusinessLogic.Models.Dto.Search.VendorOrderDetailSearchModel)">
            <summary>
            List of vendor order detail of a vendor order
            </summary>
            <param name="filter"></param>
            <returns>Return a vendor order detail list from a vendor order</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IVendorOrderDetailService.PostMultiple(System.Collections.Generic.List{Greta.BO.Api.Entities.VendorOrderDetail},System.Threading.CancellationToken)">
            <summary>
            Save list of vendor order detail and assign to a vendor order
            </summary>
            <param name="entity">List of vendor order detail to save</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IVendorOrderDetailService.GetStoreProductByUpc(System.Int64,System.Int64,System.String)">
            <summary>
            Get storeProduct with these storeId, upc and vendorId 
            </summary>
            <param name="storeId"> Store Id</param>
            <param name="vendorId">Vendor Id</param>
            <param name="upc">UPC</param>
            <returns>Return null if no exist product with these params, else return the storeProduct </returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IVendorOrderDetailService.GetStatusPurchaseOrder(System.Int64)">
            <summary>
            Get the status of the vendor order
            </summary>
            <param name="vendorOrderId">Vendor Order Id</param>
            <returns></returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.VendorOrderDetailService">
            <inheritdoc cref="T:Greta.BO.BusinessLogic.Service.IVendorOrderDetailService"/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.VendorOrderDetailService.#ctor(Greta.BO.Api.Abstractions.IVendorOrderDetailRepository,Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Service.VendorOrderDetailService})">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.VendorOrderDetailService.FilterCustom(Greta.BO.BusinessLogic.Models.Dto.Search.VendorOrderDetailSearchModel)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.VendorOrderDetailService.PostMultiple(System.Collections.Generic.List{Greta.BO.Api.Entities.VendorOrderDetail},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.VendorOrderDetailService.GetStoreProductByUpc(System.Int64,System.Int64,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.VendorOrderDetailService.GetStatusPurchaseOrder(System.Int64)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.IVendorOrderDetailCreditService">
            <summary>
            Service layer for vendor order detail credit entity
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IVendorOrderDetailCreditService.FilterCustom(Greta.BO.BusinessLogic.Models.Dto.Search.VendorOrderDetailCreditSearchModel)">
            <summary>
            List of vendor order detail credit of a vendor order
            </summary>
            <param name="filter"></param>
            <returns>Return a vendor order detail credit list from a vendor order</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.IVendorOrderDetailCreditService.GetCreditsByVendorOrder(System.Int64)">
            <summary>
            Get a vendor order credit list from a Vendor order
            </summary>
            <param name="id">Vendor Order Id</param>
            <returns>Return a vendor order credit list </returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Service.VendorOrderDetailCreditService">
            <inheritdoc cref="T:Greta.BO.BusinessLogic.Service.IVendorOrderDetailCreditService"/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.VendorOrderDetailCreditService.#ctor(Greta.BO.Api.Abstractions.IVendorOrderDetailCreditRepository,Microsoft.Extensions.Logging.ILogger{Greta.BO.BusinessLogic.Service.VendorOrderDetailCreditService})">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.VendorOrderDetailCreditService.FilterCustom(Greta.BO.BusinessLogic.Models.Dto.Search.VendorOrderDetailCreditSearchModel)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.VendorOrderDetailCreditService.GetCreditsByVendorOrder(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.VendorProductService.Post(Greta.BO.Api.Entities.VendorProduct)">
            <summary>
                Insert a entity
            </summary>
            <param name="entity">Entity to insert</param>
            <returns>Entity</returns>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.VendorService.Get(System.Int64)">
            <summary>
                Get entity by Id
            </summary>
            <param name="id">Id</param>
            <returns>Customer</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If id is less to -1</exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.VendorService.GetWithImages(System.Int64)">
            <summary>
                Get entity by Id
            </summary>
            <param name="id">Id</param>
            <returns>Customer</returns>
            <exception cref="T:Greta.BO.BusinessLogic.Exceptions.BusinessLogicException">If id is less to -1</exception>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Service.VendorService.GetByName(System.String,System.Int64)">
            <summary>
                Get entity by name
            </summary>
            <param name="name">Vendor name</param>
            <returns>Vendor</returns>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.AnimalSpecs.AnimalFilterSpec">
            <summary>
            Animal Filter Specification
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.AnimalSpecs.AnimalFilterSpec.#ctor(Greta.BO.BusinessLogic.Models.Dto.Search.AnimalSearchModel)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.AnimalSpecs.AnimalGetByIdWithChildrenSpecs">
            <summary>
            Get animal with all childrens
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.AnimalSpecs.AnimalGetByIdWithChildrenSpecs.#ctor(System.Int64)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.BreedSpecs.BreedFilterSpec">
            <summary>
            Breed Filter Specification
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.BreedSpecs.BreedFilterSpec.#ctor(Greta.BO.BusinessLogic.Models.Dto.Search.BreedSearchModel)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.CategorySpecs.CategoryFilterSpec">
            <summary>
            Category Filter Specification
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.CategorySpecs.CategoryFilterSpec.#ctor(Greta.BO.BusinessLogic.Models.Dto.Search.CategorySearchModel)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.CustomerSpecs.CustomerFilterSpec">
            <summary>
            Customer Filter Specification
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.CustomerSpecs.CustomerFilterSpec.#ctor(Greta.BO.BusinessLogic.Models.Dto.Search.CustomerSearchModel)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.CutListDetailSpecs.CutListDetailFilterSpec">
            <summary>
            Cut List Detail Filter Specification
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.CutListDetailSpecs.CutListDetailFilterSpec.#ctor(Greta.BO.BusinessLogic.Models.Dto.Search.CutListDetailSearchModel)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.CutListDetailSpecs.CutListGetScaleProductByUpcAndPluSpec">
            <summary>
            Get ScaleProduct by upc and plu
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.CutListDetailSpecs.CutListGetScaleProductByUpcAndPluSpec.#ctor(System.String,System.Int32,System.Int64)">
            <summary>
            
            </summary>
            <param name="upc"></param>
            <param name="plu"></param>
            <param name="storeIdAnimal">Store id of Animal selected</param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.CutListDetailSpecs.CutListGetScaleProductOfTemplateSpec">
            <summary>
            Get ScaleProduct by upc and plu
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.CutListDetailSpecs.CutListGetScaleProductOfTemplateSpec.#ctor(System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="idTemplate"></param>
            <param name="storeIdAnimal">Store id of Animal selected</param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.CutListTemplateSpecs.CutListTemplateFilterSpec">
            <summary>
            CutListTemplate Filter Specification
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.CutListTemplateSpecs.CutListTemplateFilterSpec.#ctor(Greta.BO.BusinessLogic.Models.Dto.Search.CutListTemplateSearchModel)">
            <summary>
            
            </summary>
            <param name="filter"></param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.CutListTemplateSpecs.CutListTemplateGetByIdSpec">
            <summary>
            CutListTemplate Filter Specification
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.CutListTemplateSpecs.CutListTemplateGetByIdSpec.#ctor(System.Int64)">
            <summary>
            
            </summary>
            <param name="id"></param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.DepartmentSpecs.DepartmentFilterSpec">
            <summary>
            Department Filter Specification
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.DepartmentSpecs.DepartmentFilterSpec.#ctor(Greta.BO.BusinessLogic.Models.Dto.Search.DepartmentSearchModel)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.DeviceSpecs.DeviceFilterSpec">
            <summary>
            Device Filter Specification
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.DeviceSpecs.DeviceFilterSpec.#ctor(Greta.BO.BusinessLogic.Models.Dto.Search.DeviceSearchModel)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.DiscountSpecs.DiscountFilterSpec">
            <summary>
            Discount Filter Specification
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.DiscountSpecs.DiscountFilterSpec.#ctor(Greta.BO.BusinessLogic.Models.Dto.Search.DiscountSearchModel)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.ExternalScaleSpecs.ExternalScaleFilterSpec">
            <summary>
            ExternalScale Filter Specification
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.ExternalScaleSpecs.ExternalScaleFilterSpec.#ctor(Greta.BO.BusinessLogic.Models.Dto.Search.ExternalScaleSearchModel)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.FamilySpecs.FamilyFilterSpec">
            <summary>
            Family Filter Specification
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.FamilySpecs.ProductByFamilyIdSpec">
            <summary>
            Product filter using a family id
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.FamilySpecs.InventoryFilterSpec">
            <summary>
            Inventory Filter Specification
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.FamilySpecs.InventoryFilterSpec.#ctor(Greta.BO.BusinessLogic.Models.Dto.Search.InventorySearchModel,System.Int32,System.Int32,System.Int64)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <param name="currentPage"></param>
            <param name="pageSize"></param>
            <param name="storeId"></param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.FeeSpecs.FeeFilterSpec">
            <summary>
            Fee Filter Specification
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.FeeSpecs.FeeGetByIdSpec">
            <summary>
            Fee Filter Specification
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.FunctionGroupSpecs.FunctionGroupSpec">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.FunctionGroupSpecs.FunctionGroupSpec.#ctor(System.Int64)">
            <summary>
            
            </summary>
            <param name="applicationId"></param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.Generics.CheckUniqueNameSpec`1">
            <summary>
            Describe the specification for check if exist one entity with the current name excluing or not one expecific id
            </summary>
            <typeparam name="TNameUniqueEntity"></typeparam>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.Generics.CheckUniqueNameSpec`1.#ctor(System.String,System.Int64)">
            <summary>
            Check unique name
            </summary>
            <param name="name">name of the entity</param>
            <param name="id">optional id for exclude</param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.Generics.GetByIdSpec`1">
            <summary>
            This specification is to filter values by id and throws an exception if more than one result is founded
            </summary>
            <typeparam name="TEntity">This type must inherit <see cref="T:Greta.BO.Api.Entities.BaseEntityLong"/> </typeparam>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.Generics.GetByIdSpec`1.#ctor(System.Int64)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.GrindSpecs.GrindFilterSpec">
            <summary>
            Grind Filter Specification
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.GrindSpecs.GrindFilterSpec.#ctor(Greta.BO.BusinessLogic.Models.Dto.Search.GrindSearchModel)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.InventorySpecs.InventoryGetForProcessFiscalSpec">
            <summary>
            Get store product by id Specification
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.InventorySpecs.InventoryGetStoreProductByIdSpec">
            <summary>
            Get store product by id Specification
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.InventorySpecs.InventoryGetSuggestedSpec">
            <summary>
            Get suggested inventory filter Specification
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.InventorySpecs.InventoryGetSuggestedSpec.#ctor(Greta.BO.BusinessLogic.Models.Dto.Search.InventorySearchModel,System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <param name="storeId"></param>
            <param name="vendorId"></param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.LoyaltyDiscountSpecs.LoyaltyDiscountFilterSpec">
            <summary>
            LoyaltyDiscount Filter Specification
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.LoyaltyDiscountSpecs.LoyaltyDiscountFilterSpec.#ctor(Greta.BO.BusinessLogic.Models.Dto.Search.LoyaltyDiscountSearchModel)">
            <summary>
            
            </summary>
            <param name="filter"></param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.LoyaltyDiscountSpecs.LoyaltyDiscountGetByStoreIdSpec">
            <summary>
            LoyaltyDiscount Filter Specification
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.LoyaltyDiscountSpecs.LoyaltyDiscountGetByStoreIdSpec.#ctor(System.Int64,System.Nullable{System.Int64})">
            <summary>
            
            </summary>
            <param name="storeId"></param>
            <param name="id"></param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.MixAndMatchSpecs.MixAndMatchFilterSpec">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.MixAndMatchSpecs.MixAndMatchFilterSpec.#ctor(Greta.BO.BusinessLogic.Models.Dto.Search.MixAndMatchSearchModel)">
            <summary>
            
            </summary>
            <param name="filter"></param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.MixAndMatchSpecs.MixAndMatchGetByIdSpec">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.MixAndMatchSpecs.MixAndMatchGetByIdSpec.#ctor(System.Int64)">
            <summary>
            
            </summary>
            <param name="id"></param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.MixAndMatchSpecs.MixAndMatchGetByIdUpdateSpec">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.MixAndMatchSpecs.MixAndMatchGetByIdUpdateSpec.#ctor(System.Int64)">
            <summary>
            
            </summary>
            <param name="id"></param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.OnlineStoreSpecs.OnlineStoreFilterSpec">
            <summary>
            OnlineStore Filter Specification
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.OnlineStoreSpecs.OnlineStoreFilterSpec.#ctor(Greta.BO.BusinessLogic.Models.Dto.Search.OnlineStoreSearchModel)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.OnlineStoreSpecs.OnlineStoreGetStoreTokensSpec">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.OnlineStoreSpecs.OnlineStoreGetStoreTokensSpec.#ctor(System.Collections.Generic.IReadOnlyList{System.Int64},System.Int64)">
            <summary>
            
            </summary>
            <param name="stores"></param>
            <param name="departmentId"></param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.OnlineStoreSpec.OnlineStoreGetByIdSpec">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.OnlineStoreSpec.OnlineStoreGetByIdSpec.#ctor(System.Int64)">
            <summary>
            
            </summary>
            <param name="id"></param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.OnlineStoreSpec.OnlineStoreGetOnlineCategoryForStoreSpec">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.OnlineStoreSpec.OnlineStoreGetOnlineCategoryForStoreSpec.#ctor(System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="categoryId"></param>
            <param name="onlineStoreId"></param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.OnlineStoreSpec.OnlineStoreGetOnlineCategorySpec">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.OnlineStoreSpec.OnlineStoreGetOnlineCategorySpec.#ctor(System.Int64)">
            <summary>
            
            </summary>
            <param name="categoryId"></param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.OnlineStoreSpec.OnlineStoreGetOnlineProductForStoreSpec">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.OnlineStoreSpec.OnlineStoreGetOnlineProductForStoreSpec.#ctor(System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="productId"></param>
            <param name="onlineStoreId"></param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.OnlineStoreSpec.OnlineStoreGetStoreTokensIdSpec">
            <inheritdoc/>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.OnlineStoreSpec.OnlineStoreGetStoreTokensIdSpec.#ctor(System.Int64)">
            <summary>
            
            </summary>
            <param name="storeId"></param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.PriceBatchDetailSpecs.BatchGetByEntitySpec">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.PriceBatchDetailSpecs.BatchGetByEntitySpec.#ctor(System.Int64)">
            <summary>
            
            </summary>
            <param name="headerId">HeaderId</param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.PriceBatchDetailSpecs.GetProductIdByUpcSpecs">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.PriceBatchDetailSpecs.GetProductIdByUpcSpecs.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="upc">Upc</param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.PriceBatchDetailSpecs.PriceBatchDetailAuxGetByEntitySpec">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.PriceBatchDetailSpecs.PriceBatchDetailAuxGetByEntitySpec.#ctor(Greta.BO.Api.Entities.PriceBatchDetail)">
            <summary>
            
            </summary>
            <param name="entity">Entity</param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.PriceBatchDetailSpecs.PriceBatchDetailFilterSpec">
            <summary>
            PriceBatchDetail Filter Specification
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.PriceBatchDetailSpecs.PriceBatchDetailFilterSpec.#ctor(Greta.BO.BusinessLogic.Models.Dto.Search.PriceBatchDetailSearchModel)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.PriceBatchDetailSpecs.PriceBatchDetailGetAllByHeaderIdSpec">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.PriceBatchDetailSpecs.PriceBatchDetailGetAllByHeaderIdSpec.#ctor(System.Int64)">
            <summary>
            
            </summary>
            <param name="headerId"></param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.PriceBatchDetailSpecs.PriceBatchDetailGetByIdSpecs">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.PriceBatchDetailSpecs.PriceBatchDetailGetByIdSpecs.#ctor(System.Int64)">
            <summary>
            
            </summary>
            <param name="id">Id</param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.PriceBatchDetailSpecs.PriceBatchDetailGetByIdWithoutIncludeSpecs">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.PriceBatchDetailSpecs.PriceBatchDetailGetByIdWithoutIncludeSpecs.#ctor(System.Int64)">
            <summary>
            
            </summary>
            <param name="id">Id</param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.PriceBatchDetailSpecs.PriceBatchDetailGetByListIdsWithoutIncludeSpecs">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.PriceBatchDetailSpecs.PriceBatchDetailGetByListIdsWithoutIncludeSpecs.#ctor(System.Collections.Generic.List{System.Int64})">
            <summary>
            
            </summary>
            <param name="ids">Ids</param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.PriceBatchDetailSpecs.PriceBatchDetailGetByProductAndHeaderSpec">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.PriceBatchDetailSpecs.PriceBatchDetailGetByProductAndHeaderSpec.#ctor(System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="productId">Product Id</param>
            <param name="headerId">Header Id</param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.PriceBatchDetailSpecs.PriceBatchDetailWithIncludeSpec">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.PriceBatchDetailSpecs.PriceBatchDetailWithIncludeSpec.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.ProfilesSpecs.ProfilesCheckExistWithThisApplicationSpec">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.ProfilesSpecs.ProfilesCheckExistWithThisApplicationSpec.#ctor(System.Int64,System.Int64)">
            <summary>
            
            </summary>
            /// <param name="id">Profile Id</param>
            <param name="applicationId">Application Id</param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.ProfilesSpecs.ProfilesFilterSpec">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.ProfilesSpecs.ProfilesFilterSpec.#ctor(Greta.BO.BusinessLogic.Models.Dto.Search.ProfilesSearchModel)">
            <summary>
            
            </summary>
            <param name="filter"></param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.ProfilesSpecs.ProfilesGetByApplicationSpec">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.ProfilesSpecs.ProfilesGetByApplicationSpec.#ctor(System.Int64)">
            <summary>
            
            </summary>
            <param name="applicationId">Application Id</param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.ProfilesSpecs.ProfilesGetByIdSpec">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.ProfilesSpecs.ProfilesGetByIdSpec.#ctor(System.Int64)">
            <summary>
            
            </summary>
            <param name="id"></param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.ProfilesSpecs.ProfilesGetByNameDistinctIdSpec">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.ProfilesSpecs.ProfilesGetByNameDistinctIdSpec.#ctor(System.String,System.Int64)">
            <summary>
            
            </summary>
            <param name="name">Profile name</param>
            <param name="id">Profile id</param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.ProfilesSpecs.ProfilesGetByNameSpec">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.ProfilesSpecs.ProfilesGetByNameSpec.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name">Profile name</param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.RegionSpecs.RegionFilterSpec">
            <summary>
            Region Filter Specification
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.RegionSpecs.RegionFilterSpec.#ctor(Greta.BO.BusinessLogic.Models.Dto.Search.RegionSearchModel)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.ReportSpecs.ReportFilterSpec">
            <summary>
            Report Filter Specification
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.ReportSpecs.ReportFilterSpec.#ctor(Greta.BO.BusinessLogic.Models.Dto.Search.ReportSearchModel)">
            <summary>
            
            </summary>
            <param name="filter"></param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.ReportSpecs.ReportGetByCategorySpec">
            <summary>
            Report Filter Specification
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.ReportSpecs.ReportGetByCategorySpec.#ctor(Greta.BO.Api.Entities.Enum.ReportCategory)">
            <summary>
            
            </summary>
            <param name="category"></param>    
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.ReportSpecs.ReportGetByGuidSpec">
            <summary>
            Report Filter Specification
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.ReportSpecs.ReportGetByGuidSpec.#ctor(System.Guid)">
            <summary>
            
            </summary>
            <param name="guid"></param>    
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.ReportSpecs.ReportGetByNameSpec">
            <summary>
            Report Filter Specification
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.ReportSpecs.ReportGetByNameSpec.#ctor(System.String,System.Int64)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="id"></param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.ReportSpecs.ReportGetIdByGuidSpec">
            <summary>
            Report Filter Specification
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.ReportSpecs.ReportGetIdByGuidSpec.#ctor(System.Guid)">
            <summary>
            
            </summary>
            <param name="guid"></param>    
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.ReportSpecs.ReportGetSPAByFilterSpec">
            <summary>
            Report Filter Specification
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.ReportSpecs.ReportGetSPAByFilterSpec.#ctor(System.Collections.Generic.List{System.Guid})">
            <summary>
            
            </summary>
            <param name="guid"></param>    
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.RoundingTableSpecs.RoundingTableFilterSpec">
            <summary>
            RoundingTable Filter Specification
            </summary>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.ScaleCategorySpecs.ScaleCategoryFilterSpec">
            <summary>
            Scale Category Filter Specification
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.ScaleCategorySpecs.ScaleCategoryFilterSpec.#ctor(Greta.BO.BusinessLogic.Models.Dto.Search.ScaleCategorySearchModel)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.ScaleLabelTypeSpecs.ScaleLabelTypeFilterSpec">
            <summary>
            ScaleLabelType Filter Specification
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.ScaleLabelTypeSpecs.ScaleLabelTypeFilterSpec.#ctor(Greta.BO.BusinessLogic.Models.Dto.Search.ScaleLabelTypeSearchModel)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.ScalendarSpecs.ScalendarFilterSpec">
            <summary>
            Scalendar Filter Specification
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.ScalendarSpecs.ScalendarFilterSpec.#ctor(Greta.BO.BusinessLogic.Models.Dto.Search.ScalendarSearchModel)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.ScaleProductSpecs.CutListGetScaleProductByTemplateSpec">
            <summary>
            Get ScaleProduct by templateId
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.ScaleProductSpecs.CutListGetScaleProductByTemplateSpec.#ctor(System.Int64)">
            <summary>
            
            </summary>
            <param name="idTemplate"></param>    
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.ScaleProductSpecs.CutListGetScaleProductByUpcOrPluSpec">
            <summary>
            Get ScaleProduct by upc and plu
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.ScaleProductSpecs.CutListGetScaleProductByUpcOrPluSpec.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="upc"></param>   
            <param name="plu"></param>   
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.ScaleProductSpecs.CutListGetScaleProductByUpcPluProductSpec">
            <summary>
            Get ScaleProduct by Upc and Plu
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.ScaleProductSpecs.CutListGetScaleProductByUpcPluProductSpec.#ctor(System.Int64,Greta.BO.BusinessLogic.Models.Dto.Search.ScaleProductSearchModel)">
            <summary>
            
            </summary>
            <param name="cutlistTemplateId"></param>
            <param name="filter"></param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.ShelfTagSpecs.ShelfTagFilterSpec">
            <summary>
            ShelfTag Filter Specification
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.ShelfTagSpecs.ShelfTagFilterSpec.#ctor(Greta.BO.BusinessLogic.Models.Dto.Search.ShelfTagSearchModel)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.ShelfTags.ShelfTagPrintFilterSpec">
            <summary>
            ShelfTag print Filter Specification
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.ShelfTags.ShelfTagPrintFilterSpec.#ctor(Greta.BO.BusinessLogic.Handlers.Command.Zpl.ProcessShelfTagsCommand)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.StoreProductSpecs.StoreProductsByCategoryAndStoreSpec">
            <summary>
            Get StoreProducts by Category
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.StoreProductSpecs.StoreProductsByCategoryAndStoreSpec.#ctor(System.Int64,System.Boolean,System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="categoryId"></param>
            <param name="allStores"></param>
            <param name="regionId"></param>
            <param name="storeId"></param>
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.StoreSpecs.StoreFilterSpec">
            <summary>
            Store Filter Specification
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.StoreSpecs.StoreFilterSpec.#ctor(Greta.BO.BusinessLogic.Models.Dto.Search.StoreSearchModel)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.TimeKeepingSpecs.TimeKeepingFilterSpec">
            <summary>
            Filter the Time Keeping information for one user
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.TimeKeepingSpecs.TimeKeepingFilterSpec.#ctor(Greta.BO.BusinessLogic.Models.Dto.Search.TimeKeepingUserSearchModel)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.TimeKeepingSpecs.WorkTimeFilterSpec">
            <summary>
            Filter the Time Keeping information for one user
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.TimeKeepingSpecs.WorkTimeFilterSpec.#ctor(System.Int64,Greta.BO.BusinessLogic.Models.Dto.Search.WorkTimeSearchModel)">
            <inheritdoc />
        </member>
        <member name="T:Greta.BO.BusinessLogic.Specifications.VendorOrderSpecs.VendorOrderFilterSpec">
            <summary>
            Vendor Order Filter Specification
            </summary>
        </member>
        <member name="M:Greta.BO.BusinessLogic.Specifications.VendorOrderSpecs.VendorOrderFilterSpec.#ctor(Greta.BO.BusinessLogic.Models.Dto.Search.VendorOrderSearchModel)">
            <summary>
            
            </summary>
            <param name="filter"></param>
        </member>
    </members>
</doc>
