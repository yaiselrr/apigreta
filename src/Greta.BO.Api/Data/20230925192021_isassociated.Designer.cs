// <auto-generated />
using System;
using Greta.BO.Api.Sqlserver;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Greta.BO.Api.Data
{
    [DbContext(typeof(SqlServerContext))]
    [Migration("20230925192021_isassociated")]
    partial class isassociated
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AnimalCustomer", b =>
                {
                    b.Property<long>("AnimalsId")
                        .HasColumnType("bigint");

                    b.Property<long>("CustomersId")
                        .HasColumnType("bigint");

                    b.HasKey("AnimalsId", "CustomersId");

                    b.HasIndex("CustomersId");

                    b.ToTable("AnimalCustomer");
                });

            modelBuilder.Entity("BOUserStore", b =>
                {
                    b.Property<long>("EmployeesId")
                        .HasColumnType("bigint");

                    b.Property<long>("StoresId")
                        .HasColumnType("bigint");

                    b.HasKey("EmployeesId", "StoresId");

                    b.HasIndex("StoresId");

                    b.ToTable("BOUserStore");
                });

            modelBuilder.Entity("BatchStore", b =>
                {
                    b.Property<long>("BatchsId")
                        .HasColumnType("bigint");

                    b.Property<long>("StoresId")
                        .HasColumnType("bigint");

                    b.HasKey("BatchsId", "StoresId");

                    b.HasIndex("StoresId");

                    b.ToTable("BatchStore");
                });

            modelBuilder.Entity("BreedScalendar", b =>
                {
                    b.Property<long>("BreedsId")
                        .HasColumnType("bigint");

                    b.Property<long>("ScalendarsId")
                        .HasColumnType("bigint");

                    b.HasKey("BreedsId", "ScalendarsId");

                    b.HasIndex("ScalendarsId");

                    b.ToTable("BreedScalendar");
                });

            modelBuilder.Entity("CategoryFee", b =>
                {
                    b.Property<long>("CategoriesId")
                        .HasColumnType("bigint");

                    b.Property<long>("FeesId")
                        .HasColumnType("bigint");

                    b.HasKey("CategoriesId", "FeesId");

                    b.HasIndex("FeesId");

                    b.ToTable("CategoryFee");
                });

            modelBuilder.Entity("CategoryTax", b =>
                {
                    b.Property<long>("CategoriesId")
                        .HasColumnType("bigint");

                    b.Property<long>("TaxsId")
                        .HasColumnType("bigint");

                    b.HasKey("CategoriesId", "TaxsId");

                    b.HasIndex("TaxsId");

                    b.ToTable("CategoryTax");
                });

            modelBuilder.Entity("CustomerDiscount", b =>
                {
                    b.Property<long>("CustomersId")
                        .HasColumnType("bigint");

                    b.Property<long>("DiscountsId")
                        .HasColumnType("bigint");

                    b.HasKey("CustomersId", "DiscountsId");

                    b.HasIndex("DiscountsId");

                    b.ToTable("CustomerDiscount");
                });

            modelBuilder.Entity("CustomerMixAndMatch", b =>
                {
                    b.Property<long>("CustomersId")
                        .HasColumnType("bigint");

                    b.Property<long>("MixAndMatchesId")
                        .HasColumnType("bigint");

                    b.HasKey("CustomersId", "MixAndMatchesId");

                    b.HasIndex("MixAndMatchesId");

                    b.ToTable("CustomerMixAndMatch");
                });

            modelBuilder.Entity("CutListTemplateScaleProduct", b =>
                {
                    b.Property<long>("CutListTemplatesId")
                        .HasColumnType("bigint");

                    b.Property<long>("ScaleProductsId")
                        .HasColumnType("bigint");

                    b.HasKey("CutListTemplatesId", "ScaleProductsId");

                    b.HasIndex("ScaleProductsId");

                    b.ToTable("CutListTemplateScaleProduct");
                });

            modelBuilder.Entity("DepartmentExternalScale", b =>
                {
                    b.Property<long>("DepartmentsId")
                        .HasColumnType("bigint");

                    b.Property<long>("ExternalScalesId")
                        .HasColumnType("bigint");

                    b.HasKey("DepartmentsId", "ExternalScalesId");

                    b.HasIndex("ExternalScalesId");

                    b.ToTable("DepartmentExternalScale");
                });

            modelBuilder.Entity("DepartmentOnlineStore", b =>
                {
                    b.Property<long>("DepartmentsId")
                        .HasColumnType("bigint");

                    b.Property<long>("OnlineStoresId")
                        .HasColumnType("bigint");

                    b.HasKey("DepartmentsId", "OnlineStoresId");

                    b.HasIndex("OnlineStoresId");

                    b.ToTable("DepartmentOnlineStore");
                });

            modelBuilder.Entity("DiscountProduct", b =>
                {
                    b.Property<long>("DiscountsId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductsId")
                        .HasColumnType("bigint");

                    b.HasKey("DiscountsId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("DiscountProduct");
                });

            modelBuilder.Entity("FamilyFee", b =>
                {
                    b.Property<long>("FamiliesId")
                        .HasColumnType("bigint");

                    b.Property<long>("FeesId")
                        .HasColumnType("bigint");

                    b.HasKey("FamiliesId", "FeesId");

                    b.HasIndex("FeesId");

                    b.ToTable("FamilyFee");
                });

            modelBuilder.Entity("FamilyMixAndMatch", b =>
                {
                    b.Property<long>("FamiliesId")
                        .HasColumnType("bigint");

                    b.Property<long>("MixAndMatchsId")
                        .HasColumnType("bigint");

                    b.HasKey("FamiliesId", "MixAndMatchsId");

                    b.HasIndex("MixAndMatchsId");

                    b.ToTable("FamilyMixAndMatch");
                });

            modelBuilder.Entity("FeeProduct", b =>
                {
                    b.Property<long>("FeesId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductsId")
                        .HasColumnType("bigint");

                    b.HasKey("FeesId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("FeeProduct");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.Animal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("BreedId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("CutWeight")
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime?>("DateReceived")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateSlaughtered")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("LiveWeight")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("RailWeight")
                        .HasColumnType("numeric(18,2)");

                    b.Property<long?>("RancherId")
                        .HasColumnType("bigint");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("SubPrimalWeight")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("BreedId");

                    b.HasIndex("RancherId");

                    b.HasIndex("StoreId");

                    b.ToTable("Animal");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.BOUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("BOProfileId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Expire")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<long?>("POSProfileId")
                        .HasColumnType("bigint");

                    b.Property<string>("Pin")
                        .HasColumnType("text");

                    b.Property<long?>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BOProfileId");

                    b.HasIndex("POSProfileId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("BOUser");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.Batch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.ToTable("Batch");

                    b.HasDiscriminator<int>("Type").IsComplete(false).HasValue(0);

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.BatchClose", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AcquirerName")
                        .HasColumnType("text");

                    b.Property<string>("Batch")
                        .HasColumnType("text");

                    b.Property<int>("BatchRecordCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("DeviceId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("EBTAmount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("HostResponseText")
                        .HasColumnType("text");

                    b.Property<decimal>("HostTotalsAmount1")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("HostTotalsAmount5")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("HostTotalsCount1")
                        .HasColumnType("integer");

                    b.Property<int>("HostTotalsCount5")
                        .HasColumnType("integer");

                    b.Property<string>("MerchantName")
                        .HasColumnType("text");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<string>("TerminalNumber")
                        .HasColumnType("text");

                    b.Property<string>("TransactionResponse")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("BatchClose");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.BinLocation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Aisle")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(64)");

                    b.Property<int>("Section")
                        .HasColumnType("integer");

                    b.Property<int>("Shelf")
                        .HasColumnType("integer");

                    b.Property<int>("Side")
                        .HasColumnType("integer");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<long>("Store")
                        .HasColumnType("long");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("BinLocation");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.Breed", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AnimalBreedType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Maxx")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(60)");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Breed");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AnimalBreedType = 0,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Maxx = 0m,
                            Name = "Angus",
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        });
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.CSVMapping", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MapperJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ModelImport")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.ToTable("CSVMapping");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("AddOnlineStore")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowZeroStock")
                        .HasColumnType("boolean");

                    b.Property<string>("BackgroundColor")
                        .HasColumnType("text");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("DefaulShelfTagId")
                        .HasColumnType("bigint");

                    b.Property<long>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(254)");

                    b.Property<bool>("DisplayStockOnPosButton")
                        .HasColumnType("boolean");

                    b.Property<string>("ForegroundColor")
                        .HasColumnType("text");

                    b.Property<int?>("MinimumAge")
                        .HasColumnType("integer");

                    b.Property<bool>("Modifier")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.Property<bool>("NoDiscountAllowed")
                        .HasColumnType("boolean");

                    b.Property<bool>("NoPriceOnShelfTag")
                        .HasColumnType("boolean");

                    b.Property<bool>("PrintShelfTag")
                        .HasColumnType("boolean");

                    b.Property<bool>("PromptPriceAtPOS")
                        .HasColumnType("boolean");

                    b.Property<bool>("SnapEBT")
                        .HasColumnType("boolean");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<decimal>("TargetGrossProfit")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("VisibleOnPos")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId")
                        .IsUnique();

                    b.HasIndex("DefaulShelfTagId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Name");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.ChangePriceReasonCode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("ChangeTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("DeviceId")
                        .HasColumnType("bigint");

                    b.Property<string>("DeviceName")
                        .HasColumnType("text");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<string>("EmployeeName")
                        .HasColumnType("text");

                    b.Property<decimal>("NewPrice")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("OldPrice")
                        .HasColumnType("numeric(18,2)");

                    b.Property<long>("ReasonCodeId")
                        .HasColumnType("bigint");

                    b.Property<string>("ReasonCodeName")
                        .HasColumnType("text");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.ToTable("ChangePriceReasonCode");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.ClientApplication", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(40)");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ClientApplication");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Back Office",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "POS",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        });
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(40)");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Country");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "United States",
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        });
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address1")
                        .HasColumnType("text");

                    b.Property<string>("Address2")
                        .HasColumnType("text");

                    b.Property<string>("CityName")
                        .HasColumnType("varchar(30)");

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<string>("CountryName")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.Property<DateTime>("LastBuy")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.Property<bool>("MarketingAllowed")
                        .HasColumnType("boolean");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<long>("ProvinceId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProvinceName")
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<int>("StoreCredit")
                        .HasPrecision(18, 2)
                        .HasColumnType("integer");

                    b.Property<bool>("TaxExcept")
                        .HasColumnType("boolean");

                    b.Property<string>("TaxID")
                        .HasColumnType("varchar(64)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("UsePrice2")
                        .HasColumnType("boolean");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Zip")
                        .HasColumnType("varchar(12)");

                    b.HasKey("Id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.CutList", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AnimalId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CutListTemplateId")
                        .HasColumnType("bigint");

                    b.Property<int>("CutListType")
                        .HasColumnType("integer");

                    b.Property<string>("SpecialInstruction")
                        .HasColumnType("text");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CutListTemplateId");

                    b.HasIndex("AnimalId", "CustomerId")
                        .IsUnique();

                    b.ToTable("CutList");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.CutListDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("CutListId")
                        .HasColumnType("bigint");

                    b.Property<int>("Pack")
                        .HasColumnType("integer");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Thick")
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("CutListId");

                    b.HasIndex("ProductId");

                    b.ToTable("CutListDetail");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.CutListTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CutListTemplate");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.Department", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BackgroundColor")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("ForegroundColor")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.Property<bool>("Perishable")
                        .HasColumnType("boolean");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Department");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = 1,
                            Name = "Default",
                            Perishable = false,
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        });
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.Device", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("BrokerAlive")
                        .HasColumnType("boolean");

                    b.Property<string>("BrokerVersion")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeviceId")
                        .HasColumnType("text");

                    b.Property<Guid>("GuidId")
                        .HasColumnType("uuid");

                    b.Property<string>("LabelPrinterName")
                        .HasColumnType("text");

                    b.Property<int>("LabelPrinterType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastPongTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PaymentGatewayPosLinkBaudRate")
                        .HasColumnType("text");

                    b.Property<string>("PaymentGatewayPosLinkCommType")
                        .HasColumnType("text");

                    b.Property<string>("PaymentGatewayPosLinkDestIP")
                        .HasColumnType("text");

                    b.Property<string>("PaymentGatewayPosLinkDestPort")
                        .HasColumnType("text");

                    b.Property<string>("PaymentGatewayPosLinkSerialPort")
                        .HasColumnType("text");

                    b.Property<string>("PaymentGatewayPosLinkTimeOut")
                        .HasColumnType("text");

                    b.Property<int>("PaymentGatewayType")
                        .HasColumnType("integer");

                    b.Property<string>("PrinterName")
                        .HasColumnType("text");

                    b.Property<int>("PrinterType")
                        .HasColumnType("integer");

                    b.Property<string>("Printers")
                        .HasColumnType("text");

                    b.Property<string>("RealTimeRaw")
                        .HasColumnType("text");

                    b.Property<int>("ScaleBaudRate")
                        .HasColumnType("integer");

                    b.Property<string>("ScaleComName")
                        .HasColumnType("text");

                    b.Property<int>("ScaleModel")
                        .HasColumnType("integer");

                    b.Property<string>("SignalRConnectionId")
                        .HasColumnType("text");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<int>("SynchroVersion")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("WorkerAlive")
                        .HasColumnType("boolean");

                    b.Property<string>("WorkerVersion")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GuidId")
                        .IsUnique();

                    b.HasIndex("StoreId");

                    b.ToTable("Device");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.Discount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("ActiveOnPeriod")
                        .HasColumnType("boolean");

                    b.Property<bool>("ApplyAutomatically")
                        .HasColumnType("boolean");

                    b.Property<bool>("ApplyToCustomerOnly")
                        .HasColumnType("boolean");

                    b.Property<bool>("ApplyToProduct")
                        .HasColumnType("boolean");

                    b.Property<bool>("ApplyToTotalSale")
                        .HasColumnType("boolean");

                    b.Property<long?>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("FamilyId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("Friday")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Monday")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.Property<bool>("NotAllowAnyOtherDiscount")
                        .HasColumnType("boolean");

                    b.Property<bool>("PromptForPrice")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Saturday")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Sunday")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Thursday")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Tuesday")
                        .HasColumnType("boolean");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric(18,2)");

                    b.Property<bool?>("Wednesday")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FamilyId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Discount");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.EndOfDay", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("BottleReturnTotal")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("CashOverShort")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("CashToDeposit")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("CashTotalCounted")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("Count1")
                        .HasColumnType("integer");

                    b.Property<int>("Count10")
                        .HasColumnType("integer");

                    b.Property<int>("Count100")
                        .HasColumnType("integer");

                    b.Property<int>("Count20")
                        .HasColumnType("integer");

                    b.Property<int>("Count5")
                        .HasColumnType("integer");

                    b.Property<int>("Count50")
                        .HasColumnType("integer");

                    b.Property<int>("Countc1")
                        .HasColumnType("integer");

                    b.Property<int>("Countc10")
                        .HasColumnType("integer");

                    b.Property<int>("Countc100")
                        .HasColumnType("integer");

                    b.Property<int>("Countc25")
                        .HasColumnType("integer");

                    b.Property<int>("Countc5")
                        .HasColumnType("integer");

                    b.Property<int>("Countc50")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("CreditCardSales")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("DebitCashBack")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("EBTCashBack")
                        .HasColumnType("numeric(18,2)");

                    b.Property<long>("ElementId")
                        .HasColumnType("bigint");

                    b.Property<string>("ElementName")
                        .HasColumnType("text");

                    b.Property<decimal>("GiftCardSales")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ManualDiscount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PaidOut")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("RefundReturn")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("RefundReturnEbt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("RefundReturnOther")
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime?>("SaleDay")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SalesCount")
                        .HasColumnType("integer");

                    b.Property<decimal>("SalesTaxCollected")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("SnapEBTSales")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("StartingCash")
                        .HasColumnType("integer");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("TenderedCashTotal")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("TotalCash")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("TotalCheck")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalFeeAndCharges")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("TotalNotTaxableSales")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("TotalSales")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("TotalTaxableSales")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("TrackingType")
                        .HasColumnType("integer");

                    b.Property<decimal>("UpcReturns")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.ToTable("EndOfDay");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.ExternalJob", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Data")
                        .HasColumnType("text");

                    b.Property<int>("FailRetry")
                        .HasColumnType("integer");

                    b.Property<string>("Messages")
                        .HasColumnType("text");

                    b.Property<string>("RawData")
                        .HasColumnType("text");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.ToTable("ExternalJob");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.ExternalScale", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ExternalScaleType")
                        .HasColumnType("integer");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.Property<DateTime>("LastCategoryUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastDepartmentUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastPluUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Port")
                        .HasColumnType("varchar(10)");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SyncDeviceId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Ip")
                        .IsUnique();

                    b.HasIndex("StoreId");

                    b.HasIndex("SyncDeviceId");

                    b.ToTable("ExternalScale");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            ExternalScaleType = 0,
                            Ip = "192.168.0.101",
                            LastCategoryUpdate = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            LastDepartmentUpdate = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            LastPluUpdate = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Port = "1889",
                            State = true,
                            StoreId = 1L,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        });
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.Family", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.ToTable("Family");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.Fee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<bool>("ApplyAutomatically")
                        .HasColumnType("boolean");

                    b.Property<bool>("ApplyDiscount")
                        .HasColumnType("boolean");

                    b.Property<bool>("ApplyFoodStamp")
                        .HasColumnType("boolean");

                    b.Property<bool>("ApplyTax")
                        .HasColumnType("boolean");

                    b.Property<bool>("ApplyToItemQty")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IncludeInItemPrice")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(40)");

                    b.Property<bool>("RestrictToItems")
                        .HasColumnType("boolean");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Fee");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.FunctionGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ClientApplicationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(40)");

                    b.Property<long?>("ProfilesId")
                        .HasColumnType("bigint");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("ClientApplicationId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ProfilesId");

                    b.ToTable("FunctionGroup");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ClientApplicationId = 1L,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Tax",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 2L,
                            ClientApplicationId = 1L,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Discount",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 3L,
                            ClientApplicationId = 1L,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Category",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 4L,
                            ClientApplicationId = 1L,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "External Scale",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 5L,
                            ClientApplicationId = 1L,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Family",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 6L,
                            ClientApplicationId = 1L,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Profiles",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 7L,
                            ClientApplicationId = 1L,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Scale Brand",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 8L,
                            ClientApplicationId = 1L,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Scale Category",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 9L,
                            ClientApplicationId = 1L,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Scale label type",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 10L,
                            ClientApplicationId = 1L,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Store",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 12L,
                            ClientApplicationId = 1L,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Tender Type",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 13L,
                            ClientApplicationId = 1L,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Vendor",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 14L,
                            ClientApplicationId = 1L,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Vendor Contact",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 17L,
                            ClientApplicationId = 1L,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "User",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 18L,
                            ClientApplicationId = 1L,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Role",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 19L,
                            ClientApplicationId = 1L,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Price Batch",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 20L,
                            ClientApplicationId = 1L,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Ad Batch",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 21L,
                            ClientApplicationId = 1L,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Mix and Match",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 22L,
                            ClientApplicationId = 1L,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Product",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 23L,
                            ClientApplicationId = 1L,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Department",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 24L,
                            ClientApplicationId = 1L,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Shelf Tags",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 25L,
                            ClientApplicationId = 1L,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Price Family",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 26L,
                            ClientApplicationId = 1L,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Region",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 27L,
                            ClientApplicationId = 1L,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Report",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 28L,
                            ClientApplicationId = 1L,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Employee",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 29L,
                            ClientApplicationId = 1L,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Customer",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 30L,
                            ClientApplicationId = 1L,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "General Setting",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 31L,
                            ClientApplicationId = 1L,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "POS Config",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 33L,
                            ClientApplicationId = 1L,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Home Screen",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 37L,
                            ClientApplicationId = 1L,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Scale Home FAV",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 40L,
                            ClientApplicationId = 1L,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Fees and Charges ",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 41L,
                            ClientApplicationId = 1L,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Device",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 42L,
                            ClientApplicationId = 1L,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "End of Day",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 43L,
                            ClientApplicationId = 1L,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Bin Location",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 44L,
                            ClientApplicationId = 1L,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Inventory",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 45L,
                            ClientApplicationId = 1L,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Loyalty Discount",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 46L,
                            ClientApplicationId = 1L,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Vendor Order",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 47L,
                            ClientApplicationId = 1L,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Reason Codes",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 48L,
                            ClientApplicationId = 1L,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Rancher",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 49L,
                            ClientApplicationId = 1L,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Breed",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 50L,
                            ClientApplicationId = 1L,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Grind",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 51L,
                            ClientApplicationId = 1L,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Animal",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 52L,
                            ClientApplicationId = 1L,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Schedule",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 53L,
                            ClientApplicationId = 1L,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Scalendar",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 101L,
                            ClientApplicationId = 2L,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Sell",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 102L,
                            ClientApplicationId = 2L,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Pos Buttons",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        });
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.GiftCard", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateSold")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("DeviceId")
                        .HasColumnType("bigint");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<string>("EmployeeName")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUsed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("varchar(40)");

                    b.Property<long>("SaleId")
                        .HasColumnType("bigint");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("StoreId");

                    b.ToTable("GiftCard");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.GiftCardTransaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateUse")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Device")
                        .HasColumnType("bigint");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<string>("EmployeeName")
                        .HasColumnType("text");

                    b.Property<long>("GiftCardId")
                        .HasColumnType("bigint");

                    b.Property<long>("SaleId")
                        .HasColumnType("bigint");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("GiftCardId");

                    b.ToTable("GiftCardTransaction");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.Grind", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(60)");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Grind");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.Image", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.KitProductProduct", b =>
                {
                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long>("KitProductId")
                        .HasColumnType("bigint");

                    b.HasKey("ProductId", "KitProductId");

                    b.HasIndex("KitProductId");

                    b.ToTable("KitProductProduct", (string)null);
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.LoyaltyDiscount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Maximum")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("StoreId")
                        .IsUnique();

                    b.ToTable("LoyaltyDiscount");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.MixAndMatch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("ActivePeriod")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<bool>("ApplyToCustomerOnly")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MixAndMatchType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.Property<bool>("NotAllowAnyOtherDiscount")
                        .HasColumnType("boolean");

                    b.Property<long?>("ProductBuyId")
                        .HasColumnType("bigint");

                    b.Property<int>("QTY")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ProductBuyId");

                    b.ToTable("MixAndMatch");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.OnlineCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OnlineCategoryId")
                        .HasColumnType("text");

                    b.Property<long>("OnlineStoreId")
                        .HasColumnType("bigint");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OnlineStoreId");

                    b.ToTable("OnlineCategory");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.OnlineProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OnlineProductId")
                        .HasColumnType("text");

                    b.Property<long>("OnlineStoreId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("OnlineStoreId");

                    b.HasIndex("ProductId");

                    b.ToTable("OnlineProduct");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.OnlineStore", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActiveWebSite")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAllowStorePickup")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAssociated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStockUpdated")
                        .HasColumnType("boolean");

                    b.Property<int>("LocationServerType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.Property<string>("NameWebsite")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("NameWebsite")
                        .IsUnique();

                    b.HasIndex("StoreId");

                    b.ToTable("OnlineStore");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.Permission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(40)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("FunctionGroupId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(40)");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("FunctionGroupId");

                    b.ToTable("Permission");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Code = "view_tax",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 1L,
                            Name = "View",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 2L,
                            Code = "add_edit_tax",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 1L,
                            Name = "Add/Edit",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 3L,
                            Code = "delete_tax",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 1L,
                            Name = "Delete",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 4L,
                            Code = "view_discount",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 2L,
                            Name = "View",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 5L,
                            Code = "add_edit_discount",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 2L,
                            Name = "Add/Edit",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 6L,
                            Code = "delete_discount",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 2L,
                            Name = "Delete",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 7L,
                            Code = "view_category",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 3L,
                            Name = "View",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 8L,
                            Code = "add_edit_category",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 3L,
                            Name = "Add/Edit",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 9L,
                            Code = "delete_category",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 3L,
                            Name = "Delete",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 10L,
                            Code = "view_external_scale",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 4L,
                            Name = "View",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 11L,
                            Code = "add_edit_external_scale",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 4L,
                            Name = "Add/Edit",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 12L,
                            Code = "delete_external_scale",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 4L,
                            Name = "Delete",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 13L,
                            Code = "view_family",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 5L,
                            Name = "View",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 14L,
                            Code = "add_edit_family",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 5L,
                            Name = "Add/Edit",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 15L,
                            Code = "delete_family",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 5L,
                            Name = "Delete",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 16L,
                            Code = "view_profiles",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 6L,
                            Name = "View",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 17L,
                            Code = "add_edit_profiles",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 6L,
                            Name = "Add/Edit",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 18L,
                            Code = "delete_profiles",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 6L,
                            Name = "Delete",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 19L,
                            Code = "view_scale_brand",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 7L,
                            Name = "View",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 20L,
                            Code = "add_edit_scale_brand",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 7L,
                            Name = "Add/Edit",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 21L,
                            Code = "delete_scale_brand",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 7L,
                            Name = "Delete",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 22L,
                            Code = "view_scale_category",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 8L,
                            Name = "View",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 23L,
                            Code = "add_edit_scale_category",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 8L,
                            Name = "Add/Edit",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 24L,
                            Code = "delete_scale_category",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 8L,
                            Name = "Delete",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 25L,
                            Code = "view_scale_label_type",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 9L,
                            Name = "View",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 26L,
                            Code = "add_edit_scale_label_type",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 9L,
                            Name = "Add/Edit",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 27L,
                            Code = "delete_scale_label_type",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 9L,
                            Name = "Delete",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 28L,
                            Code = "view_store",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 10L,
                            Name = "View",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 29L,
                            Code = "add_edit_store",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 10L,
                            Name = "Add/Edit",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 30L,
                            Code = "delete_store",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 10L,
                            Name = "Delete",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 34L,
                            Code = "view_tender_type",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 12L,
                            Name = "View",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 35L,
                            Code = "add_edit_tender_type",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 12L,
                            Name = "Add/Edit",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 36L,
                            Code = "delete_tender_type",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 12L,
                            Name = "Delete",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 37L,
                            Code = "view_vendor",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 13L,
                            Name = "View",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 38L,
                            Code = "add_edit_vendor",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 13L,
                            Name = "Add/Edit",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 39L,
                            Code = "delete_vendor",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 13L,
                            Name = "Delete",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 40L,
                            Code = "view_vendor_contact",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 14L,
                            Name = "View",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 41L,
                            Code = "add_edit_vendor_contact",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 14L,
                            Name = "Add/Edit",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 42L,
                            Code = "delete_vendor_contact",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 14L,
                            Name = "Delete",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 49L,
                            Code = "view_user",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 17L,
                            Name = "View",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 50L,
                            Code = "add_edit_user",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 17L,
                            Name = "Add/Edit",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 51L,
                            Code = "delete_user",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 17L,
                            Name = "Delete",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 52L,
                            Code = "view_role",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 18L,
                            Name = "View",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 53L,
                            Code = "add_edit_role",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 18L,
                            Name = "Add/Edit",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 54L,
                            Code = "delete_role",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 18L,
                            Name = "Delete",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 55L,
                            Code = "view_price_batch",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 19L,
                            Name = "View",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 56L,
                            Code = "add_edit_price_batch",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 19L,
                            Name = "Add/Edit",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 57L,
                            Code = "delete_price_batch",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 19L,
                            Name = "Delete",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 58L,
                            Code = "view_ad_batch",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 20L,
                            Name = "View",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 59L,
                            Code = "add_edit_ad_batch",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 20L,
                            Name = "Add/Edit",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 60L,
                            Code = "delete_ad_batch",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 20L,
                            Name = "Delete",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 61L,
                            Code = "view_mix_and_match",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 21L,
                            Name = "View",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 62L,
                            Code = "add_edit_mix_and_match",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 21L,
                            Name = "Add/Edit",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 63L,
                            Code = "delete_mix_and_match",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 21L,
                            Name = "Delete",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 64L,
                            Code = "view_product",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 22L,
                            Name = "View",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 65L,
                            Code = "add_edit_product",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 22L,
                            Name = "Add/Edit",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 66L,
                            Code = "delete_product",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 22L,
                            Name = "Delete",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 67L,
                            Code = "view_department",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 23L,
                            Name = "View",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 68L,
                            Code = "add_edit_department",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 23L,
                            Name = "Add/Edit",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 69L,
                            Code = "delete_department",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 23L,
                            Name = "Delete",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 70L,
                            Code = "view_shelf_tags",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 24L,
                            Name = "View",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 71L,
                            Code = "add_edit_shelf_tags",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 24L,
                            Name = "Add/Edit",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 72L,
                            Code = "delete_shelf_tags",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 24L,
                            Name = "Delete",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 73L,
                            Code = "view_price_family",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 25L,
                            Name = "View",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 74L,
                            Code = "add_edit_price_family",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 25L,
                            Name = "Add/Edit",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 75L,
                            Code = "delete_price_family",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 25L,
                            Name = "Delete",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 76L,
                            Code = "view_region",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 26L,
                            Name = "View",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 77L,
                            Code = "add_edit_region",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 26L,
                            Name = "Add/Edit",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 78L,
                            Code = "delete_region",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 26L,
                            Name = "Delete",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 82L,
                            Code = "view_employee",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 28L,
                            Name = "View",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 83L,
                            Code = "add_edit_employee",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 28L,
                            Name = "Add/Edit",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 84L,
                            Code = "delete_employee",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 28L,
                            Name = "Delete",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 85L,
                            Code = "view_customer",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 29L,
                            Name = "View",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 86L,
                            Code = "add_edit_customer",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 29L,
                            Name = "Add/Edit",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 87L,
                            Code = "delete_customer",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 29L,
                            Name = "Delete",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 88L,
                            Code = "view_general_setting",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 30L,
                            Name = "View",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 89L,
                            Code = "add_edit_general_setting",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 30L,
                            Name = "Add/Edit",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 90L,
                            Code = "delete_general_setting",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 30L,
                            Name = "Delete",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 91L,
                            Code = "view_pos_config",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 31L,
                            Name = "View",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 92L,
                            Code = "add_edit_pos_config",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 31L,
                            Name = "Add/Edit",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 93L,
                            Code = "delete_pos_config",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 31L,
                            Name = "Delete",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 97L,
                            Code = "view_home_screen",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 33L,
                            Name = "View",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 98L,
                            Code = "add_edit_home_screen",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 33L,
                            Name = "Add/Edit",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 99L,
                            Code = "delete_home_screen",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 33L,
                            Name = "Delete",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 109L,
                            Code = "view_scale_home_fav",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 37L,
                            Name = "View",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 110L,
                            Code = "add_edit_scale_home_fav",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 37L,
                            Name = "Add/Edit",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 111L,
                            Code = "delete_scale_home_fav",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 37L,
                            Name = "Delete",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 118L,
                            Code = "view_fee",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 40L,
                            Name = "View",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 119L,
                            Code = "add_edit_fee",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 40L,
                            Name = "Add/Edit",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 120L,
                            Code = "delete_fee",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 40L,
                            Name = "Delete",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 121L,
                            Code = "view_bin_location",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 43L,
                            Name = "View",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 122L,
                            Code = "add_edit_bin_location",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 43L,
                            Name = "Add/Edit",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 123L,
                            Code = "delete_bin_location",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 43L,
                            Name = "Delete",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 124L,
                            Code = "view_inventory",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 44L,
                            Name = "View",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 125L,
                            Code = "add_edit_inventory",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 44L,
                            Name = "Add/Edit",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 126L,
                            Code = "delete_inventory",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 44L,
                            Name = "Delete",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 144L,
                            Code = "view_loyalty_discount",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 45L,
                            Name = "View",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 145L,
                            Code = "add_edit_loyalty_discount",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 45L,
                            Name = "Add/Edit",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 146L,
                            Code = "delete_loyalty_discount",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 45L,
                            Name = "Delete",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 147L,
                            Code = "view_vendor_order",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 46L,
                            Name = "View",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 148L,
                            Code = "add_edit_vendor_order",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 46L,
                            Name = "Add/Edit",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 149L,
                            Code = "delete_vendor_order",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 46L,
                            Name = "Delete",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 130L,
                            Code = "associate_product_store",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 22L,
                            Name = "Assign Store",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 131L,
                            Code = "associate_product_vendor",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 22L,
                            Name = "Assign Vendor",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 133L,
                            Code = "associate_product_scale_label_definition",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 22L,
                            Name = "Assign Scale Label Definitiion",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 137L,
                            Code = "add_edit_device",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 41L,
                            Name = "Add / Edit",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 138L,
                            Code = "view_device",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 41L,
                            Name = "View",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 139L,
                            Code = "view_report",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 27L,
                            Name = "View",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 140L,
                            Code = "close_eod",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 42L,
                            Name = "Close Day",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 141L,
                            Code = "manage_eod",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 42L,
                            Name = "Manage",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 150L,
                            Code = "view_reason_codes",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 47L,
                            Name = "View",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 151L,
                            Code = "add_edit_reason_codes",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 47L,
                            Name = "Add/Edit",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 152L,
                            Code = "delete_reason_codes",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 47L,
                            Name = "Delete",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 153L,
                            Code = "view_rancher",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 48L,
                            Name = "View",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 154L,
                            Code = "add_edit_rancher",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 48L,
                            Name = "Add/Edit",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 155L,
                            Code = "delete_rancher",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 48L,
                            Name = "Delete",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 156L,
                            Code = "view_breed",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 49L,
                            Name = "View",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 157L,
                            Code = "add_edit_breed",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 49L,
                            Name = "Add/Edit",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 158L,
                            Code = "delete_breed",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 49L,
                            Name = "Delete",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 159L,
                            Code = "view_grind",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 50L,
                            Name = "View",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 160L,
                            Code = "add_edit_grind",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 50L,
                            Name = "Add/Edit",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 161L,
                            Code = "delete_grind",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 50L,
                            Name = "Delete",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 162L,
                            Code = "view_animal",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 51L,
                            Name = "View",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 163L,
                            Code = "add_edit_animal",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 51L,
                            Name = "Add/Edit",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 164L,
                            Code = "delete_animal",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 51L,
                            Name = "Delete",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 165L,
                            Code = "view_schedule",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 52L,
                            Name = "View",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 166L,
                            Code = "add_edit_schedule",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 52L,
                            Name = "Add/Edit",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 167L,
                            Code = "delete_schedule",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 52L,
                            Name = "Delete",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 168L,
                            Code = "view_scalendar",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 53L,
                            Name = "View",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 169L,
                            Code = "add_edit_scalendar",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 53L,
                            Name = "Add/Edit",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 170L,
                            Code = "delete_scalendar",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 53L,
                            Name = "Delete",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 1001L,
                            Code = "allow_sell",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 101L,
                            Name = "Sell",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 1002L,
                            Code = "posbutton_void",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 102L,
                            Name = "Void",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 1003L,
                            Code = "posbutton_cancel",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 102L,
                            Name = "Cancel",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 1004L,
                            Code = "posbutton_snap",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 102L,
                            Name = "Snap/EBT",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 1005L,
                            Code = "posbutton_discount",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 102L,
                            Name = "Discount",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 1006L,
                            Code = "posbutton_gift",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 102L,
                            Name = "Gift Card",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 1007L,
                            Code = "posbutton_suspend",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 102L,
                            Name = "Suspend/Resume",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 1008L,
                            Code = "posbutton_bottle",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 102L,
                            Name = "Bottle Refund",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 1009L,
                            Code = "posbutton_return",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 102L,
                            Name = "Return",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 1010L,
                            Code = "posbutton_zero",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 102L,
                            Name = "Zero Scale",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 1011L,
                            Code = "posbutton_nosale",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 102L,
                            Name = "No Sale",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 1012L,
                            Code = "posbutton_reprint",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 102L,
                            Name = "Reprint Receipt",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 1013L,
                            Code = "posbutton_paidout",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 102L,
                            Name = "Paid Out",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 1014L,
                            Code = "posbutton_ebtbalance",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 102L,
                            Name = "EBT Check Balance",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 1015L,
                            Code = "posbutton_removeservicefee",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 102L,
                            Name = "Remove Service Fee",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 1016L,
                            Code = "posbutton_taxoverride",
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            FunctionGroupId = 102L,
                            Name = "Tax override",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        });
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.PriceBatchDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("FamilyId")
                        .HasColumnType("bigint");

                    b.Property<long>("HeaderId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(18,2)");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("FamilyId");

                    b.HasIndex("HeaderId");

                    b.HasIndex("ProductId");

                    b.ToTable("PriceBatchDetail");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("AddOnlineStore")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowZeroStock")
                        .HasColumnType("boolean");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("DefaulShelfTagId")
                        .HasColumnType("bigint");

                    b.Property<long>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<bool>("DisplayStockOnPosButton")
                        .HasColumnType("boolean");

                    b.Property<long?>("FamilyId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsWeighted")
                        .HasColumnType("boolean");

                    b.Property<int>("LoyaltyPoints")
                        .HasColumnType("integer");

                    b.Property<int?>("MinimumAge")
                        .HasColumnType("integer");

                    b.Property<bool>("Modifier")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("NoDiscountAllowed")
                        .HasColumnType("boolean");

                    b.Property<bool>("NoPriceOnShelfTag")
                        .HasColumnType("boolean");

                    b.Property<bool>("PosVisible")
                        .HasColumnType("boolean");

                    b.Property<bool>("PrintShelfTag")
                        .HasColumnType("boolean");

                    b.Property<int>("ProductType")
                        .HasColumnType("integer");

                    b.Property<bool>("PromptPriceAtPOS")
                        .HasColumnType("boolean");

                    b.Property<bool>("ScaleVisible")
                        .HasColumnType("boolean");

                    b.Property<bool>("SnapEBT")
                        .HasColumnType("boolean");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Tare1")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("UPC")
                        .IsRequired()
                        .HasColumnType("varchar(40)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DefaulShelfTagId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FamilyId");

                    b.HasIndex("Name");

                    b.HasIndex("UPC")
                        .IsUnique();

                    b.ToTable("Product");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.Profiles", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ApplicationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Profiles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ApplicationId = 1L,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Administrator",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 2L,
                            ApplicationId = 2L,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Manager",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        });
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.Province", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(40)");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Province");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CountryId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Florida",
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 2L,
                            CountryId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Texas",
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 3L,
                            CountryId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Alabama",
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 4L,
                            CountryId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Alaska",
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 5L,
                            CountryId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Arizona",
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 6L,
                            CountryId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Arkansas",
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 7L,
                            CountryId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "California",
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 8L,
                            CountryId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Colorado",
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 9L,
                            CountryId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Connecticut",
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 10L,
                            CountryId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Delaware",
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 11L,
                            CountryId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Georgia",
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 12L,
                            CountryId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Hawaii",
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 13L,
                            CountryId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Idaho",
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 14L,
                            CountryId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Illinois",
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 15L,
                            CountryId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Indiana",
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 16L,
                            CountryId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Iowa",
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 17L,
                            CountryId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Kansas",
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 18L,
                            CountryId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Kentucky",
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 19L,
                            CountryId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Louisiana",
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 20L,
                            CountryId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Maine",
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 21L,
                            CountryId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Maryland",
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 22L,
                            CountryId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Massachusetts",
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 23L,
                            CountryId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Michigan",
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 24L,
                            CountryId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Minnesota",
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 25L,
                            CountryId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Mississippi",
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 26L,
                            CountryId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Missouri",
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 27L,
                            CountryId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Montana",
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 28L,
                            CountryId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Nebraska",
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 29L,
                            CountryId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Nevada",
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 30L,
                            CountryId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "New Hampshire",
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 31L,
                            CountryId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "New Jersey",
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 32L,
                            CountryId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "New Mexico",
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 33L,
                            CountryId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "New York",
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 34L,
                            CountryId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "North Carolina",
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 35L,
                            CountryId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "North Dakota",
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 36L,
                            CountryId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Ohio",
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 37L,
                            CountryId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Oklahoma",
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 38L,
                            CountryId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Oregon",
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 39L,
                            CountryId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Pennsylvania",
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 40L,
                            CountryId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Rhode Island",
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 41L,
                            CountryId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "South Carolina",
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 42L,
                            CountryId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "South Dakota",
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 43L,
                            CountryId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Tennessee",
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 44L,
                            CountryId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Utah",
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 45L,
                            CountryId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Vermont",
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 46L,
                            CountryId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Virginia",
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 47L,
                            CountryId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Washington",
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 48L,
                            CountryId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "West Virginia",
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 49L,
                            CountryId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Wisconsin",
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 50L,
                            CountryId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Wyoming",
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        });
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.QtyHandTrack", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("NewQtyHand")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("OldQtyHand")
                        .HasColumnType("numeric(18,2)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("ScaleCategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("ScaleCategoryName")
                        .HasColumnType("text");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UPC")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("QtyHandTrack");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.Rancher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(60)");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Rancher");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Triple Greta",
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        });
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.Region", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Region");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Default",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        });
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.Report", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GuidId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("GuidId")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Report", (string)null);
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("AllStores")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.Property<long?>("RegionId")
                        .HasColumnType("bigint");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("RegionId");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AllStores = true,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Administrator",
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        });
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.RoundingTable", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("ChangeBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EndWith")
                        .HasColumnType("integer");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.ToTable("RoundingTable");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ChangeBy = 9,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            EndWith = 0,
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 2L,
                            ChangeBy = 9,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            EndWith = 1,
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 3L,
                            ChangeBy = 9,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            EndWith = 2,
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 4L,
                            ChangeBy = 9,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            EndWith = 3,
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 5L,
                            ChangeBy = 9,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            EndWith = 4,
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 6L,
                            ChangeBy = 9,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            EndWith = 5,
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 7L,
                            ChangeBy = 9,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            EndWith = 6,
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 8L,
                            ChangeBy = 9,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            EndWith = 7,
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 9L,
                            ChangeBy = 9,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            EndWith = 8,
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 10L,
                            ChangeBy = 9,
                            CreatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            EndWith = 9,
                            State = true,
                            UpdatedAt = new DateTime(2021, 3, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        });
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.Sale", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("CashDiscount")
                        .HasColumnType("numeric(18,3)");

                    b.Property<decimal>("ChangeDue")
                        .HasColumnType("numeric(18,3)");

                    b.Property<decimal>("ClearCashDiscountTotal")
                        .HasColumnType("numeric(18,3)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("CustomerDiscountAmount")
                        .HasColumnType("numeric(18,3)");

                    b.Property<int>("CustomerDiscountPointsUsed")
                        .HasColumnType("integer");

                    b.Property<long?>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<long>("DeviceId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Discount")
                        .HasColumnType("numeric(18,3)");

                    b.Property<DateTime>("DriveLicenseBirthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DriveLicenseDocumentDiscriminator")
                        .HasColumnType("text");

                    b.Property<DateTime>("DriveLicenseExpirationday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DriveLicenseFamilyName")
                        .HasColumnType("text");

                    b.Property<string>("DriveLicenseFirstName")
                        .HasColumnType("text");

                    b.Property<string>("DriveLicenseMiddleName")
                        .HasColumnType("text");

                    b.Property<string>("DriveLicenseRaw")
                        .HasColumnType("text");

                    b.Property<string>("DriverLicenseNumber")
                        .HasColumnType("text");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EndOfDayId")
                        .HasColumnType("bigint");

                    b.Property<string>("Invoice")
                        .HasColumnType("text");

                    b.Property<bool>("IsOver40")
                        .HasColumnType("boolean");

                    b.Property<long>("LocalId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("SaleTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("ServiceFee")
                        .HasColumnType("numeric(18,3)");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("numeric(18,3)");

                    b.Property<decimal>("Tax")
                        .HasColumnType("numeric(18,3)");

                    b.Property<decimal>("TenderCash")
                        .HasColumnType("numeric(18,3)");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric(18,3)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("UseSpecialTaxes")
                        .HasColumnType("boolean");

                    b.Property<string>("UserCreatorId")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EndOfDayId");

                    b.HasIndex("Invoice");

                    b.HasIndex("StoreId");

                    b.ToTable("Sale");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.SaleDiscount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18,3)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("SaleId")
                        .HasColumnType("bigint");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric(18,3)");

                    b.HasKey("Id");

                    b.HasIndex("SaleId");

                    b.ToTable("SaleDiscount");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.SaleFee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18,3)");

                    b.Property<bool>("ApplyAutomatically")
                        .HasColumnType("boolean");

                    b.Property<bool>("ApplyDiscount")
                        .HasColumnType("boolean");

                    b.Property<bool>("ApplyFoodStamp")
                        .HasColumnType("boolean");

                    b.Property<bool>("ApplyTax")
                        .HasColumnType("boolean");

                    b.Property<bool>("ApplyToItemQty")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IncludeInItemPrice")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("RestrictToItems")
                        .HasColumnType("boolean");

                    b.Property<long?>("SaleId")
                        .HasColumnType("bigint");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric(18,3)");

                    b.HasKey("Id");

                    b.HasIndex("SaleId");

                    b.ToTable("SaleFee");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.SaleProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("CleanTotalPrice")
                        .HasColumnType("numeric(18,3)");

                    b.Property<decimal>("Cost")
                        .HasColumnType("numeric(18,3)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("numeric");

                    b.Property<bool>("DiscountApplyAutomatically")
                        .HasColumnType("boolean");

                    b.Property<bool>("DiscountApplyToCustomerOnly")
                        .HasColumnType("boolean");

                    b.Property<bool>("DiscountApplyToProduct")
                        .HasColumnType("boolean");

                    b.Property<string>("DiscountName")
                        .HasColumnType("text");

                    b.Property<int>("DiscountType")
                        .HasColumnType("integer");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("numeric(18,3)");

                    b.Property<decimal>("GrossProfit")
                        .HasColumnType("numeric(18,3)");

                    b.Property<int>("LoyaltyPoints")
                        .HasColumnType("integer");

                    b.Property<decimal>("MixAndMatchGlobalDiscount")
                        .HasColumnType("numeric(18,3)");

                    b.Property<string>("MixAndMatchName")
                        .HasColumnType("text");

                    b.Property<int>("MixAndMatchType")
                        .HasColumnType("integer");

                    b.Property<decimal>("MixMatchDiscount")
                        .HasColumnType("numeric(18,3)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal?>("NetWeigth")
                        .HasColumnType("numeric(18,3)");

                    b.Property<int?>("PLUNumber")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(18,3)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("ProductType")
                        .HasColumnType("integer");

                    b.Property<decimal>("QTY")
                        .HasColumnType("numeric(18,3)");

                    b.Property<long>("SaleDiscountId")
                        .HasColumnType("bigint");

                    b.Property<long>("SaleId")
                        .HasColumnType("bigint");

                    b.Property<int>("SaleProductDiscountApplied")
                        .HasColumnType("integer");

                    b.Property<int>("SaleProductType")
                        .HasColumnType("integer");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<string>("Subtitle")
                        .HasColumnType("text");

                    b.Property<bool>("SubtitleVisible")
                        .HasColumnType("boolean");

                    b.Property<decimal>("TaxValue")
                        .HasColumnType("numeric(18,3)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric(18,3)");

                    b.Property<string>("UPC")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("SaleId");

                    b.ToTable("SaleProduct");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.SaleTax", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18,3)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("SaleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SaleProductId")
                        .HasColumnType("bigint");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("UseSpecialTax")
                        .HasColumnType("boolean");

                    b.Property<string>("UserCreatorId")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric(18,3)");

                    b.HasKey("Id");

                    b.HasIndex("SaleId");

                    b.HasIndex("SaleProductId");

                    b.ToTable("SaleTax");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.SaleTaxResume", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("EndOfDayId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<long>("TaxId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("EndOfDayId");

                    b.ToTable("SaleTaxResume");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.SaleTender", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18,3)");

                    b.Property<decimal>("ApprovedAmount")
                        .HasColumnType("numeric(18,3)");

                    b.Property<string>("AuthCode")
                        .HasColumnType("text");

                    b.Property<string>("BogusAccountNum")
                        .HasColumnType("text");

                    b.Property<string>("CardHolderName")
                        .HasColumnType("text");

                    b.Property<string>("CardType")
                        .HasColumnType("text");

                    b.Property<decimal>("CashBack")
                        .HasColumnType("numeric(18,3)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("ExtraBalance")
                        .HasColumnType("numeric(18,3)");

                    b.Property<string>("IssuerName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Pan")
                        .HasColumnType("text");

                    b.Property<string>("RawResponse")
                        .HasColumnType("text");

                    b.Property<string>("RefNum")
                        .HasColumnType("text");

                    b.Property<decimal>("RemainingBalance")
                        .HasColumnType("numeric(18,3)");

                    b.Property<decimal>("RequestedAmount")
                        .HasColumnType("numeric(18,3)");

                    b.Property<string>("ResultCode")
                        .HasColumnType("text");

                    b.Property<string>("ResultTxt")
                        .HasColumnType("text");

                    b.Property<long>("SaleId")
                        .HasColumnType("bigint");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("SaleId");

                    b.ToTable("SaleTender");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.ScaleCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BackgroundColor")
                        .HasColumnType("text");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("ForegroundColor")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId")
                        .IsUnique();

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentId");

                    b.ToTable("ScaleCategory");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.ScaleHomeFav", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("StoreId", "DepartmentId")
                        .IsUnique();

                    b.ToTable("ScaleHomeFav");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.ScaleLabelDefinition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("ScaleBrandId")
                        .HasColumnType("bigint");

                    b.Property<long>("ScaleLabelType1Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("ScaleLabelType2Id")
                        .HasColumnType("bigint");

                    b.Property<long>("ScaleProductId")
                        .HasColumnType("bigint");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("ScaleLabelType1Id");

                    b.HasIndex("ScaleLabelType2Id");

                    b.HasIndex("ScaleProductId");

                    b.ToTable("ScaleLabelDefinition");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.ScaleLabelType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Design")
                        .HasColumnType("text");

                    b.Property<int>("LabelId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.Property<int>("ScaleType")
                        .HasColumnType("integer");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ScaleLabelType");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.ScaleReasonCodes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ScaleReasonCodes");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.Scalendar", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Day")
                        .HasColumnType("text");

                    b.Property<int>("DayId")
                        .HasColumnType("integer");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Day")
                        .IsUnique();

                    b.HasIndex("DayId")
                        .IsUnique();

                    b.ToTable("Scalendar");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Day = "Monday",
                            DayId = 1,
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Day = "Tuesday",
                            DayId = 2,
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Day = "Wednesday",
                            DayId = 3,
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Day = "Thursday",
                            DayId = 4,
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Day = "Friday",
                            DayId = 5,
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 6L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Day = "Saturday",
                            DayId = 6,
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 7L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            Day = "Sunday",
                            DayId = 0,
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        });
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.ShelfTag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BinLocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("BinLocationName")
                        .HasColumnType("text");

                    b.Property<int>("CasePack")
                        .HasColumnType("integer");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("CategoryName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("DepartmentName")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("ProductCode")
                        .HasColumnType("text");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProductName")
                        .HasColumnType("text");

                    b.Property<int>("QTYToPrint")
                        .HasColumnType("integer");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<string>("StoreName")
                        .HasColumnType("text");

                    b.Property<string>("UPC")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<long>("VendorId")
                        .HasColumnType("bigint");

                    b.Property<string>("VendorName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ShelfTag");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.Store", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("AcceptChecksExactAmount")
                        .HasColumnType("boolean");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<bool>("AutoCloseAllCachiers")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("AutoEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("AutoLogOffCachiers")
                        .HasColumnType("integer");

                    b.Property<bool>("CashDiscount")
                        .HasColumnType("boolean");

                    b.Property<decimal>("CashDiscountValue")
                        .HasColumnType("numeric(18,2)");

                    b.Property<bool>("ClientTransparency")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ClosedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("CreditCardCalculation")
                        .HasColumnType("numeric(18,2)");

                    b.Property<bool>("CreditCardNeedSignature")
                        .HasColumnType("boolean");

                    b.Property<decimal>("CreditCardNeedSignatureAmount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<bool>("DebitCardCashBack")
                        .HasColumnType("boolean");

                    b.Property<decimal>("DebitCardCashBackMaxAmount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("DefaulBottleDeposit")
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("DisplayChangeDueAfterTender")
                        .HasColumnType("boolean");

                    b.Property<bool>("DisplayLaneClosed")
                        .HasColumnType("boolean");

                    b.Property<int>("DrawerTraking")
                        .HasColumnType("integer");

                    b.Property<int>("GiftCardType")
                        .HasColumnType("integer");

                    b.Property<string>("GlobalTraceNumberGtn")
                        .HasColumnType("text");

                    b.Property<Guid>("GuidId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .HasColumnType("text");

                    b.Property<string>("LastBackupPath")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastBackupTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LastBackupVersion")
                        .HasColumnType("integer");

                    b.Property<bool>("MinimumAgeRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.Property<DateTime>("OpenTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<bool>("PrintReceiptOptional")
                        .HasColumnType("boolean");

                    b.Property<long>("RegionId")
                        .HasColumnType("bigint");

                    b.Property<string>("RemotePrinters")
                        .HasColumnType("text");

                    b.Property<long?>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<string>("Slogan")
                        .HasColumnType("text");

                    b.Property<bool>("SnapEBTCAshCashBack")
                        .HasColumnType("boolean");

                    b.Property<decimal>("SnapEBTCAshCashBackMaxAmount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<int>("SynchroVersion")
                        .HasColumnType("integer");

                    b.Property<int>("Theme")
                        .HasColumnType("integer");

                    b.Property<string>("TimeZoneId")
                        .HasColumnType("text");

                    b.Property<bool>("Updated")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UsdaEstablishNumber")
                        .HasColumnType("text");

                    b.Property<bool>("UseBottleRefund")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseCustomer")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseDiscount")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseEBTCheckBalance")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseExchange")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseGiftCards")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseNoSale")
                        .HasColumnType("boolean");

                    b.Property<bool>("UsePaidOut")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseRemoveserviceFee")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseReprintReceipt")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseReturn")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseTaxOverride")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseZeroScale")
                        .HasColumnType("boolean");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Zip")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GuidId")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("RegionId");

                    b.HasIndex("RoleId");

                    b.ToTable("Store");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.StoreProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal?>("BatchOldPrice")
                        .HasColumnType("numeric");

                    b.Property<long?>("BinLocationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ChildId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Cost")
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("GrossProfit")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("GrossProfit2")
                        .HasColumnType("numeric(18,2)");

                    b.Property<bool>("NoCategoryChange")
                        .HasColumnType("boolean");

                    b.Property<decimal>("OrderAmount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("OrderTrigger")
                        .HasColumnType("numeric(18,2)");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("Price2")
                        .HasColumnType("numeric(18,2)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("QtyHand")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("SplitCount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("TargetGrossProfit")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("TargetOldPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<decimal>("WebGrossProfit")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("WebPrice")
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BinLocationId");

                    b.HasIndex("ParentId")
                        .IsUnique();

                    b.HasIndex("StoreId");

                    b.HasIndex("ProductId", "StoreId")
                        .IsUnique();

                    b.ToTable("StoreProduct");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.Synchro", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FilePath")
                        .HasColumnType("text");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<long>("Tag")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("Synchro");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.SynchroDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Data")
                        .HasColumnType("text");

                    b.Property<string>("Entity")
                        .HasColumnType("text");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<long>("SynchroId")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("SynchroId");

                    b.ToTable("SynchroDetail");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.Tax", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(254)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.Property<double?>("SpecialValue")
                        .HasColumnType("double precision");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tax");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.TenderType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("CashDiscount")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayAs")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.Property<bool>("OpenDrawer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("PaymentGateway")
                        .HasColumnType("boolean");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TenderType");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CashDiscount = true,
                            CreatedAt = new DateTime(2022, 12, 31, 5, 0, 0, 0, DateTimeKind.Utc),
                            DisplayAs = "Cash",
                            Name = "Cash",
                            OpenDrawer = true,
                            PaymentGateway = false,
                            State = true,
                            UpdatedAt = new DateTime(2022, 12, 31, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 2L,
                            CashDiscount = false,
                            CreatedAt = new DateTime(2022, 12, 31, 5, 0, 0, 0, DateTimeKind.Utc),
                            DisplayAs = "Check",
                            Name = "Check",
                            OpenDrawer = false,
                            PaymentGateway = false,
                            State = true,
                            UpdatedAt = new DateTime(2022, 12, 31, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 3L,
                            CashDiscount = false,
                            CreatedAt = new DateTime(2022, 12, 31, 5, 0, 0, 0, DateTimeKind.Utc),
                            DisplayAs = "Credit Card",
                            Name = "Credit Card",
                            OpenDrawer = false,
                            PaymentGateway = true,
                            State = false,
                            UpdatedAt = new DateTime(2022, 12, 31, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 4L,
                            CashDiscount = false,
                            CreatedAt = new DateTime(2022, 12, 31, 5, 0, 0, 0, DateTimeKind.Utc),
                            DisplayAs = "Debit Card",
                            Name = "Debit Card",
                            OpenDrawer = false,
                            PaymentGateway = true,
                            State = false,
                            UpdatedAt = new DateTime(2022, 12, 31, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 5L,
                            CashDiscount = true,
                            CreatedAt = new DateTime(2022, 12, 31, 5, 0, 0, 0, DateTimeKind.Utc),
                            DisplayAs = "Snap/EBT",
                            Name = "Snap/EBT",
                            OpenDrawer = false,
                            PaymentGateway = true,
                            State = false,
                            UpdatedAt = new DateTime(2022, 12, 31, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 6L,
                            CashDiscount = true,
                            CreatedAt = new DateTime(2022, 12, 31, 5, 0, 0, 0, DateTimeKind.Utc),
                            DisplayAs = "Snap/EBT Cash",
                            Name = "Snap/EBT Cash",
                            OpenDrawer = false,
                            PaymentGateway = true,
                            State = false,
                            UpdatedAt = new DateTime(2022, 12, 31, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 7L,
                            CashDiscount = false,
                            CreatedAt = new DateTime(2022, 12, 31, 5, 0, 0, 0, DateTimeKind.Utc),
                            DisplayAs = "Gift Card",
                            Name = "Gift Card",
                            OpenDrawer = false,
                            PaymentGateway = true,
                            State = false,
                            UpdatedAt = new DateTime(2022, 12, 31, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        },
                        new
                        {
                            Id = 8L,
                            CashDiscount = false,
                            CreatedAt = new DateTime(2022, 12, 31, 5, 0, 0, 0, DateTimeKind.Utc),
                            DisplayAs = "Cards",
                            Name = "Cards",
                            OpenDrawer = false,
                            PaymentGateway = true,
                            State = true,
                            UpdatedAt = new DateTime(2022, 12, 31, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        });
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.Ticket", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("GuidId")
                        .HasColumnType("uuid");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("GuidId")
                        .IsUnique();

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.TimeKeeping", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("Begin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("BeginDeviceId")
                        .HasColumnType("bigint");

                    b.Property<string>("BeginFormatDate")
                        .HasColumnType("text");

                    b.Property<long?>("BeginStoreId")
                        .HasColumnType("bigint");

                    b.Property<string>("BeginStoreName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<string>("EmployeeName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("EndDeviceId")
                        .HasColumnType("bigint");

                    b.Property<string>("EndFormatDate")
                        .HasColumnType("text");

                    b.Property<long?>("EndStoreId")
                        .HasColumnType("bigint");

                    b.Property<string>("EndStoreName")
                        .HasColumnType("text");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<double>("TimeWorked")
                        .HasColumnType("double precision");

                    b.Property<string>("TimeWorkedFormat")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("UserForceBegin")
                        .HasColumnType("text");

                    b.Property<long?>("UserForceBeginId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserForceEnd")
                        .HasColumnType("text");

                    b.Property<long?>("UserForceEndId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("TimeKeeping");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.Vendor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AccountNumber")
                        .HasColumnType("text");

                    b.Property<string>("Address1")
                        .HasColumnType("text");

                    b.Property<string>("Address2")
                        .HasColumnType("text");

                    b.Property<string>("CityName")
                        .HasColumnType("varchar(30)");

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<string>("CountryName")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MinimalOrder")
                        .HasColumnType("numeric(15,3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Note")
                        .HasColumnType("varchar(254)");

                    b.Property<long>("ProvinceId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProvinceName")
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Zip")
                        .HasColumnType("varchar(12)");

                    b.HasKey("Id");

                    b.ToTable("Vendor");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CountryId = 0L,
                            CreatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            MinimalOrder = 200.0,
                            Name = "Vendor 0",
                            Note = "Note",
                            ProvinceId = 0L,
                            State = true,
                            UpdatedAt = new DateTime(1, 1, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            UserCreatorId = "a54f8cb3-1d5f-424c-aaa2-11e39c14f7f6"
                        });
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.VendorContact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(60)");

                    b.Property<string>("Fax")
                        .HasColumnType("varchar(60)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("varchar(14)");

                    b.Property<bool>("Primary")
                        .HasColumnType("boolean");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<long>("VendorId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("VendorId");

                    b.ToTable("VendorContact");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.VendorOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AttachmentFilePath")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("DeliveryCharge")
                        .HasColumnType("numeric");

                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("text");

                    b.Property<bool>("IsDirectStoreDelivery")
                        .HasColumnType("boolean");

                    b.Property<string>("LastEmailId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("OrderedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ReceivedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SendCount")
                        .HasColumnType("integer");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("VendorId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorId");

                    b.ToTable("VendorOrder");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.VendorOrderDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("CaseCost")
                        .HasColumnType("numeric");

                    b.Property<int>("CasePack")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("OrderAmount")
                        .HasColumnType("numeric(15,2)");

                    b.Property<string>("ProductCode")
                        .HasColumnType("text");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("QuantityOnHand")
                        .HasColumnType("numeric(15,2)");

                    b.Property<decimal>("RecivedAmount")
                        .HasColumnType("numeric");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<string>("UPC")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<long>("VendorOrderId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("VendorOrderId");

                    b.ToTable("VendorOrderDetail");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.VendorOrderDetailCredit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("CaseCost")
                        .HasColumnType("numeric");

                    b.Property<int>("CasePack")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("CreditAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("CreditCost")
                        .HasColumnType("numeric(15,2)");

                    b.Property<decimal>("CreditQuantity")
                        .HasColumnType("numeric(15,2)");

                    b.Property<int>("CreditReason")
                        .HasColumnType("integer");

                    b.Property<bool>("IsUnit")
                        .HasColumnType("boolean");

                    b.Property<string>("ProductCode")
                        .HasColumnType("text");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProductName")
                        .HasColumnType("text");

                    b.Property<string>("ProductUpc")
                        .HasColumnType("text");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<long>("VendorId")
                        .HasColumnType("bigint");

                    b.Property<string>("VendorName")
                        .HasColumnType("text");

                    b.Property<long>("VendorOrderDetailId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("VendorId");

                    b.HasIndex("VendorOrderDetailId");

                    b.ToTable("VendorOrderDetailCredit");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.VendorProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("CaseCost")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("CasePack")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsPrimary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastOrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OrderByCase")
                        .HasColumnType("integer");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatorId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<long>("VendorId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("VendorId");

                    b.ToTable("VendorProduct");
                });

            modelBuilder.Entity("MixAndMatchProduct", b =>
                {
                    b.Property<long>("MixAndMatchsId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductsId")
                        .HasColumnType("bigint");

                    b.HasKey("MixAndMatchsId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("MixAndMatchProduct");
                });

            modelBuilder.Entity("PermissionProfiles", b =>
                {
                    b.Property<long>("PermissionsId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProfilesId")
                        .HasColumnType("bigint");

                    b.HasKey("PermissionsId", "ProfilesId");

                    b.HasIndex("ProfilesId");

                    b.ToTable("PermissionProfiles");
                });

            modelBuilder.Entity("ScaleHomeFavScaleProduct", b =>
                {
                    b.Property<long>("ScaleHomeFavsId")
                        .HasColumnType("bigint");

                    b.Property<long>("ScaleProductsId")
                        .HasColumnType("bigint");

                    b.HasKey("ScaleHomeFavsId", "ScaleProductsId");

                    b.HasIndex("ScaleProductsId");

                    b.ToTable("ScaleHomeFavScaleProduct");
                });

            modelBuilder.Entity("StoreProductTax", b =>
                {
                    b.Property<long>("StoreProductsId")
                        .HasColumnType("bigint");

                    b.Property<long>("TaxsId")
                        .HasColumnType("bigint");

                    b.HasKey("StoreProductsId", "TaxsId");

                    b.HasIndex("TaxsId");

                    b.ToTable("StoreProductTax");
                });

            modelBuilder.Entity("StoreTax", b =>
                {
                    b.Property<long>("StoresId")
                        .HasColumnType("bigint");

                    b.Property<long>("TaxsId")
                        .HasColumnType("bigint");

                    b.HasKey("StoresId", "TaxsId");

                    b.HasIndex("TaxsId");

                    b.ToTable("StoreTax");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.AdBatch", b =>
                {
                    b.HasBaseType("Greta.BO.Api.Entities.Batch");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.PriceBatch", b =>
                {
                    b.HasBaseType("Greta.BO.Api.Entities.Batch");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.KitProduct", b =>
                {
                    b.HasBaseType("Greta.BO.Api.Entities.Product");

                    b.ToTable("KitProduct");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.ScaleProduct", b =>
                {
                    b.HasBaseType("Greta.BO.Api.Entities.Product");

                    b.Property<double>("AddedSugar")
                        .HasColumnType("numeric(18,2)");

                    b.Property<double>("AddedSugarGrams")
                        .HasColumnType("numeric(18,2)");

                    b.Property<double>("AmountPerServingCalories")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("ByCount")
                        .HasColumnType("integer");

                    b.Property<double>("Calcium")
                        .HasColumnType("numeric(18,2)");

                    b.Property<double>("CalciumMGrams")
                        .HasColumnType("numeric(18,2)");

                    b.Property<double>("Cholesterol")
                        .HasColumnType("numeric(18,2)");

                    b.Property<double>("CholesterolMGrams")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Description1")
                        .IsRequired()
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Description2")
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Description3")
                        .HasColumnType("varchar(300)");

                    b.Property<double>("DietaryFiber")
                        .HasColumnType("numeric(18,2)");

                    b.Property<double>("DietaryFiberGrams")
                        .HasColumnType("numeric(18,2)");

                    b.Property<bool>("ForceTare")
                        .HasColumnType("boolean");

                    b.Property<double>("Iron")
                        .HasColumnType("double precision");

                    b.Property<double>("IronMGrams")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("PLUNumber")
                        .HasColumnType("integer");

                    b.Property<int>("PLUType")
                        .HasColumnType("integer");

                    b.Property<decimal>("PackageWeight")
                        .HasColumnType("numeric(18,2)");

                    b.Property<double>("Potas")
                        .HasColumnType("numeric(18,2)");

                    b.Property<double>("PotasMGrams")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("ProductLife")
                        .HasColumnType("integer");

                    b.Property<double>("ProteinGrams")
                        .HasColumnType("numeric(18,2)");

                    b.Property<double>("SaturedFat")
                        .HasColumnType("numeric(18,2)");

                    b.Property<double>("SaturedFatGrams")
                        .HasColumnType("numeric(18,2)");

                    b.Property<long>("ScaleCategoryId")
                        .HasColumnType("bigint");

                    b.Property<double>("ServingPerContainer")
                        .HasColumnType("numeric(18,2)");

                    b.Property<double>("ServingSize")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("ShelfLife")
                        .HasColumnType("integer");

                    b.Property<double>("Sodium")
                        .HasColumnType("numeric(18,2)");

                    b.Property<double>("SodiumMGrams")
                        .HasColumnType("numeric(18,2)");

                    b.Property<double>("Tare2")
                        .HasColumnType("numeric(18,2)");

                    b.Property<bool>("TareIsPercent")
                        .HasColumnType("boolean");

                    b.Property<string>("Text1")
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Text2")
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Text3")
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Text4")
                        .HasColumnType("varchar(2000)");

                    b.Property<double>("TotalCarbohydrate")
                        .HasColumnType("numeric(18,2)");

                    b.Property<double>("TotalCarbohydrateGrams")
                        .HasColumnType("numeric(18,2)");

                    b.Property<double>("TotalFat")
                        .HasColumnType("numeric(18,2)");

                    b.Property<double>("TotalFatGrams")
                        .HasColumnType("numeric(18,2)");

                    b.Property<double>("TotalSugarGrams")
                        .HasColumnType("numeric(18,2)");

                    b.Property<double>("VitD")
                        .HasColumnType("numeric(18,2)");

                    b.Property<double>("VitDMGrams")
                        .HasColumnType("numeric(18,2)");

                    b.HasIndex("PLUNumber")
                        .IsUnique();

                    b.HasIndex("ScaleCategoryId");

                    b.ToTable("ScaleProduct");
                });

            modelBuilder.Entity("AnimalCustomer", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.Animal", null)
                        .WithMany()
                        .HasForeignKey("AnimalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Greta.BO.Api.Entities.Customer", null)
                        .WithMany()
                        .HasForeignKey("CustomersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BOUserStore", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.BOUser", null)
                        .WithMany()
                        .HasForeignKey("EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Greta.BO.Api.Entities.Store", null)
                        .WithMany()
                        .HasForeignKey("StoresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BatchStore", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.Batch", null)
                        .WithMany()
                        .HasForeignKey("BatchsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Greta.BO.Api.Entities.Store", null)
                        .WithMany()
                        .HasForeignKey("StoresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BreedScalendar", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.Breed", null)
                        .WithMany()
                        .HasForeignKey("BreedsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Greta.BO.Api.Entities.Scalendar", null)
                        .WithMany()
                        .HasForeignKey("ScalendarsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CategoryFee", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Greta.BO.Api.Entities.Fee", null)
                        .WithMany()
                        .HasForeignKey("FeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CategoryTax", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Greta.BO.Api.Entities.Tax", null)
                        .WithMany()
                        .HasForeignKey("TaxsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CustomerDiscount", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.Customer", null)
                        .WithMany()
                        .HasForeignKey("CustomersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Greta.BO.Api.Entities.Discount", null)
                        .WithMany()
                        .HasForeignKey("DiscountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CustomerMixAndMatch", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.Customer", null)
                        .WithMany()
                        .HasForeignKey("CustomersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Greta.BO.Api.Entities.MixAndMatch", null)
                        .WithMany()
                        .HasForeignKey("MixAndMatchesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CutListTemplateScaleProduct", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.CutListTemplate", null)
                        .WithMany()
                        .HasForeignKey("CutListTemplatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Greta.BO.Api.Entities.ScaleProduct", null)
                        .WithMany()
                        .HasForeignKey("ScaleProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DepartmentExternalScale", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.Department", null)
                        .WithMany()
                        .HasForeignKey("DepartmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Greta.BO.Api.Entities.ExternalScale", null)
                        .WithMany()
                        .HasForeignKey("ExternalScalesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DepartmentOnlineStore", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.Department", null)
                        .WithMany()
                        .HasForeignKey("DepartmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Greta.BO.Api.Entities.OnlineStore", null)
                        .WithMany()
                        .HasForeignKey("OnlineStoresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiscountProduct", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.Discount", null)
                        .WithMany()
                        .HasForeignKey("DiscountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Greta.BO.Api.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FamilyFee", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.Family", null)
                        .WithMany()
                        .HasForeignKey("FamiliesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Greta.BO.Api.Entities.Fee", null)
                        .WithMany()
                        .HasForeignKey("FeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FamilyMixAndMatch", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.Family", null)
                        .WithMany()
                        .HasForeignKey("FamiliesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Greta.BO.Api.Entities.MixAndMatch", null)
                        .WithMany()
                        .HasForeignKey("MixAndMatchsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FeeProduct", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.Fee", null)
                        .WithMany()
                        .HasForeignKey("FeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Greta.BO.Api.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.Animal", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.Breed", "Breed")
                        .WithMany("Animals")
                        .HasForeignKey("BreedId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Greta.BO.Api.Entities.Rancher", "Rancher")
                        .WithMany("Animals")
                        .HasForeignKey("RancherId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Greta.BO.Api.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Breed");

                    b.Navigation("Rancher");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.BOUser", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.Profiles", "BOProfile")
                        .WithMany()
                        .HasForeignKey("BOProfileId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Greta.BO.Api.Entities.Profiles", "POSProfile")
                        .WithMany()
                        .HasForeignKey("POSProfileId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Greta.BO.Api.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("BOProfile");

                    b.Navigation("POSProfile");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.BatchClose", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.Device", "Device")
                        .WithMany("BatchClose")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.Category", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.ScaleLabelType", "DefaulShelfTag")
                        .WithMany()
                        .HasForeignKey("DefaulShelfTagId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Greta.BO.Api.Entities.Department", "Department")
                        .WithMany("Categories")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DefaulShelfTag");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.CutList", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.Animal", "Animal")
                        .WithMany()
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Greta.BO.Api.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Greta.BO.Api.Entities.CutListTemplate", "CutListTemplate")
                        .WithMany()
                        .HasForeignKey("CutListTemplateId");

                    b.Navigation("Animal");

                    b.Navigation("Customer");

                    b.Navigation("CutListTemplate");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.CutListDetail", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.CutList", "CutList")
                        .WithMany("CutListDetails")
                        .HasForeignKey("CutListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Greta.BO.Api.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CutList");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.Device", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.Store", "Store")
                        .WithMany("Devices")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.Discount", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.Category", "Category")
                        .WithMany("Discounts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Greta.BO.Api.Entities.Department", "Department")
                        .WithMany("Discounts")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Greta.BO.Api.Entities.Family", null)
                        .WithMany("Discounts")
                        .HasForeignKey("FamilyId");

                    b.Navigation("Category");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.ExternalScale", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.Store", "Store")
                        .WithMany("ExternalScales")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Greta.BO.Api.Entities.Device", "SyncDevice")
                        .WithMany("ExternalScales")
                        .HasForeignKey("SyncDeviceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Store");

                    b.Navigation("SyncDevice");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.FunctionGroup", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.ClientApplication", "ClientApplication")
                        .WithMany("FunctionGroups")
                        .HasForeignKey("ClientApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Greta.BO.Api.Entities.Profiles", null)
                        .WithMany("FunctionGroups")
                        .HasForeignKey("ProfilesId");

                    b.Navigation("ClientApplication");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.GiftCard", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.Device", "Device")
                        .WithMany("GiftCards")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Greta.BO.Api.Entities.Store", "Store")
                        .WithMany("GiftCards")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.GiftCardTransaction", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.GiftCard", "GiftCard")
                        .WithMany("Transactions")
                        .HasForeignKey("GiftCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GiftCard");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.KitProductProduct", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.KitProduct", "KitProduct")
                        .WithMany()
                        .HasForeignKey("KitProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Greta.BO.Api.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("KitProduct");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.LoyaltyDiscount", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.Store", "Store")
                        .WithOne("LoyaltyDiscount")
                        .HasForeignKey("Greta.BO.Api.Entities.LoyaltyDiscount", "StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.MixAndMatch", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.Product", "ProductBuy")
                        .WithMany("BuyMixAndMatchs")
                        .HasForeignKey("ProductBuyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ProductBuy");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.OnlineCategory", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.Category", "Category")
                        .WithMany("OnlineCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Greta.BO.Api.Entities.OnlineStore", "OnlineStore")
                        .WithMany("OnlineCategories")
                        .HasForeignKey("OnlineStoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("OnlineStore");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.OnlineProduct", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.OnlineStore", "OnlineStore")
                        .WithMany("OnlineProducts")
                        .HasForeignKey("OnlineStoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Greta.BO.Api.Entities.StoreProduct", "Product")
                        .WithMany("OnlineProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OnlineStore");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.OnlineStore", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.Store", "Store")
                        .WithMany("OnlineStores")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.Permission", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.FunctionGroup", "FunctionGroup")
                        .WithMany("Permissions")
                        .HasForeignKey("FunctionGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FunctionGroup");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.PriceBatchDetail", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.Category", "Category")
                        .WithMany("PriceBatchDetails")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Greta.BO.Api.Entities.Family", "Family")
                        .WithMany("PriceBatchDetails")
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Greta.BO.Api.Entities.Batch", "Header")
                        .WithMany("PriceBatchDetails")
                        .HasForeignKey("HeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Greta.BO.Api.Entities.Product", "Product")
                        .WithMany("PriceBatchDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Category");

                    b.Navigation("Family");

                    b.Navigation("Header");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.Product", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Greta.BO.Api.Entities.ScaleLabelType", "DefaulShelfTag")
                        .WithMany()
                        .HasForeignKey("DefaulShelfTagId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Greta.BO.Api.Entities.Department", "Department")
                        .WithMany("Products")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Greta.BO.Api.Entities.Family", "Family")
                        .WithMany("Products")
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Category");

                    b.Navigation("DefaulShelfTag");

                    b.Navigation("Department");

                    b.Navigation("Family");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.Profiles", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.ClientApplication", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.Province", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.Role", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.Sale", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.Device", "Device")
                        .WithMany("Sales")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Greta.BO.Api.Entities.BOUser", "Employee")
                        .WithMany("Sales")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Greta.BO.Api.Entities.EndOfDay", "EndOfDay")
                        .WithMany("Sales")
                        .HasForeignKey("EndOfDayId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Greta.BO.Api.Entities.Store", "Store")
                        .WithMany("Sales")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("Employee");

                    b.Navigation("EndOfDay");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.SaleDiscount", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.Sale", "Sale")
                        .WithMany("Discounts")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.SaleFee", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.Sale", "Sale")
                        .WithMany("Fees")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.SaleProduct", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.Sale", "Sale")
                        .WithMany("Products")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.SaleTax", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.Sale", "Sale")
                        .WithMany("Taxs")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Greta.BO.Api.Entities.SaleProduct", "SaleProduct")
                        .WithMany()
                        .HasForeignKey("SaleProductId");

                    b.Navigation("Sale");

                    b.Navigation("SaleProduct");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.SaleTaxResume", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.EndOfDay", "EndOfDay")
                        .WithMany("Taxes")
                        .HasForeignKey("EndOfDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EndOfDay");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.SaleTender", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.Sale", "Sale")
                        .WithMany("Tenders")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.ScaleCategory", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Greta.BO.Api.Entities.ScaleCategory", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Department");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.ScaleHomeFav", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Greta.BO.Api.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.ScaleLabelDefinition", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.ScaleLabelType", "ScaleLabelType1")
                        .WithMany()
                        .HasForeignKey("ScaleLabelType1Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Greta.BO.Api.Entities.ScaleLabelType", "ScaleLabelType2")
                        .WithMany()
                        .HasForeignKey("ScaleLabelType2Id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Greta.BO.Api.Entities.ScaleProduct", "ScaleProduct")
                        .WithMany("ScaleLabelDefinitions")
                        .HasForeignKey("ScaleProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScaleLabelType1");

                    b.Navigation("ScaleLabelType2");

                    b.Navigation("ScaleProduct");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.Store", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Greta.BO.Api.Entities.Role", null)
                        .WithMany("Stores")
                        .HasForeignKey("RoleId");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.StoreProduct", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.BinLocation", "BinLocation")
                        .WithMany("StoreProducts")
                        .HasForeignKey("BinLocationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Greta.BO.Api.Entities.StoreProduct", "Parent")
                        .WithOne("Child")
                        .HasForeignKey("Greta.BO.Api.Entities.StoreProduct", "ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Greta.BO.Api.Entities.Product", "Product")
                        .WithMany("StoreProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Greta.BO.Api.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BinLocation");

                    b.Navigation("Parent");

                    b.Navigation("Product");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.Synchro", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.Store", null)
                        .WithMany("Synchros")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.SynchroDetail", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.Synchro", null)
                        .WithMany("SynchroDetails")
                        .HasForeignKey("SynchroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.VendorContact", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.Vendor", "Vendor")
                        .WithMany("VendorContacts")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.VendorOrder", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.Store", "Store")
                        .WithMany("VendorOrders")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Greta.BO.Api.Entities.BOUser", "User")
                        .WithMany("VendorOrders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Greta.BO.Api.Entities.Vendor", "Vendor")
                        .WithMany("VendorOrders")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");

                    b.Navigation("User");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.VendorOrderDetail", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.Product", "Product")
                        .WithMany("VendorOrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Greta.BO.Api.Entities.VendorOrder", "VendorOrder")
                        .WithMany("VendorOrderDetails")
                        .HasForeignKey("VendorOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("VendorOrder");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.VendorOrderDetailCredit", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Greta.BO.Api.Entities.Vendor", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Greta.BO.Api.Entities.VendorOrderDetail", "VendorOrderDetail")
                        .WithMany("VendorOrderDetailCredits")
                        .HasForeignKey("VendorOrderDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Vendor");

                    b.Navigation("VendorOrderDetail");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.VendorProduct", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.Product", "Product")
                        .WithMany("VendorProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Greta.BO.Api.Entities.Vendor", "Vendor")
                        .WithMany("VendorProducts")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("MixAndMatchProduct", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.MixAndMatch", null)
                        .WithMany()
                        .HasForeignKey("MixAndMatchsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Greta.BO.Api.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PermissionProfiles", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Greta.BO.Api.Entities.Profiles", null)
                        .WithMany()
                        .HasForeignKey("ProfilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ScaleHomeFavScaleProduct", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.ScaleHomeFav", null)
                        .WithMany()
                        .HasForeignKey("ScaleHomeFavsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Greta.BO.Api.Entities.ScaleProduct", null)
                        .WithMany()
                        .HasForeignKey("ScaleProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StoreProductTax", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.StoreProduct", null)
                        .WithMany()
                        .HasForeignKey("StoreProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Greta.BO.Api.Entities.Tax", null)
                        .WithMany()
                        .HasForeignKey("TaxsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StoreTax", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.Store", null)
                        .WithMany()
                        .HasForeignKey("StoresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Greta.BO.Api.Entities.Tax", null)
                        .WithMany()
                        .HasForeignKey("TaxsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.KitProduct", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.Product", null)
                        .WithOne()
                        .HasForeignKey("Greta.BO.Api.Entities.KitProduct", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.ScaleProduct", b =>
                {
                    b.HasOne("Greta.BO.Api.Entities.Product", null)
                        .WithOne()
                        .HasForeignKey("Greta.BO.Api.Entities.ScaleProduct", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Greta.BO.Api.Entities.ScaleCategory", "ScaleCategory")
                        .WithMany()
                        .HasForeignKey("ScaleCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScaleCategory");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.BOUser", b =>
                {
                    b.Navigation("Sales");

                    b.Navigation("VendorOrders");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.Batch", b =>
                {
                    b.Navigation("PriceBatchDetails");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.BinLocation", b =>
                {
                    b.Navigation("StoreProducts");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.Breed", b =>
                {
                    b.Navigation("Animals");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.Category", b =>
                {
                    b.Navigation("Discounts");

                    b.Navigation("OnlineCategories");

                    b.Navigation("PriceBatchDetails");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.ClientApplication", b =>
                {
                    b.Navigation("FunctionGroups");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.CutList", b =>
                {
                    b.Navigation("CutListDetails");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.Department", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Discounts");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.Device", b =>
                {
                    b.Navigation("BatchClose");

                    b.Navigation("ExternalScales");

                    b.Navigation("GiftCards");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.EndOfDay", b =>
                {
                    b.Navigation("Sales");

                    b.Navigation("Taxes");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.Family", b =>
                {
                    b.Navigation("Discounts");

                    b.Navigation("PriceBatchDetails");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.FunctionGroup", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.GiftCard", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.OnlineStore", b =>
                {
                    b.Navigation("OnlineCategories");

                    b.Navigation("OnlineProducts");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.Product", b =>
                {
                    b.Navigation("BuyMixAndMatchs");

                    b.Navigation("PriceBatchDetails");

                    b.Navigation("StoreProducts");

                    b.Navigation("VendorOrderDetails");

                    b.Navigation("VendorProducts");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.Profiles", b =>
                {
                    b.Navigation("FunctionGroups");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.Rancher", b =>
                {
                    b.Navigation("Animals");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.Role", b =>
                {
                    b.Navigation("Stores");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.Sale", b =>
                {
                    b.Navigation("Discounts");

                    b.Navigation("Fees");

                    b.Navigation("Products");

                    b.Navigation("Taxs");

                    b.Navigation("Tenders");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.ScaleCategory", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.Store", b =>
                {
                    b.Navigation("Devices");

                    b.Navigation("ExternalScales");

                    b.Navigation("GiftCards");

                    b.Navigation("LoyaltyDiscount");

                    b.Navigation("OnlineStores");

                    b.Navigation("Sales");

                    b.Navigation("Synchros");

                    b.Navigation("VendorOrders");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.StoreProduct", b =>
                {
                    b.Navigation("Child");

                    b.Navigation("OnlineProducts");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.Synchro", b =>
                {
                    b.Navigation("SynchroDetails");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.Vendor", b =>
                {
                    b.Navigation("VendorContacts");

                    b.Navigation("VendorOrders");

                    b.Navigation("VendorProducts");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.VendorOrder", b =>
                {
                    b.Navigation("VendorOrderDetails");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.VendorOrderDetail", b =>
                {
                    b.Navigation("VendorOrderDetailCredits");
                });

            modelBuilder.Entity("Greta.BO.Api.Entities.ScaleProduct", b =>
                {
                    b.Navigation("ScaleLabelDefinitions");
                });
#pragma warning restore 612, 618
        }
    }
}
